// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { vectorStoreDataSourceArraySerializer, agentV1ErrorDeserializer, vectorStoreChunkingStrategyRequestUnionSerializer, _agentsPagedResultVectorStoreFileDeserializer, vectorStoreFileBatchDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters } from "@azure-rest/core-client";
import { createPoller } from "../poller.js";
export function _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files{?filter,api-version,limit,order,after,before}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        filter: options?.filter,
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listVectorStoreFileBatchFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return _agentsPagedResultVectorStoreFileDeserializer(result.body);
}
/** Returns a list of vector store files in a batch. */
export function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    return buildPagedAsyncIterator(context, () => _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options), _listVectorStoreFileBatchFilesDeserialize, ["200"], { itemName: "data" });
}
export function _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _cancelVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
export async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _cancelVectorStoreFileBatchDeserialize(result);
}
export function _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches/{batchId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Retrieve a vector store file batch. */
export async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _getVectorStoreFileBatchDeserialize(result);
}
export function _createVectorStoreFileBatchSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const path = expandUrlTemplate("/vector_stores/{vectorStoreId}/file_batches{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: { accept: "application/json", ...options.requestOptions?.headers },
        body: {
            file_ids: !options?.fileIds
                ? options?.fileIds
                : options?.fileIds.map((p) => {
                    return p;
                }),
            data_sources: !options?.dataSources
                ? options?.dataSources
                : vectorStoreDataSourceArraySerializer(options?.dataSources),
            chunking_strategy: !options?.chunkingStrategy
                ? options?.chunkingStrategy
                : vectorStoreChunkingStrategyRequestUnionSerializer(options?.chunkingStrategy),
        },
    });
}
export async function _createVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return vectorStoreFileBatchDeserializer(result.body);
}
/** Create a vector store file batch. */
export async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const result = await _createVectorStoreFileBatchSend(context, vectorStoreId, options);
    return _createVectorStoreFileBatchDeserialize(result);
}
/** Create a vector store file batch. */
export function createVectorStoreFileBatch(context, vectorStoreId, options = { requestOptions: {} }) {
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
/** Create a vector store file batch and poll. */
export function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = { requestOptions: {} }) {
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map