// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { agentV1ErrorDeserializer, fileListResponseDeserializer, fileInfoDeserializer, _uploadFileRequestSerializer, fileDeletionStatusDeserializer, } from "../../models/models.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters } from "@azure-rest/core-client";
import { createPoller } from "../poller.js";
export function _getFileContentSend(context, fileId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/files/{fileId}/content{?api-version}", {
        fileId: fileId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/octet-stream",
            ...options.requestOptions?.headers,
        },
    });
}
/** Retrieves the raw content of a specific file. */
export function getFileContent(context, fileId, options = { requestOptions: {} }) {
    const result = _getFileContentSend(context, fileId, options);
    return result;
}
export function _getFileSend(context, fileId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/files/{fileId}{?api-version}", {
        fileId: fileId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return fileInfoDeserializer(result.body);
}
/** Returns information about a specific file. Does not retrieve file content. */
export async function getFile(context, fileId, options = { requestOptions: {} }) {
    const result = await _getFileSend(context, fileId, options);
    return _getFileDeserialize(result);
}
export function _deleteFileSend(context, fileId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/files/{fileId}{?api%2Dversion}", {
        fileId: fileId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _deleteFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return fileDeletionStatusDeserializer(result.body);
}
/** Delete a previously uploaded file. */
export async function deleteFile(context, fileId, options = { requestOptions: {} }) {
    const result = await _deleteFileSend(context, fileId, options);
    return _deleteFileDeserialize(result);
}
export function _uploadFileSend(context, body, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/files{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "multipart/form-data",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: _uploadFileRequestSerializer(body),
    });
}
export async function _uploadFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return fileInfoDeserializer(result.body);
}
/** Uploads a file for use by other operations. */
export async function uploadFileInternal(context, body, options = { requestOptions: {} }) {
    const result = await _uploadFileSend(context, body, options);
    return _uploadFileDeserialize(result);
}
/** Uploads a file for use by other operations. */
export function uploadFile(context, body, options = { requestOptions: {} }) {
    return createPoller({
        initOperation: async () => {
            return uploadFileInternal(context, body, options);
        },
        pollOperation: async (currentResult) => {
            return getFile(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return getLroOperationStatus(result) === "failed" && result.statusDetails
                ? new Error(`Operation failed: ${result.statusDetails}`)
                : undefined;
        },
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
/** Uploads a file for use by other operations with polling */
export function uploadFileAndPoll(context, body, options = { requestOptions: {} }) {
    return createPoller({
        initOperation: async () => {
            return uploadFileInternal(context, body, options);
        },
        pollOperation: async (currentResult) => {
            return getFile(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return getLroOperationStatus(result) === "failed" && result.statusDetails
                ? new Error(`Operation failed: ${result.statusDetails}`)
                : undefined;
        },
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
export function _listFilesSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/files{?api%2Dversion,purpose}", {
        "api%2Dversion": context.apiVersion,
        purpose: options?.purpose,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return fileListResponseDeserializer(result.body);
}
/** Gets a list of previously uploaded files. */
export async function listFiles(context, options = { requestOptions: {} }) {
    const result = await _listFilesSend(context, options);
    return _listFilesDeserialize(result);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "running":
        case "pending":
            return "running";
        case "uploaded":
        case "processed":
            return "succeeded";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map