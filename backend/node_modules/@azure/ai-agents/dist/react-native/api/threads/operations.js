// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { toolResourcesSerializer, agentV1ErrorDeserializer, threadMessageOptionsArraySerializer, agentThreadDeserializer, _agentsPagedResultAgentThreadDeserializer, threadDeletionStatusDeserializer, } from "../../models/models.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _deleteThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _deleteThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return threadDeletionStatusDeserializer(result.body);
}
/** Deletes an existing thread. */
export async function deleteThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _deleteThreadSend(context, threadId, options);
    return _deleteThreadDeserialize(result);
}
export function _updateThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            tool_resources: !options?.toolResources
                ? options?.toolResources
                : toolResourcesSerializer(options?.toolResources),
            metadata: options?.metadata,
        },
    });
}
export async function _updateThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return agentThreadDeserializer(result.body);
}
/** Modifies an existing thread. */
export async function updateThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _updateThreadSend(context, threadId, options);
    return _updateThreadDeserialize(result);
}
export function _getThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return agentThreadDeserializer(result.body);
}
/** Gets information about an existing thread. */
export async function getThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _getThreadSend(context, threadId, options);
    return _getThreadDeserialize(result);
}
export function _listThreadsSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/threads{?api-version,limit,order,after,before}", {
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listThreadsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return _agentsPagedResultAgentThreadDeserializer(result.body);
}
/** Gets a list of threads that were previously created. */
export function listThreads(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listThreadsSend(context, options), _listThreadsDeserialize, ["200"], { itemName: "data" });
}
export function _createThreadSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/threads{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            messages: !options?.messages
                ? options?.messages
                : threadMessageOptionsArraySerializer(options?.messages),
            tool_resources: !options?.toolResources
                ? options?.toolResources
                : toolResourcesSerializer(options?.toolResources),
            metadata: options?.metadata,
        },
    });
}
export async function _createThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = createRestError(result);
        error.details = agentV1ErrorDeserializer(result.body);
        throw error;
    }
    return agentThreadDeserializer(result.body);
}
/** Creates a new thread. Threads contain messages and can be run by agents. */
export async function createThread(context, options = { requestOptions: {} }) {
    const result = await _createThreadSend(context, options);
    return _createThreadDeserialize(result);
}
//# sourceMappingURL=operations.js.map