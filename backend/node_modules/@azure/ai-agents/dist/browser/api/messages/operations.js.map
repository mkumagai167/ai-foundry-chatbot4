{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/messages/operations.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EACL,wBAAwB,EAGxB,6BAA6B,EAC7B,gCAAgC,EAEhC,yBAAyB,EAEzB,2CAA2C,GAC5C,MAAM,wBAAwB,CAAC;AAOhC,OAAO,EAEL,uBAAuB,GACxB,MAAM,uCAAuC,CAAC;AAC/C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AACxE,OAAO,EAGL,eAAe,EACf,mCAAmC,GACpC,MAAM,yBAAyB,CAAC;AAEjC,MAAM,UAAU,kBAAkB,CAChC,OAAe,EACf,QAAgB,EAChB,SAAiB,EACjB,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;IAErE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,wDAAwD,EACxD;QACE,QAAQ,EAAE,QAAQ;QAClB,SAAS,EAAE,SAAS;QACpB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;QAC7B,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,WAAW,EAAE,kBAAkB;QAC/B,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;QACD,IAAI,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE;KACtC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,0DAA0D;AAC1D,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAAe,EACf,QAAgB,EAChB,SAAiB,EACjB,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;IAErE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC/E,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,OAAe,EACf,QAAgB,EAChB,SAAiB,EACjB,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;IAElE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,wDAAwD,EACxD;QACE,QAAQ,EAAE,QAAQ;QAClB,SAAS,EAAE,SAAS;QACpB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;QAC5B,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,qCAAqC;AACrC,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,OAAe,EACf,QAAgB,EAChB,SAAiB,EACjB,UAA4C,EAAE,cAAc,EAAE,EAAE,EAAE;IAElE,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC5E,OAAO,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,OAAe,EACf,QAAgB,EAChB,UAA8C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEpE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,4EAA4E,EAC5E;QACE,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,OAAO,EAAE,KAAK;QACtB,aAAa,EAAE,OAAO,CAAC,UAAU;QACjC,KAAK,EAAE,OAAO,EAAE,KAAK;QACrB,KAAK,EAAE,OAAO,EAAE,KAAK;QACrB,KAAK,EAAE,OAAO,EAAE,KAAK;QACrB,MAAM,EAAE,OAAO,EAAE,MAAM;KACxB,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;QAC5B,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,2CAA2C,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAClE,CAAC;AAED,sDAAsD;AACtD,MAAM,UAAU,YAAY,CAC1B,OAAe,EACf,QAAgB,EAChB,UAA8C,EAAE,cAAc,EAAE,EAAE,EAAE;IAEpE,OAAO,uBAAuB,CAC5B,OAAO,EACP,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,EACnD,wBAAwB,EACxB,CAAC,KAAK,CAAC,EACP,EAAE,QAAQ,EAAE,MAAM,EAAE,CACrB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,OAAe,EACf,QAAgB,EAChB,IAAiB,EACjB,OAA4B,EAC5B,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;IAErE,MAAM,IAAI,GAAG,iBAAiB,CAC5B,4CAA4C,EAC5C;QACE,QAAQ,EAAE,QAAQ;QAClB,aAAa,EAAE,OAAO,CAAC,UAAU;KAClC,EACD;QACE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;QAC7B,GAAG,mCAAmC,CAAC,OAAO,CAAC;QAC/C,WAAW,EAAE,kBAAkB;QAC/B,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,GAAG,OAAO,CAAC,cAAc,EAAE,OAAO;SACnC;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,6BAA6B,CAAC,OAAO,CAAC;YAC/C,WAAW,EAAE,CAAC,OAAO,EAAE,WAAW;gBAChC,CAAC,CAAC,OAAO,EAAE,WAAW;gBACtB,CAAC,CAAC,gCAAgC,CAAC,OAAO,EAAE,WAAW,CAAC;YAC1D,QAAQ,EAAE,OAAO,EAAE,QAAQ;SAC5B;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,MAA6B;IAE7B,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QACtC,KAAK,CAAC,OAAO,GAAG,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC;IACd,CAAC;IAED,OAAO,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AAED,mDAAmD;AACnD,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAAe,EACf,QAAgB,EAChB,IAAiB,EACjB,OAA4B,EAC5B,UAA+C,EAAE,cAAc,EAAE,EAAE,EAAE;IAErE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnF,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AgentsContext as Client } from \"../index.js\";\nimport {\n  agentV1ErrorDeserializer,\n  MessageRole,\n  MessageInputContent,\n  messageInputContentSerializer,\n  messageAttachmentArraySerializer,\n  ThreadMessage,\n  threadMessageDeserializer,\n  _AgentsPagedResultThreadMessage,\n  _agentsPagedResultThreadMessageDeserializer,\n} from \"../../models/models.js\";\nimport {\n  MessagesUpdateMessageOptionalParams,\n  MessagesGetMessageOptionalParams,\n  MessagesListMessagesOptionalParams,\n  MessagesCreateMessageOptionalParams,\n} from \"./options.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _updateMessageSend(\n  context: Client,\n  threadId: string,\n  messageId: string,\n  options: MessagesUpdateMessageOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/messages/{messageId}{?api-version}\",\n    {\n      threadId: threadId,\n      messageId: messageId,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: { metadata: options?.metadata },\n  });\n}\n\nexport async function _updateMessageDeserialize(\n  result: PathUncheckedResponse,\n): Promise<ThreadMessage> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return threadMessageDeserializer(result.body);\n}\n\n/** Modifies an existing message on an existing thread. */\nexport async function updateMessage(\n  context: Client,\n  threadId: string,\n  messageId: string,\n  options: MessagesUpdateMessageOptionalParams = { requestOptions: {} },\n): Promise<ThreadMessage> {\n  const result = await _updateMessageSend(context, threadId, messageId, options);\n  return _updateMessageDeserialize(result);\n}\n\nexport function _getMessageSend(\n  context: Client,\n  threadId: string,\n  messageId: string,\n  options: MessagesGetMessageOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/messages/{messageId}{?api-version}\",\n    {\n      threadId: threadId,\n      messageId: messageId,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getMessageDeserialize(\n  result: PathUncheckedResponse,\n): Promise<ThreadMessage> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return threadMessageDeserializer(result.body);\n}\n\n/** Retrieves an existing message. */\nexport async function getMessage(\n  context: Client,\n  threadId: string,\n  messageId: string,\n  options: MessagesGetMessageOptionalParams = { requestOptions: {} },\n): Promise<ThreadMessage> {\n  const result = await _getMessageSend(context, threadId, messageId, options);\n  return _getMessageDeserialize(result);\n}\n\nexport function _listMessagesSend(\n  context: Client,\n  threadId: string,\n  options: MessagesListMessagesOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/messages{?run_id,api-version,limit,order,after,before}\",\n    {\n      threadId: threadId,\n      run_id: options?.runId,\n      \"api-version\": context.apiVersion,\n      limit: options?.limit,\n      order: options?.order,\n      after: options?.after,\n      before: options?.before,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listMessagesDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_AgentsPagedResultThreadMessage> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return _agentsPagedResultThreadMessageDeserializer(result.body);\n}\n\n/** Gets a list of messages that exist on a thread. */\nexport function listMessages(\n  context: Client,\n  threadId: string,\n  options: MessagesListMessagesOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<ThreadMessage> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listMessagesSend(context, threadId, options),\n    _listMessagesDeserialize,\n    [\"200\"],\n    { itemName: \"data\" },\n  );\n}\n\nexport function _createMessageSend(\n  context: Client,\n  threadId: string,\n  role: MessageRole,\n  content: MessageInputContent,\n  options: MessagesCreateMessageOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/threads/{threadId}/messages{?api-version}\",\n    {\n      threadId: threadId,\n      \"api-version\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: {\n      role: role,\n      content: messageInputContentSerializer(content),\n      attachments: !options?.attachments\n        ? options?.attachments\n        : messageAttachmentArraySerializer(options?.attachments),\n      metadata: options?.metadata,\n    },\n  });\n}\n\nexport async function _createMessageDeserialize(\n  result: PathUncheckedResponse,\n): Promise<ThreadMessage> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return threadMessageDeserializer(result.body);\n}\n\n/** Creates a new message on a specified thread. */\nexport async function createMessage(\n  context: Client,\n  threadId: string,\n  role: MessageRole,\n  content: MessageInputContent,\n  options: MessagesCreateMessageOptionalParams = { requestOptions: {} },\n): Promise<ThreadMessage> {\n  const result = await _createMessageSend(context, threadId, role, content, options);\n  return _createMessageDeserialize(result);\n}\n"]}