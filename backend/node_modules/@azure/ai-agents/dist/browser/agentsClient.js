// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { createAgents } from "./api/index.js";
import { deleteAgent, updateAgent, getAgent, listAgents, createAgent } from "./api/operations.js";
import { _getVectorStoreFileBatchesOperations } from "./classic/vectorStoreFileBatches/index.js";
import { _getVectorStoreFilesOperations } from "./classic/vectorStoreFiles/index.js";
import { _getVectorStoresOperations } from "./classic/vectorStores/index.js";
import { _getFilesOperations } from "./classic/files/index.js";
import { _getRunStepsOperations } from "./classic/runSteps/index.js";
import { _getRunsOperations } from "./classic/runs/index.js";
import { _getMessagesOperations } from "./classic/messages/index.js";
import { _getThreadsOperations } from "./classic/threads/index.js";
export class AgentsClient {
    _client;
    /** The pipeline used by this client to make requests */
    pipeline;
    constructor(endpointParam, credential, options = {}) {
        const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._client = createAgents(endpointParam, credential, {
            ...options,
            userAgentOptions: { userAgentPrefix },
        });
        this.pipeline = this._client.pipeline;
        this.vectorStoreFileBatches = _getVectorStoreFileBatchesOperations(this._client);
        this.vectorStoreFiles = _getVectorStoreFilesOperations(this._client);
        this.vectorStores = _getVectorStoresOperations(this._client);
        this.files = _getFilesOperations(this._client);
        this.runSteps = _getRunStepsOperations(this._client);
        this.runs = _getRunsOperations(this._client);
        this.messages = _getMessagesOperations(this._client);
        this.threads = _getThreadsOperations(this._client);
    }
    /** The operation groups for vectorStoreFileBatches */
    vectorStoreFileBatches;
    /** The operation groups for vectorStoreFiles */
    vectorStoreFiles;
    /** The operation groups for vectorStores */
    vectorStores;
    /** The operation groups for files */
    files;
    /** The operation groups for runSteps */
    runSteps;
    /** The operation groups for runs */
    runs;
    /** The operation groups for messages */
    messages;
    /** The operation groups for threads */
    threads;
    /** Deletes an agent. */
    deleteAgent(assistantId, options = { requestOptions: {} }) {
        return deleteAgent(this._client, assistantId, options);
    }
    /** Modifies an existing agent. */
    updateAgent(assistantId, options = { requestOptions: {} }) {
        return updateAgent(this._client, assistantId, options);
    }
    /** Retrieves an existing agent. */
    getAgent(assistantId, options = { requestOptions: {} }) {
        return getAgent(this._client, assistantId, options);
    }
    /** Gets a list of agents that were previously created. */
    listAgents(options = { requestOptions: {} }) {
        return listAgents(this._client, options);
    }
    /** Creates a new agent. */
    createAgent(model, options = { requestOptions: {} }) {
        return createAgent(this._client, model, options);
    }
}
//# sourceMappingURL=agentsClient.js.map