{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/api/vectorStoreFileBatches/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AgentsContext as Client } from \"../index.js\";\nimport type {\n  _AgentsPagedResultVectorStoreFile,\n  VectorStoreFileBatch,\n  VectorStoreFile,\n} from \"../../models/models.js\";\nimport {\n  vectorStoreDataSourceArraySerializer,\n  agentV1ErrorDeserializer,\n  vectorStoreChunkingStrategyRequestUnionSerializer,\n  _agentsPagedResultVectorStoreFileDeserializer,\n  vectorStoreFileBatchDeserializer,\n} from \"../../models/models.js\";\nimport type {\n  VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams,\n  VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams,\n  VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams,\n  VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams,\n} from \"./options.js\";\nimport type { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { buildPagedAsyncIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { expandUrlTemplate } from \"../../static-helpers/urlTemplate.js\";\nimport type { StreamableMethod, PathUncheckedResponse } from \"@azure-rest/core-client\";\nimport { createRestError, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type { OperationState, OperationStatus, PollerLike } from \"@azure/core-lro\";\nimport { createPoller } from \"../poller.js\";\n\nexport function _listVectorStoreFileBatchFilesSend(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/vector_stores/{vectorStoreId}/file_batches/{batchId}/files{?filter,api-version,limit,order,after,before}\",\n    {\n      vectorStoreId: vectorStoreId,\n      batchId: batchId,\n      filter: options?.filter,\n      \"api-version\": context.apiVersion,\n      limit: options?.limit,\n      order: options?.order,\n      after: options?.after,\n      before: options?.before,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _listVectorStoreFileBatchFilesDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_AgentsPagedResultVectorStoreFile> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _agentsPagedResultVectorStoreFileDeserializer(result.body);\n}\n\n/** Returns a list of vector store files in a batch. */\nexport function listVectorStoreFileBatchFiles(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesListVectorStoreFileBatchFilesOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<VectorStoreFile> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options),\n    _listVectorStoreFileBatchFilesDeserialize,\n    [\"200\"],\n    { itemName: \"data\" },\n  );\n}\n\nexport function _cancelVectorStoreFileBatchSend(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel{?api%2Dversion}\",\n    {\n      vectorStoreId: vectorStoreId,\n      batchId: batchId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _cancelVectorStoreFileBatchDeserialize(\n  result: PathUncheckedResponse,\n): Promise<VectorStoreFileBatch> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return vectorStoreFileBatchDeserializer(result.body);\n}\n\n/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */\nexport async function cancelVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesCancelVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<VectorStoreFileBatch> {\n  const result = await _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);\n  return _cancelVectorStoreFileBatchDeserialize(result);\n}\n\nexport function _getVectorStoreFileBatchSend(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/vector_stores/{vectorStoreId}/file_batches/{batchId}{?api%2Dversion}\",\n    {\n      vectorStoreId: vectorStoreId,\n      batchId: batchId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).get({\n    ...operationOptionsToRequestParameters(options),\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n  });\n}\n\nexport async function _getVectorStoreFileBatchDeserialize(\n  result: PathUncheckedResponse,\n): Promise<VectorStoreFileBatch> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return vectorStoreFileBatchDeserializer(result.body);\n}\n\n/** Retrieve a vector store file batch. */\nexport async function getVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: VectorStoreFileBatchesGetVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<VectorStoreFileBatch> {\n  const result = await _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);\n  return _getVectorStoreFileBatchDeserialize(result);\n}\n\nexport function _createVectorStoreFileBatchSend(\n  context: Client,\n  vectorStoreId: string,\n  options: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/vector_stores/{vectorStoreId}/file_batches{?api%2Dversion}\",\n    {\n      vectorStoreId: vectorStoreId,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: { accept: \"application/json\", ...options.requestOptions?.headers },\n    body: {\n      file_ids: !options?.fileIds\n        ? options?.fileIds\n        : options?.fileIds.map((p: any) => {\n            return p;\n          }),\n      data_sources: !options?.dataSources\n        ? options?.dataSources\n        : vectorStoreDataSourceArraySerializer(options?.dataSources),\n      chunking_strategy: !options?.chunkingStrategy\n        ? options?.chunkingStrategy\n        : vectorStoreChunkingStrategyRequestUnionSerializer(options?.chunkingStrategy),\n    },\n  });\n}\n\nexport async function _createVectorStoreFileBatchDeserialize(\n  result: PathUncheckedResponse,\n): Promise<VectorStoreFileBatch> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = agentV1ErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return vectorStoreFileBatchDeserializer(result.body);\n}\n\n/** Create a vector store file batch. */\nexport async function createVectorStoreFileBatchInternal(\n  context: Client,\n  vectorStoreId: string,\n  options: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<VectorStoreFileBatch> {\n  const result = await _createVectorStoreFileBatchSend(context, vectorStoreId, options);\n  return _createVectorStoreFileBatchDeserialize(result);\n}\n\n/** Create a vector store file batch. */\nexport function createVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  options: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch> {\n  return createPoller<VectorStoreFileBatch>({\n    initOperation: async () => {\n      return createVectorStoreFileBatchInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileBatch) => {\n      return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    intervalInMs: options.pollingOptions?.intervalInMs,\n  });\n}\n\n/** Create a vector store file batch and poll. */\nexport function createVectorStoreFileBatchAndPoll(\n  context: Client,\n  vectorStoreId: string,\n  options: VectorStoreFileBatchesCreateVectorStoreFileBatchOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<VectorStoreFileBatch>, VectorStoreFileBatch> {\n  return createPoller<VectorStoreFileBatch>({\n    initOperation: async () => {\n      return createVectorStoreFileBatchInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileBatch) => {\n      return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    intervalInMs: options.pollingOptions?.intervalInMs,\n  });\n}\n\nfunction getLroOperationStatus(result: VectorStoreFileBatch): OperationStatus {\n  switch (result.status) {\n    case \"in_progress\":\n      return \"running\";\n    case \"completed\":\n      return \"succeeded\";\n    case \"cancelled\":\n      return \"canceled\";\n    default:\n      return \"failed\";\n  }\n}\n"]}