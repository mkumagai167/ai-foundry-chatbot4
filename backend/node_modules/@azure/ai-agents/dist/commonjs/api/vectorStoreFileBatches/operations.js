"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._listVectorStoreFileBatchFilesSend = _listVectorStoreFileBatchFilesSend;
exports._listVectorStoreFileBatchFilesDeserialize = _listVectorStoreFileBatchFilesDeserialize;
exports.listVectorStoreFileBatchFiles = listVectorStoreFileBatchFiles;
exports._cancelVectorStoreFileBatchSend = _cancelVectorStoreFileBatchSend;
exports._cancelVectorStoreFileBatchDeserialize = _cancelVectorStoreFileBatchDeserialize;
exports.cancelVectorStoreFileBatch = cancelVectorStoreFileBatch;
exports._getVectorStoreFileBatchSend = _getVectorStoreFileBatchSend;
exports._getVectorStoreFileBatchDeserialize = _getVectorStoreFileBatchDeserialize;
exports.getVectorStoreFileBatch = getVectorStoreFileBatch;
exports._createVectorStoreFileBatchSend = _createVectorStoreFileBatchSend;
exports._createVectorStoreFileBatchDeserialize = _createVectorStoreFileBatchDeserialize;
exports.createVectorStoreFileBatchInternal = createVectorStoreFileBatchInternal;
exports.createVectorStoreFileBatch = createVectorStoreFileBatch;
exports.createVectorStoreFileBatchAndPoll = createVectorStoreFileBatchAndPoll;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("../poller.js");
function _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files{?filter,api-version,limit,order,after,before}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        filter: options?.filter,
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listVectorStoreFileBatchFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._agentsPagedResultVectorStoreFileDeserializer)(result.body);
}
/** Returns a list of vector store files in a batch. */
function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listVectorStoreFileBatchFilesSend(context, vectorStoreId, batchId, options), _listVectorStoreFileBatchFilesDeserialize, ["200"], { itemName: "data" });
}
function _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _cancelVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _cancelVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _cancelVectorStoreFileBatchDeserialize(result);
}
function _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches/{batchId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        batchId: batchId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Retrieve a vector store file batch. */
async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {
    requestOptions: {},
}) {
    const result = await _getVectorStoreFileBatchSend(context, vectorStoreId, batchId, options);
    return _getVectorStoreFileBatchDeserialize(result);
}
function _createVectorStoreFileBatchSend(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}/file_batches{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: { accept: "application/json", ...options.requestOptions?.headers },
        body: {
            file_ids: !options?.fileIds
                ? options?.fileIds
                : options?.fileIds.map((p) => {
                    return p;
                }),
            data_sources: !options?.dataSources
                ? options?.dataSources
                : (0, models_js_1.vectorStoreDataSourceArraySerializer)(options?.dataSources),
            chunking_strategy: !options?.chunkingStrategy
                ? options?.chunkingStrategy
                : (0, models_js_1.vectorStoreChunkingStrategyRequestUnionSerializer)(options?.chunkingStrategy),
        },
    });
}
async function _createVectorStoreFileBatchDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreFileBatchDeserializer)(result.body);
}
/** Create a vector store file batch. */
async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {
    requestOptions: {},
}) {
    const result = await _createVectorStoreFileBatchSend(context, vectorStoreId, options);
    return _createVectorStoreFileBatchDeserialize(result);
}
/** Create a vector store file batch. */
function createVectorStoreFileBatch(context, vectorStoreId, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
/** Create a vector store file batch and poll. */
function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map