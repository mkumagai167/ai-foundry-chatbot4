"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._updateMessageSend = _updateMessageSend;
exports._updateMessageDeserialize = _updateMessageDeserialize;
exports.updateMessage = updateMessage;
exports._getMessageSend = _getMessageSend;
exports._getMessageDeserialize = _getMessageDeserialize;
exports.getMessage = getMessage;
exports._listMessagesSend = _listMessagesSend;
exports._listMessagesDeserialize = _listMessagesDeserialize;
exports.listMessages = listMessages;
exports._createMessageSend = _createMessageSend;
exports._createMessageDeserialize = _createMessageDeserialize;
exports.createMessage = createMessage;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _updateMessageSend(context, threadId, messageId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/messages/{messageId}{?api-version}", {
        threadId: threadId,
        messageId: messageId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: { metadata: options?.metadata },
    });
}
async function _updateMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadMessageDeserializer)(result.body);
}
/** Modifies an existing message on an existing thread. */
async function updateMessage(context, threadId, messageId, options = { requestOptions: {} }) {
    const result = await _updateMessageSend(context, threadId, messageId, options);
    return _updateMessageDeserialize(result);
}
function _getMessageSend(context, threadId, messageId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/messages/{messageId}{?api-version}", {
        threadId: threadId,
        messageId: messageId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadMessageDeserializer)(result.body);
}
/** Retrieves an existing message. */
async function getMessage(context, threadId, messageId, options = { requestOptions: {} }) {
    const result = await _getMessageSend(context, threadId, messageId, options);
    return _getMessageDeserialize(result);
}
function _listMessagesSend(context, threadId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/messages{?run_id,api-version,limit,order,after,before}", {
        threadId: threadId,
        run_id: options?.runId,
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listMessagesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return (0, models_js_1._agentsPagedResultThreadMessageDeserializer)(result.body);
}
/** Gets a list of messages that exist on a thread. */
function listMessages(context, threadId, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listMessagesSend(context, threadId, options), _listMessagesDeserialize, ["200"], { itemName: "data" });
}
function _createMessageSend(context, threadId, role, content, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/messages{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            role: role,
            content: (0, models_js_1.messageInputContentSerializer)(content),
            attachments: !options?.attachments
                ? options?.attachments
                : (0, models_js_1.messageAttachmentArraySerializer)(options?.attachments),
            metadata: options?.metadata,
        },
    });
}
async function _createMessageDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadMessageDeserializer)(result.body);
}
/** Creates a new message on a specified thread. */
async function createMessage(context, threadId, role, content, options = { requestOptions: {} }) {
    const result = await _createMessageSend(context, threadId, role, content, options);
    return _createMessageDeserialize(result);
}
//# sourceMappingURL=operations.js.map