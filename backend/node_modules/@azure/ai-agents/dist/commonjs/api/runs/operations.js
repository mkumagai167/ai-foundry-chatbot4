"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._cancelRunSend = _cancelRunSend;
exports._cancelRunDeserialize = _cancelRunDeserialize;
exports.cancelRun = cancelRun;
exports._submitToolOutputsToRunSend = _submitToolOutputsToRunSend;
exports._submitToolOutputsToRunDeserialize = _submitToolOutputsToRunDeserialize;
exports.submitToolOutputsToRun = submitToolOutputsToRun;
exports._updateRunSend = _updateRunSend;
exports._updateRunDeserialize = _updateRunDeserialize;
exports.updateRun = updateRun;
exports._getRunSend = _getRunSend;
exports._getRunDeserialize = _getRunDeserialize;
exports.getRun = getRun;
exports._listRunsSend = _listRunsSend;
exports._listRunsDeserialize = _listRunsDeserialize;
exports.listRuns = listRuns;
exports._createRunSend = _createRunSend;
exports._createRunDeserialize = _createRunDeserialize;
exports.createRunInternal = createRunInternal;
exports.createRun = createRun;
exports.createRunAndPoll = createRunAndPoll;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const operations_js_1 = require("../operations.js");
const poller_js_1 = require("../poller.js");
function _cancelRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}/cancel{?api-version}", {
        threadId: threadId,
        runId: runId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _cancelRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Cancels a run of an in‐progress thread. */
async function cancelRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _cancelRunSend(context, threadId, runId, options);
    return _cancelRunDeserialize(result);
}
function _submitToolOutputsToRunSend(context, threadId, runId, toolOutputs, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}/submit_tool_outputs{?api-version}", {
        threadId: threadId,
        runId: runId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            tool_outputs: toolOutputs.length > 0 ? (0, models_js_1.toolOutputArraySerializer)(toolOutputs) : undefined,
            stream: options?.stream ?? false,
        },
    });
}
async function _submitToolOutputsToRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Submits outputs from tools as requested by tool calls in a run. */
function submitToolOutputsToRun(context, threadId, runId, toolOutputs, options = { requestOptions: {} }) {
    async function executeSubmitToolOutputsToRun() {
        const result = await _submitToolOutputsToRunSend(context, threadId, runId, toolOutputs, options);
        return _submitToolOutputsToRunDeserialize(result);
    }
    return {
        then: function (onFulfilled, onRejected) {
            return executeSubmitToolOutputsToRun().then(onFulfilled, onRejected).catch(onRejected);
        },
        async stream() {
            return (0, operations_js_1.submitToolOutputsToRunStreaming)(context, threadId, runId, toolOutputs, options);
        },
    };
}
function _updateRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}{?api-version}", {
        threadId: threadId,
        runId: runId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: { metadata: options?.metadata },
    });
}
async function _updateRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Modifies an existing thread run. */
async function updateRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _updateRunSend(context, threadId, runId, options);
    return _updateRunDeserialize(result);
}
function _getRunSend(context, threadId, runId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}{?api-version}", {
        threadId: threadId,
        runId: runId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Gets an existing run from an existing thread. */
async function getRun(context, threadId, runId, options = { requestOptions: {} }) {
    const result = await _getRunSend(context, threadId, runId, options);
    return _getRunDeserialize(result);
}
function _listRunsSend(context, threadId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs{?api-version,limit,order,after,before}", {
        threadId: threadId,
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listRunsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._agentsPagedResultThreadRunDeserializer)(result.body);
}
/** Gets a list of runs for a specified thread. */
function listRuns(context, threadId, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listRunsSend(context, threadId, options), _listRunsDeserialize, ["200"], { itemName: "data" });
}
function _createRunSend(context, threadId, assistantId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs{?api-version,include%5B%5D}", {
        threadId: threadId,
        "api-version": context.apiVersion,
        "include%5B%5D": !options?.include
            ? options?.include
            : options?.include.map((p) => {
                return p;
            }),
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            assistant_id: assistantId,
            model: options?.model,
            instructions: options?.instructions,
            additional_instructions: options?.additionalInstructions,
            additional_messages: !options?.additionalMessages
                ? options?.additionalMessages
                : (0, models_js_1.threadMessageOptionsArraySerializer)(options?.additionalMessages),
            tools: !options?.tools ? options?.tools : (0, models_js_1.toolDefinitionUnionArraySerializer)(options?.tools),
            tool_resources: !options?.toolResources
                ? options?.toolResources
                : (0, models_js_1.toolResourcesSerializer)(options?.toolResources),
            stream: options?.stream,
            temperature: options?.temperature,
            top_p: options?.topP,
            max_prompt_tokens: options?.maxPromptTokens,
            max_completion_tokens: options?.maxCompletionTokens,
            truncation_strategy: !options?.truncationStrategy
                ? options?.truncationStrategy
                : (0, models_js_1.truncationObjectSerializer)(options?.truncationStrategy),
            tool_choice: !options?.toolChoice
                ? options?.toolChoice
                : (0, models_js_1.agentsToolChoiceOptionSerializer)(options?.toolChoice),
            response_format: !options?.responseFormat
                ? options?.responseFormat
                : (0, models_js_1.agentsResponseFormatOptionSerializer)(options?.responseFormat),
            parallel_tool_calls: options?.parallelToolCalls,
            metadata: options?.metadata,
        },
    });
}
async function _createRunDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadRunDeserializer)(result.body);
}
/** Creates a new run for an agent thread (internal implementation). */
async function createRunInternal(context, threadId, assistantId, options = { requestOptions: {} }) {
    const result = await _createRunSend(context, threadId, assistantId, options);
    return _createRunDeserialize(result);
}
/** Creates a new run for an agent thread. */
function createRun(context, threadId, assistantId, options = { requestOptions: {} }) {
    async function executeCreateRun() {
        return createRunInternal(context, threadId, assistantId, options);
    }
    return {
        then: function (onFulfilled, onRejected) {
            return executeCreateRun().then(onFulfilled, onRejected).catch(onRejected);
        },
        async stream() {
            return (0, operations_js_1.createRunStreaming)(context, assistantId, threadId, options);
        },
    };
}
/** Creates a new run for an agent thread with polling */
function createRunAndPoll(context, threadId, assistantId, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createRunInternal(context, threadId, assistantId, options);
        },
        pollOperation: async (currentRun) => {
            return getRun(context, threadId, currentRun.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return getLroOperationStatus(result) === "failed" && result.lastError
                ? new Error(`Operation failed: ${result.lastError.message}`)
                : undefined;
        },
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "queued":
            return "notStarted";
        case "in_progress":
            return "running";
        case "requires_action":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
        case "expired":
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map