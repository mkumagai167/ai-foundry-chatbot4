"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._deleteThreadSend = _deleteThreadSend;
exports._deleteThreadDeserialize = _deleteThreadDeserialize;
exports.deleteThread = deleteThread;
exports._updateThreadSend = _updateThreadSend;
exports._updateThreadDeserialize = _updateThreadDeserialize;
exports.updateThread = updateThread;
exports._getThreadSend = _getThreadSend;
exports._getThreadDeserialize = _getThreadDeserialize;
exports.getThread = getThread;
exports._listThreadsSend = _listThreadsSend;
exports._listThreadsDeserialize = _listThreadsDeserialize;
exports.listThreads = listThreads;
exports._createThreadSend = _createThreadSend;
exports._createThreadDeserialize = _createThreadDeserialize;
exports.createThread = createThread;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _deleteThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _deleteThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.threadDeletionStatusDeserializer)(result.body);
}
/** Deletes an existing thread. */
async function deleteThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _deleteThreadSend(context, threadId, options);
    return _deleteThreadDeserialize(result);
}
function _updateThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            tool_resources: !options?.toolResources
                ? options?.toolResources
                : (0, models_js_1.toolResourcesSerializer)(options?.toolResources),
            metadata: options?.metadata,
        },
    });
}
async function _updateThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.agentThreadDeserializer)(result.body);
}
/** Modifies an existing thread. */
async function updateThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _updateThreadSend(context, threadId, options);
    return _updateThreadDeserialize(result);
}
function _getThreadSend(context, threadId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}{?api-version}", {
        threadId: threadId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.agentThreadDeserializer)(result.body);
}
/** Gets information about an existing thread. */
async function getThread(context, threadId, options = { requestOptions: {} }) {
    const result = await _getThreadSend(context, threadId, options);
    return _getThreadDeserialize(result);
}
function _listThreadsSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads{?api-version,limit,order,after,before}", {
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listThreadsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._agentsPagedResultAgentThreadDeserializer)(result.body);
}
/** Gets a list of threads that were previously created. */
function listThreads(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listThreadsSend(context, options), _listThreadsDeserialize, ["200"], { itemName: "data" });
}
function _createThreadSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            messages: !options?.messages
                ? options?.messages
                : (0, models_js_1.threadMessageOptionsArraySerializer)(options?.messages),
            tool_resources: !options?.toolResources
                ? options?.toolResources
                : (0, models_js_1.toolResourcesSerializer)(options?.toolResources),
            metadata: options?.metadata,
        },
    });
}
async function _createThreadDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.agentThreadDeserializer)(result.body);
}
/** Creates a new thread. Threads contain messages and can be run by agents. */
async function createThread(context, options = { requestOptions: {} }) {
    const result = await _createThreadSend(context, options);
    return _createThreadDeserialize(result);
}
//# sourceMappingURL=operations.js.map