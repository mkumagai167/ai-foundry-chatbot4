"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._listRunStepsSend = _listRunStepsSend;
exports._listRunStepsDeserialize = _listRunStepsDeserialize;
exports.listRunSteps = listRunSteps;
exports._getRunStepSend = _getRunStepSend;
exports._getRunStepDeserialize = _getRunStepDeserialize;
exports.getRunStep = getRunStep;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _listRunStepsSend(context, threadId, runId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}/steps{?include%5B%5D,api-version,limit,order,after,before}", {
        threadId: threadId,
        runId: runId,
        "include%5B%5D": !options?.include
            ? options?.include
            : options?.include.map((p) => {
                return p;
            }),
        "api-version": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listRunStepsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._agentsPagedResultRunStepDeserializer)(result.body);
}
/** Gets a list of run steps from a thread run. */
function listRunSteps(context, threadId, runId, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listRunStepsSend(context, threadId, runId, options), _listRunStepsDeserialize, ["200"], { itemName: "data" });
}
function _getRunStepSend(context, threadId, runId, stepId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/threads/{threadId}/runs/{runId}/steps/{stepId}{?api-version,include%5B%5D}", {
        threadId: threadId,
        runId: runId,
        stepId: stepId,
        "api-version": context.apiVersion,
        "include%5B%5D": !options?.include
            ? options?.include
            : options?.include.map((p) => {
                return p;
            }),
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getRunStepDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.runStepDeserializer)(result.body);
}
/** Retrieves a single run step from a thread run. */
async function getRunStep(context, threadId, runId, stepId, options = { requestOptions: {} }) {
    const result = await _getRunStepSend(context, threadId, runId, stepId, options);
    return _getRunStepDeserialize(result);
}
//# sourceMappingURL=operations.js.map