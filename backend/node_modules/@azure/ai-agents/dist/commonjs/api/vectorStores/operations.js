"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._deleteVectorStoreSend = _deleteVectorStoreSend;
exports._deleteVectorStoreDeserialize = _deleteVectorStoreDeserialize;
exports.deleteVectorStore = deleteVectorStore;
exports._modifyVectorStoreSend = _modifyVectorStoreSend;
exports._modifyVectorStoreDeserialize = _modifyVectorStoreDeserialize;
exports.modifyVectorStore = modifyVectorStore;
exports._getVectorStoreSend = _getVectorStoreSend;
exports._getVectorStoreDeserialize = _getVectorStoreDeserialize;
exports.getVectorStore = getVectorStore;
exports._createVectorStoreSend = _createVectorStoreSend;
exports._createVectorStoreDeserialize = _createVectorStoreDeserialize;
exports.createVectorStoreInternal = createVectorStoreInternal;
exports.createVectorStore = createVectorStore;
exports.createVectorStoreAndPoll = createVectorStoreAndPoll;
exports._listVectorStoresSend = _listVectorStoresSend;
exports._listVectorStoresDeserialize = _listVectorStoresDeserialize;
exports.listVectorStores = listVectorStores;
const models_js_1 = require("../../models/models.js");
const pagingHelpers_js_1 = require("../../static-helpers/pagingHelpers.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("../poller.js");
function _deleteVectorStoreSend(context, vectorStoreId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _deleteVectorStoreDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreDeletionStatusDeserializer)(result.body);
}
/** Deletes the vector store object matching the specified ID. */
async function deleteVectorStore(context, vectorStoreId, options = { requestOptions: {} }) {
    const result = await _deleteVectorStoreSend(context, vectorStoreId, options);
    return _deleteVectorStoreDeserialize(result);
}
function _modifyVectorStoreSend(context, vectorStoreId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: {
            name: options?.name,
            expires_after: !options?.expiresAfter
                ? options?.expiresAfter
                : (0, models_js_1.vectorStoreExpirationPolicySerializer)(options?.expiresAfter),
            metadata: options?.metadata,
        },
    });
}
async function _modifyVectorStoreDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreDeserializer)(result.body);
}
/** Modifies an existing vector store. */
async function modifyVectorStore(context, vectorStoreId, options = { requestOptions: {} }) {
    const result = await _modifyVectorStoreSend(context, vectorStoreId, options);
    return _modifyVectorStoreDeserialize(result);
}
function _getVectorStoreSend(context, vectorStoreId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores/{vectorStoreId}{?api%2Dversion}", {
        vectorStoreId: vectorStoreId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getVectorStoreDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreDeserializer)(result.body);
}
/** Returns the vector store object matching the specified ID. */
async function getVectorStore(context, vectorStoreId, options = { requestOptions: {} }) {
    const result = await _getVectorStoreSend(context, vectorStoreId, options);
    return _getVectorStoreDeserialize(result);
}
function _createVectorStoreSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores{?api%2Dversion}", {
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "application/json",
        headers: { accept: "application/json", ...options.requestOptions?.headers },
        body: {
            file_ids: !options?.fileIds
                ? options?.fileIds
                : options?.fileIds.map((p) => {
                    return p;
                }),
            name: options?.name,
            configuration: !options?.storeConfiguration
                ? options?.storeConfiguration
                : (0, models_js_1.vectorStoreConfigurationSerializer)(options?.storeConfiguration),
            expires_after: !options?.expiresAfter
                ? options?.expiresAfter
                : (0, models_js_1.vectorStoreExpirationPolicySerializer)(options?.expiresAfter),
            chunking_strategy: !options?.chunkingStrategy
                ? options?.chunkingStrategy
                : (0, models_js_1.vectorStoreChunkingStrategyRequestUnionSerializer)(options?.chunkingStrategy),
            metadata: options?.metadata,
        },
    });
}
async function _createVectorStoreDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.vectorStoreDeserializer)(result.body);
}
/** Creates a vector store. */
async function createVectorStoreInternal(context, options = { requestOptions: {} }) {
    const result = await _createVectorStoreSend(context, options);
    return _createVectorStoreDeserialize(result);
}
/** Creates a vector store. */
function createVectorStore(context, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreInternal(context, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStore(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
/**
 * Creates a vector store and poll.
 */
function createVectorStoreAndPoll(context, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreInternal(context, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStore(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
function _listVectorStoresSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/vector_stores{?api%2Dversion,limit,order,after,before}", {
        "api%2Dversion": context.apiVersion,
        limit: options?.limit,
        order: options?.order,
        after: options?.after,
        before: options?.before,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listVectorStoresDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1._agentsPagedResultVectorStoreDeserializer)(result.body);
}
/** Returns a list of vector stores. */
function listVectorStores(context, options = { requestOptions: {} }) {
    return (0, pagingHelpers_js_1.buildPagedAsyncIterator)(context, () => _listVectorStoresSend(context, options), _listVectorStoresDeserialize, ["200"], { itemName: "data" });
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "expired":
            return "failed";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map