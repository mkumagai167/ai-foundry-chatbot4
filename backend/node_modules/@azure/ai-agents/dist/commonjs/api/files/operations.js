"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._getFileContentSend = _getFileContentSend;
exports.getFileContent = getFileContent;
exports._getFileSend = _getFileSend;
exports._getFileDeserialize = _getFileDeserialize;
exports.getFile = getFile;
exports._deleteFileSend = _deleteFileSend;
exports._deleteFileDeserialize = _deleteFileDeserialize;
exports.deleteFile = deleteFile;
exports._uploadFileSend = _uploadFileSend;
exports._uploadFileDeserialize = _uploadFileDeserialize;
exports.uploadFileInternal = uploadFileInternal;
exports.uploadFile = uploadFile;
exports.uploadFileAndPoll = uploadFileAndPoll;
exports._listFilesSend = _listFilesSend;
exports._listFilesDeserialize = _listFilesDeserialize;
exports.listFiles = listFiles;
const models_js_1 = require("../../models/models.js");
const urlTemplate_js_1 = require("../../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("../poller.js");
function _getFileContentSend(context, fileId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/files/{fileId}/content{?api-version}", {
        fileId: fileId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/octet-stream",
            ...options.requestOptions?.headers,
        },
    });
}
/** Retrieves the raw content of a specific file. */
function getFileContent(context, fileId, options = { requestOptions: {} }) {
    const result = _getFileContentSend(context, fileId, options);
    return result;
}
function _getFileSend(context, fileId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/files/{fileId}{?api-version}", {
        fileId: fileId,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _getFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.fileInfoDeserializer)(result.body);
}
/** Returns information about a specific file. Does not retrieve file content. */
async function getFile(context, fileId, options = { requestOptions: {} }) {
    const result = await _getFileSend(context, fileId, options);
    return _getFileDeserialize(result);
}
function _deleteFileSend(context, fileId, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/files/{fileId}{?api%2Dversion}", {
        fileId: fileId,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _deleteFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.fileDeletionStatusDeserializer)(result.body);
}
/** Delete a previously uploaded file. */
async function deleteFile(context, fileId, options = { requestOptions: {} }) {
    const result = await _deleteFileSend(context, fileId, options);
    return _deleteFileDeserialize(result);
}
function _uploadFileSend(context, body, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/files{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).post({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        contentType: "multipart/form-data",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: (0, models_js_1._uploadFileRequestSerializer)(body),
    });
}
async function _uploadFileDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.fileInfoDeserializer)(result.body);
}
/** Uploads a file for use by other operations. */
async function uploadFileInternal(context, body, options = { requestOptions: {} }) {
    const result = await _uploadFileSend(context, body, options);
    return _uploadFileDeserialize(result);
}
/** Uploads a file for use by other operations. */
function uploadFile(context, body, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return uploadFileInternal(context, body, options);
        },
        pollOperation: async (currentResult) => {
            return getFile(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return getLroOperationStatus(result) === "failed" && result.statusDetails
                ? new Error(`Operation failed: ${result.statusDetails}`)
                : undefined;
        },
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
/** Uploads a file for use by other operations with polling */
function uploadFileAndPoll(context, body, options = { requestOptions: {} }) {
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return uploadFileInternal(context, body, options);
        },
        pollOperation: async (currentResult) => {
            return getFile(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return getLroOperationStatus(result) === "failed" && result.statusDetails
                ? new Error(`Operation failed: ${result.statusDetails}`)
                : undefined;
        },
        intervalInMs: options.pollingOptions?.intervalInMs,
    });
}
function _listFilesSend(context, options = { requestOptions: {} }) {
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/files{?api%2Dversion,purpose}", {
        "api%2Dversion": context.apiVersion,
        purpose: options?.purpose,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...(0, core_client_1.operationOptionsToRequestParameters)(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
async function _listFilesDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        const error = (0, core_client_1.createRestError)(result);
        error.details = (0, models_js_1.agentV1ErrorDeserializer)(result.body);
        throw error;
    }
    return (0, models_js_1.fileListResponseDeserializer)(result.body);
}
/** Gets a list of previously uploaded files. */
async function listFiles(context, options = { requestOptions: {} }) {
    const result = await _listFilesSend(context, options);
    return _listFilesDeserialize(result);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "running":
        case "pending":
            return "running";
        case "uploaded":
        case "processed":
            return "succeeded";
        default:
            return "failed";
    }
}
//# sourceMappingURL=operations.js.map