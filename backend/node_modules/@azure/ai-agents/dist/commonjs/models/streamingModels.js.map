{"version":3,"file":"streamingModels.js","sourceRoot":"","sources":["../../../src/models/streamingModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  AgentStreamEvent,\n  AgentThread,\n  MessageDeltaChunk,\n  RunStep,\n  RunStepDeltaChunk,\n  ThreadMessage,\n  ThreadRun,\n} from \"./models.js\";\n\n/**\nEach event in a server-sent events stream has an `event` and `data` property:\n*  \n* @example\n* ``` ts\n*  event: thread.created\n*  data: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n* ``` \n* \n*  We emit events whenever a new object is created, transitions to a new state, or is being\n*  streamed in parts (deltas). For example, we emit `thread.run.created` when a new run\n*  is created, `thread.run.completed` when a run completes, and so on. When an Agent chooses\n*  to create a message during a run, we emit a `thread.message.created event`, a\n*  `thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n*  `thread.message.completed` event.\n*  \n*  We may add additional events over time, so we recommend handling unknown events gracefully\n*  in your code.\n**/\nexport interface AgentEventMessage {\n  /** The data of the event. The data can be of type AgentThreadOutput, ThreadRunOutput, RunStepOutput, ThreadMessageOutput, MessageDeltaChunk,RunStepDeltaChunk  */\n  data: AgentEventStreamData;\n  /** The type of the event. */\n  event: AgentStreamEvent | string;\n}\n\n/** Represents a stream event data in the agent. */\nexport type AgentEventStreamData =\n  | AgentThread\n  | ThreadRun\n  | RunStep\n  | ThreadMessage\n  | MessageDeltaChunk\n  | RunStepDeltaChunk\n  | string;\n\n/** Represents a stream of agent event message. */\nexport interface AgentEventMessageStream\n  extends AsyncDisposable,\n    AsyncIterable<AgentEventMessage> {}\n\n/**\n * Agent run response with support to stream.\n */\nexport type AgentRunResponse = PromiseLike<ThreadRun> & {\n  /**\n   * Function to start streaming the agent event messages.\n   * @returns A promise that resolves to an AgentEventMessageStream.\n   */\n  stream: () => Promise<AgentEventMessageStream>;\n};\n"]}