import { AgentsClient } from "@azure/ai-agents";
import type { AzureOpenAI } from "openai";
import { AIProjectClientOptionalParams } from "./api/index.js";
import { DeploymentsOperations } from "./classic/deployments/index.js";
import { IndexesOperations } from "./classic/indexes/index.js";
import { DatasetsOperations } from "./classic/datasets/index.js";
import { ConnectionsOperations } from "./classic/connections/index.js";
import { TelemetryOperations } from "./classic/telemetry/index.js";
import { GetAzureOpenAIClientOptions } from "./api/inference/options.js";
import type { Pipeline } from "@azure/core-rest-pipeline";
import { TokenCredential } from "@azure/core-auth";
export { AIProjectClientOptionalParams } from "./api/aiProjectContext.js";
/**
 * The main client for the AIProjectClient service. It provides access to the various operations available in the service.
 * @class AIProjectClient
 * @extends {AIProjectContext}
 * @description The main client for the AIProjectClient
 * @constructor
 * @param {string} endpoint - The endpoint to use
 * @param {TokenCredential} credential - The credential to use
 * @param {AIProjectClientOptionalParams} [options] - Optional parameters for the client.
 * @property {DeploymentsOperations} deployments - The operation groups for deployments
 * @property {IndexesOperations} indexes - The operation groups for indexes
 * @property {DatasetsOperations} datasets - The operation groups for datasets
 * @property {ConnectionsOperations} connections - The operation groups for connections
 * @method {getAzureOpenAIClient} getAzureOpenAIClient - get the Azure OpenAI client for the project
 * @property {TelemetryOperations} telemetry - The operation groups for telemetry
 */
export declare class AIProjectClient {
    private _cognitiveScopeClient;
    private _azureScopeClient;
    private _endpoint;
    private _credential;
    private _agents;
    private _options;
    private readonly _inference;
    /** The pipeline used by this client to make requests */
    readonly pipeline: Pipeline;
    constructor(endpointParam: string, credential: TokenCredential, options?: AIProjectClientOptionalParams);
    /** The operation groups for deployments */
    readonly deployments: DeploymentsOperations;
    /** The operation groups for indexes */
    readonly indexes: IndexesOperations;
    /** The operation groups for datasets */
    readonly datasets: DatasetsOperations;
    /** The operation groups for connections */
    readonly connections: ConnectionsOperations;
    /** The operation groups for inference */
    /** The operation groups for telemetry */
    readonly telemetry: TelemetryOperations;
    /**
     * gets the endpoint of the client
     * @returns the endpoint of the client
     */
    getEndpointUrl(): string;
    /**
     * Gets the Azure OpenAI client for the project.
     * @returns The Azure OpenAI client for the project.
     */
    getAzureOpenAIClient(options?: GetAzureOpenAIClientOptions): Promise<AzureOpenAI>;
    /**
     * Creates a new instance of AzureAIProjectClient
     * @param endpoint - The endpoint to use
     * @param credential - The credential to use
     * @param options - The parameter for all optional parameters
     */
    static fromEndpoint(endpoint: string, credential: TokenCredential, options?: AIProjectClientOptionalParams): AIProjectClient;
    /**
     * Get the AgentsClient associated with this AIProjectClient.
     *
     * @returns The AgentsClient associated with this AIProjectClient
     */
    get agents(): AgentsClient;
}
//# sourceMappingURL=aiProjectClient.d.ts.map