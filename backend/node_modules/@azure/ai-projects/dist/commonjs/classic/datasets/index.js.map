{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/datasets/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;AAClC,iCAAiC;;AAkIjC,wDAOC;AAvHD,oEAU0C;AA8D1C,SAAS,YAAY,CACnB,OAAyB,EACzB,iBAAgD,EAAE;IAElD,OAAO;QACL,cAAc,EAAE,CACd,IAAY,EACZ,OAAe,EACf,OAA8C,EAC9C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QACpD,aAAa,EAAE,CACb,IAAY,EACZ,OAAe,EACf,oBAA0C,EAC1C,OAA6C,EAC7C,EAAE,CAAC,IAAA,6BAAa,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,oBAAoB,EAAE,OAAO,CAAC;QACzE,cAAc,EAAE,CACd,IAAY,EACZ,OAAe,EACf,cAAmC,EACnC,OAA8C,EAC9C,EAAE,CAAC,IAAA,8BAAc,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC;QACpE,MAAM,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAsC,EAAE,EAAE,CAChF,IAAA,uBAAO,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,OAAmC,EAAE,EAAE,CAC1E,IAAA,mBAAG,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;QACtC,IAAI,EAAE,CAAC,OAAoC,EAAE,EAAE,CAAC,IAAA,oBAAI,EAAC,OAAO,EAAE,OAAO,CAAC;QACtE,YAAY,EAAE,CAAC,IAAY,EAAE,OAA4C,EAAE,EAAE,CAC3E,IAAA,4BAAY,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC;QACtC,UAAU,EAAE,CAAC,IAAY,EAAE,OAAe,EAAE,QAAgB,EAAE,OAA8B,EAAE,EAAE,CAC9F,IAAA,0BAAU,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,GAAG,OAAO,EAAE,cAAc,EAAE,CAAC;QAC9E,YAAY,EAAE,CACZ,IAAY,EACZ,OAAe,EACf,UAAkB,EAClB,OAA8B,EAC9B,EAAE,CAAC,IAAA,4BAAY,EAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,GAAG,OAAO,EAAE,cAAc,EAAE,CAAC;KACtF,CAAC;AACJ,CAAC;AAED,SAAgB,sBAAsB,CACpC,OAAyB,EACzB,iBAAgD,EAAE;IAElD,OAAO;QACL,GAAG,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC;KACzC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable tsdoc/syntax */\n\nimport { AIProjectClientOptionalParams, AIProjectContext } from \"../../api/aiProjectContext.js\";\nimport {\n  DatasetVersionUnion,\n  PendingUploadRequest,\n  PendingUploadResponse,\n  AssetCredentialResponse,\n} from \"../../models/models.js\";\nimport {\n  DatasetsGetCredentialsOptionalParams,\n  DatasetsPendingUploadOptionalParams,\n  DatasetsCreateOrUpdateOptionalParams,\n  DatasetsDeleteOptionalParams,\n  DatasetsGetOptionalParams,\n  DatasetsListOptionalParams,\n  DatasetsListVersionsOptionalParams,\n} from \"../../api/datasets/options.js\";\nimport {\n  getCredentials,\n  pendingUpload,\n  createOrUpdate,\n  $delete,\n  get,\n  list,\n  listVersions,\n  uploadFile,\n  uploadFolder,\n} from \"../../api/datasets/operations.js\";\nimport { DatasetUploadOptions } from \"../../api/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a Datasets operations. */\nexport interface DatasetsOperations {\n  /** Get the SAS credential to access the storage account associated with a Dataset version. */\n  getCredentials: (\n    name: string,\n    version: string,\n    options?: DatasetsGetCredentialsOptionalParams,\n  ) => Promise<AssetCredentialResponse>;\n  /** Start a new or get an existing pending upload of a dataset for a specific version. */\n  pendingUpload: (\n    name: string,\n    version: string,\n    pendingUploadRequest: PendingUploadRequest,\n    options?: DatasetsPendingUploadOptionalParams,\n  ) => Promise<PendingUploadResponse>;\n  /** Create a new or update an existing DatasetVersion with the given version id */\n  createOrUpdate: (\n    name: string,\n    version: string,\n    datasetVersion: DatasetVersionUnion,\n    options?: DatasetsCreateOrUpdateOptionalParams,\n  ) => Promise<DatasetVersionUnion>;\n  /** Delete the specific version of the DatasetVersion */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (name: string, version: string, options?: DatasetsDeleteOptionalParams) => Promise<void>;\n  /** Get the specific version of the DatasetVersion */\n  get: (\n    name: string,\n    version: string,\n    options?: DatasetsGetOptionalParams,\n  ) => Promise<DatasetVersionUnion>;\n  /** List the latest version of each DatasetVersion */\n  list: (options?: DatasetsListOptionalParams) => PagedAsyncIterableIterator<DatasetVersionUnion>;\n  /** List all versions of the given DatasetVersion */\n  listVersions: (\n    name: string,\n    options?: DatasetsListVersionsOptionalParams,\n  ) => PagedAsyncIterableIterator<DatasetVersionUnion>;\n  /** Upload a file to the DatasetVersion */\n  uploadFile: (\n    name: string,\n    version: string,\n    filePath: string,\n    options?: DatasetUploadOptions,\n  ) => Promise<DatasetVersionUnion>;\n  /** Upload a folder to the DatasetVersion */\n  uploadFolder: (\n    name: string,\n    version: string,\n    folderPath: string,\n    options?: DatasetUploadOptions,\n  ) => Promise<DatasetVersionUnion>;\n}\n\nfunction _getDatasets(\n  context: AIProjectContext,\n  projectOptions: AIProjectClientOptionalParams = {},\n) {\n  return {\n    getCredentials: (\n      name: string,\n      version: string,\n      options?: DatasetsGetCredentialsOptionalParams,\n    ) => getCredentials(context, name, version, options),\n    pendingUpload: (\n      name: string,\n      version: string,\n      pendingUploadRequest: PendingUploadRequest,\n      options?: DatasetsPendingUploadOptionalParams,\n    ) => pendingUpload(context, name, version, pendingUploadRequest, options),\n    createOrUpdate: (\n      name: string,\n      version: string,\n      datasetVersion: DatasetVersionUnion,\n      options?: DatasetsCreateOrUpdateOptionalParams,\n    ) => createOrUpdate(context, name, version, datasetVersion, options),\n    delete: (name: string, version: string, options?: DatasetsDeleteOptionalParams) =>\n      $delete(context, name, version, options),\n    get: (name: string, version: string, options?: DatasetsGetOptionalParams) =>\n      get(context, name, version, options),\n    list: (options?: DatasetsListOptionalParams) => list(context, options),\n    listVersions: (name: string, options?: DatasetsListVersionsOptionalParams) =>\n      listVersions(context, name, options),\n    uploadFile: (name: string, version: string, filePath: string, options?: DatasetUploadOptions) =>\n      uploadFile(context, name, version, filePath, { ...options, projectOptions }),\n    uploadFolder: (\n      name: string,\n      version: string,\n      folderPath: string,\n      options?: DatasetUploadOptions,\n    ) => uploadFolder(context, name, version, folderPath, { ...options, projectOptions }),\n  };\n}\n\nexport function _getDatasetsOperations(\n  context: AIProjectContext,\n  projectOptions: AIProjectClientOptionalParams = {},\n): DatasetsOperations {\n  return {\n    ..._getDatasets(context, projectOptions),\n  };\n}\n"]}