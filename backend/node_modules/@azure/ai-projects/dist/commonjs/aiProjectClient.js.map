{"version":3,"file":"aiProjectClient.js","sourceRoot":"","sources":["../../src/aiProjectClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable tsdoc/syntax */\n\nimport { AgentsClient } from \"@azure/ai-agents\";\nimport type { AzureOpenAI } from \"openai\";\nimport { createAIProject, AIProjectContext, AIProjectClientOptionalParams } from \"./api/index.js\";\nimport { DeploymentsOperations, _getDeploymentsOperations } from \"./classic/deployments/index.js\";\nimport { IndexesOperations, _getIndexesOperations } from \"./classic/indexes/index.js\";\nimport { DatasetsOperations, _getDatasetsOperations } from \"./classic/datasets/index.js\";\nimport { ConnectionsOperations, _getConnectionsOperations } from \"./classic/connections/index.js\";\nimport { InferenceOperations, _getInferenceOperations } from \"./classic/inference/index.js\";\nimport { TelemetryOperations, _getTelemetryOperations } from \"./classic/telemetry/index.js\";\nimport { GetAzureOpenAIClientOptions } from \"./api/inference/options.js\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\nexport { AIProjectClientOptionalParams } from \"./api/aiProjectContext.js\";\n\n/**\n * The main client for the AIProjectClient service. It provides access to the various operations available in the service.\n * @class AIProjectClient\n * @extends {AIProjectContext}\n * @description The main client for the AIProjectClient\n * @constructor\n * @param {string} endpoint - The endpoint to use\n * @param {TokenCredential} credential - The credential to use\n * @param {AIProjectClientOptionalParams} [options] - Optional parameters for the client.\n * @property {DeploymentsOperations} deployments - The operation groups for deployments\n * @property {IndexesOperations} indexes - The operation groups for indexes\n * @property {DatasetsOperations} datasets - The operation groups for datasets\n * @property {ConnectionsOperations} connections - The operation groups for connections\n * @method {getAzureOpenAIClient} getAzureOpenAIClient - get the Azure OpenAI client for the project\n * @property {TelemetryOperations} telemetry - The operation groups for telemetry\n */\nexport class AIProjectClient {\n  private _cognitiveScopeClient: AIProjectContext;\n  private _azureScopeClient: AIProjectContext;\n  private _endpoint: string;\n  private _credential: TokenCredential;\n  private _agents: AgentsClient | undefined;\n  private _options: AIProjectClientOptionalParams;\n  private readonly _inference: InferenceOperations;\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n\n  constructor(\n    endpointParam: string,\n    credential: TokenCredential,\n    options: AIProjectClientOptionalParams = {},\n  ) {\n    this._endpoint = endpointParam;\n    this._credential = credential;\n    this._options = options;\n    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;\n    const userAgentPrefix = prefixFromOptions\n      ? `${prefixFromOptions} azsdk-js-client`\n      : `azsdk-js-client`;\n    this._cognitiveScopeClient = createAIProject(endpointParam, credential, {\n      ...options,\n      userAgentOptions: { userAgentPrefix },\n    });\n\n    this._azureScopeClient = createAIProject(endpointParam, credential, {\n      ...options,\n      credentials: {\n        ...options.credentials,\n        scopes: [\"https://ai.azure.com/.default\"],\n      },\n      userAgentOptions: { userAgentPrefix },\n    });\n\n    this.pipeline = this._cognitiveScopeClient.pipeline;\n    this.deployments = _getDeploymentsOperations(this._azureScopeClient);\n    this.indexes = _getIndexesOperations(this._azureScopeClient);\n    this.datasets = _getDatasetsOperations(this._azureScopeClient, this._options);\n    this.connections = _getConnectionsOperations(this._azureScopeClient);\n    this._inference = _getInferenceOperations(this._cognitiveScopeClient, this.connections);\n    this.telemetry = _getTelemetryOperations(this.connections);\n  }\n\n  /** The operation groups for deployments */\n  public readonly deployments: DeploymentsOperations;\n  /** The operation groups for indexes */\n  public readonly indexes: IndexesOperations;\n  /** The operation groups for datasets */\n  public readonly datasets: DatasetsOperations;\n  /** The operation groups for connections */\n  public readonly connections: ConnectionsOperations;\n  /** The operation groups for inference */\n  /** The operation groups for telemetry */\n  public readonly telemetry: TelemetryOperations;\n  /**\n   * gets the endpoint of the client\n   * @returns the endpoint of the client\n   */\n  public getEndpointUrl(): string {\n    return this._endpoint;\n  }\n\n  /**\n   * Gets the Azure OpenAI client for the project.\n   * @returns The Azure OpenAI client for the project.\n   */\n  public getAzureOpenAIClient(options?: GetAzureOpenAIClientOptions): Promise<AzureOpenAI> {\n    return this._inference.azureOpenAI(options);\n  }\n\n  /**\n   * Creates a new instance of AzureAIProjectClient\n   * @param endpoint - The endpoint to use\n   * @param credential - The credential to use\n   * @param options - The parameter for all optional parameters\n   */\n  static fromEndpoint(\n    endpoint: string,\n    credential: TokenCredential,\n    options: AIProjectClientOptionalParams = {},\n  ): AIProjectClient {\n    return new AIProjectClient(endpoint, credential, options);\n  }\n\n  /**\n   * Get the AgentsClient associated with this AIProjectClient.\n   *\n   * @returns The AgentsClient associated with this AIProjectClient\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients\n  public get agents(): AgentsClient {\n    const { apiVersion, ...clientOptions } = this._options;\n\n    if (!this._agents) {\n      this._agents = new AgentsClient(this._endpoint, this._credential, {\n        ...clientOptions,\n        userAgentOptions: this._cognitiveScopeClient.getUserAgent(),\n      });\n    }\n    return this._agents;\n  }\n}\n"]}