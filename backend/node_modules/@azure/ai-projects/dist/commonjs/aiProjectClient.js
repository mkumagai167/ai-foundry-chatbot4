"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* eslint-disable tsdoc/syntax */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIProjectClient = void 0;
const ai_agents_1 = require("@azure/ai-agents");
const index_js_1 = require("./api/index.js");
const index_js_2 = require("./classic/deployments/index.js");
const index_js_3 = require("./classic/indexes/index.js");
const index_js_4 = require("./classic/datasets/index.js");
const index_js_5 = require("./classic/connections/index.js");
const index_js_6 = require("./classic/inference/index.js");
const index_js_7 = require("./classic/telemetry/index.js");
/**
 * The main client for the AIProjectClient service. It provides access to the various operations available in the service.
 * @class AIProjectClient
 * @extends {AIProjectContext}
 * @description The main client for the AIProjectClient
 * @constructor
 * @param {string} endpoint - The endpoint to use
 * @param {TokenCredential} credential - The credential to use
 * @param {AIProjectClientOptionalParams} [options] - Optional parameters for the client.
 * @property {DeploymentsOperations} deployments - The operation groups for deployments
 * @property {IndexesOperations} indexes - The operation groups for indexes
 * @property {DatasetsOperations} datasets - The operation groups for datasets
 * @property {ConnectionsOperations} connections - The operation groups for connections
 * @method {getAzureOpenAIClient} getAzureOpenAIClient - get the Azure OpenAI client for the project
 * @property {TelemetryOperations} telemetry - The operation groups for telemetry
 */
class AIProjectClient {
    _cognitiveScopeClient;
    _azureScopeClient;
    _endpoint;
    _credential;
    _agents;
    _options;
    _inference;
    /** The pipeline used by this client to make requests */
    pipeline;
    constructor(endpointParam, credential, options = {}) {
        this._endpoint = endpointParam;
        this._credential = credential;
        this._options = options;
        const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._cognitiveScopeClient = (0, index_js_1.createAIProject)(endpointParam, credential, {
            ...options,
            userAgentOptions: { userAgentPrefix },
        });
        this._azureScopeClient = (0, index_js_1.createAIProject)(endpointParam, credential, {
            ...options,
            credentials: {
                ...options.credentials,
                scopes: ["https://ai.azure.com/.default"],
            },
            userAgentOptions: { userAgentPrefix },
        });
        this.pipeline = this._cognitiveScopeClient.pipeline;
        this.deployments = (0, index_js_2._getDeploymentsOperations)(this._azureScopeClient);
        this.indexes = (0, index_js_3._getIndexesOperations)(this._azureScopeClient);
        this.datasets = (0, index_js_4._getDatasetsOperations)(this._azureScopeClient, this._options);
        this.connections = (0, index_js_5._getConnectionsOperations)(this._azureScopeClient);
        this._inference = (0, index_js_6._getInferenceOperations)(this._cognitiveScopeClient, this.connections);
        this.telemetry = (0, index_js_7._getTelemetryOperations)(this.connections);
    }
    /** The operation groups for deployments */
    deployments;
    /** The operation groups for indexes */
    indexes;
    /** The operation groups for datasets */
    datasets;
    /** The operation groups for connections */
    connections;
    /** The operation groups for inference */
    /** The operation groups for telemetry */
    telemetry;
    /**
     * gets the endpoint of the client
     * @returns the endpoint of the client
     */
    getEndpointUrl() {
        return this._endpoint;
    }
    /**
     * Gets the Azure OpenAI client for the project.
     * @returns The Azure OpenAI client for the project.
     */
    getAzureOpenAIClient(options) {
        return this._inference.azureOpenAI(options);
    }
    /**
     * Creates a new instance of AzureAIProjectClient
     * @param endpoint - The endpoint to use
     * @param credential - The credential to use
     * @param options - The parameter for all optional parameters
     */
    static fromEndpoint(endpoint, credential, options = {}) {
        return new AIProjectClient(endpoint, credential, options);
    }
    /**
     * Get the AgentsClient associated with this AIProjectClient.
     *
     * @returns The AgentsClient associated with this AIProjectClient
     */
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients
    get agents() {
        const { apiVersion, ...clientOptions } = this._options;
        if (!this._agents) {
            this._agents = new ai_agents_1.AgentsClient(this._endpoint, this._credential, {
                ...clientOptions,
                userAgentOptions: this._cognitiveScopeClient.getUserAgent(),
            });
        }
        return this._agents;
    }
}
exports.AIProjectClient = AIProjectClient;
//# sourceMappingURL=aiProjectClient.js.map