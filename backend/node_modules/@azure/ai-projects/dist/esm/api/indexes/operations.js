// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/* eslint-disable tsdoc/syntax */
import { _pagedIndexDeserializer, indexUnionSerializer, indexUnionDeserializer, } from "../../models/models.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _createOrUpdateSend(context, name, version, index, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).patch({
        ...operationOptionsToRequestParameters(options),
        contentType: "application/merge-patch+json",
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
        body: indexUnionSerializer(index),
    });
}
export async function _createOrUpdateDeserialize(result) {
    const expectedStatuses = ["201", "200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return indexUnionDeserializer(result.body);
}
/** Create a new or update an existing Index with the given version id */
export async function createOrUpdate(context, name, version, index, options = { requestOptions: {} }) {
    const result = await _createOrUpdateSend(context, name, version, index, options);
    return _createOrUpdateDeserialize(result);
}
export function _$deleteSend(context, name, version, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).delete({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _$deleteDeserialize(result) {
    const expectedStatuses = ["204"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return;
}
/** Delete the specific version of the Index */
/**
 *  @fixme delete is a reserved word that cannot be used as an operation name.
 *         Please add @clientName("clientName") or @clientName("<JS-Specific-Name>", "javascript")
 *         to the operation to override the generated name.
 */
export async function $delete(context, name, version, options = { requestOptions: {} }) {
    const result = await _$deleteSend(context, name, version, options);
    return _$deleteDeserialize(result);
}
export function _getSend(context, name, version, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/indexes/{name}/versions/{version}{?api-version}", {
        name: name,
        version: version,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return indexUnionDeserializer(result.body);
}
/** Get the specific version of the Index */
export async function get(context, name, version, options = { requestOptions: {} }) {
    const result = await _getSend(context, name, version, options);
    return _getDeserialize(result);
}
export function _listSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/indexes{?api-version}", {
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _pagedIndexDeserializer(result.body);
}
/** List the latest version of each Index */
export function list(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _listVersionsSend(context, name, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/indexes/{name}/versions{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listVersionsDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _pagedIndexDeserializer(result.body);
}
/** List all versions of the given Index */
export function listVersions(context, name, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listVersionsSend(context, name, options), _listVersionsDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
//# sourceMappingURL=operations.js.map