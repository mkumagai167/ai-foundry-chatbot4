// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { deploymentUnionDeserializer, _pagedDeploymentDeserializer, } from "../../models/models.js";
import { expandUrlTemplate } from "../../static-helpers/urlTemplate.js";
import { buildPagedAsyncIterator, } from "../../static-helpers/pagingHelpers.js";
import { createRestError, operationOptionsToRequestParameters, } from "@azure-rest/core-client";
export function _listSend(context, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/deployments{?api-version,modelPublisher,modelName,deploymentType}", {
        "api-version": context.apiVersion,
        modelPublisher: options?.modelPublisher,
        modelName: options?.modelName,
        deploymentType: options?.deploymentType,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            ...(options?.clientRequestId !== undefined
                ? { "x-ms-client-request-id": options?.clientRequestId }
                : {}),
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _listDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return _pagedDeploymentDeserializer(result.body);
}
/** List all deployed models in the project */
export function list(context, options = { requestOptions: {} }) {
    return buildPagedAsyncIterator(context, () => _listSend(context, options), _listDeserialize, ["200"], { itemName: "value", nextLinkName: "nextLink" });
}
export function _getSend(context, name, options = { requestOptions: {} }) {
    const path = expandUrlTemplate("/deployments/{name}{?api-version}", {
        name: name,
        "api-version": context.apiVersion,
    }, {
        allowReserved: options?.requestOptions?.skipUrlEncoding,
    });
    return context.path(path).get({
        ...operationOptionsToRequestParameters(options),
        headers: {
            ...(options?.clientRequestId !== undefined
                ? { "x-ms-client-request-id": options?.clientRequestId }
                : {}),
            accept: "application/json",
            ...options.requestOptions?.headers,
        },
    });
}
export async function _getDeserialize(result) {
    const expectedStatuses = ["200"];
    if (!expectedStatuses.includes(result.status)) {
        throw createRestError(result);
    }
    return deploymentUnionDeserializer(result.body);
}
/** Get a deployed model. */
export async function get(context, name, options = { requestOptions: {} }) {
    const result = await _getSend(context, name, options);
    return _getDeserialize(result);
}
//# sourceMappingURL=operations.js.map