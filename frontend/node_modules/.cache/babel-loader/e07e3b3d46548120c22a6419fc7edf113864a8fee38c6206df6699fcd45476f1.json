{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToUint8Array, uint8ArrayToString } from \"../../util/bytesEncoding.js\";\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the Basic Authentication Policy\n */\nexport const basicAuthenticationPolicyName = \"bearerAuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds basic authentication to requests\n */\nexport function basicAuthenticationPolicy(options) {\n  return {\n    name: basicAuthenticationPolicyName,\n    async sendRequest(request, next) {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find(x => x.kind === \"http\" && x.scheme === \"basic\");\n      // Skip adding authentication header if no basic authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      const {\n        username,\n        password\n      } = options.credential;\n      const headerValue = uint8ArrayToString(stringToUint8Array(`${username}:${password}`, \"utf-8\"), \"base64\");\n      request.headers.set(\"Authorization\", `Basic ${headerValue}`);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["stringToUint8Array","uint8ArrayToString","ensureSecureConnection","basicAuthenticationPolicyName","basicAuthenticationPolicy","options","name","sendRequest","request","next","scheme","authSchemes","find","x","kind","username","password","credential","headerValue","headers","set"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\auth\\basicAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { BasicCredential } from \"../../auth/credentials.js\";\nimport type { AuthScheme } from \"../../auth/schemes.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../../interfaces.js\";\nimport type { PipelinePolicy } from \"../../pipeline.js\";\nimport { stringToUint8Array, uint8ArrayToString } from \"../../util/bytesEncoding.js\";\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n\n/**\n * Name of the Basic Authentication Policy\n */\nexport const basicAuthenticationPolicyName = \"bearerAuthenticationPolicy\";\n\n/**\n * Options for configuring the basic authentication policy\n */\nexport interface BasicAuthenticationPolicyOptions {\n  /**\n   * The credential used to authenticate requests\n   */\n  credential: BasicCredential;\n  /**\n   * Optional authentication schemes to use. If not provided, schemes from the request will be used.\n   */\n  authSchemes?: AuthScheme[];\n  /**\n   * Allows for connecting to HTTP endpoints instead of enforcing HTTPS.\n   * CAUTION: Never use this option in production.\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * Gets a pipeline policy that adds basic authentication to requests\n */\nexport function basicAuthenticationPolicy(\n  options: BasicAuthenticationPolicyOptions,\n): PipelinePolicy {\n  return {\n    name: basicAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find(\n        (x) => x.kind === \"http\" && x.scheme === \"basic\",\n      );\n\n      // Skip adding authentication header if no basic authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n\n      const { username, password } = options.credential;\n      const headerValue = uint8ArrayToString(\n        stringToUint8Array(`${username}:${password}`, \"utf-8\"),\n        \"base64\",\n      );\n      request.headers.set(\"Authorization\", `Basic ${headerValue}`);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAMA,SAASA,kBAAkB,EAAEC,kBAAkB,QAAQ,6BAA6B;AACpF,SAASC,sBAAsB,QAAQ,8BAA8B;AAErE;;;AAGA,OAAO,MAAMC,6BAA6B,GAAG,4BAA4B;AAqBzE;;;AAGA,OAAM,SAAUC,yBAAyBA,CACvCC,OAAyC;EAEzC,OAAO;IACLC,IAAI,EAAEH,6BAA6B;IACnC,MAAMI,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D;MACAP,sBAAsB,CAACM,OAAO,EAAEH,OAAO,CAAC;MAExC,MAAMK,MAAM,GAAG,CAACF,OAAO,CAACG,WAAW,IAAIN,OAAO,CAACM,WAAW,GAAGC,IAAI,CAC9DC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,MAAM,IAAID,CAAC,CAACH,MAAM,KAAK,OAAO,CACjD;MAED;MACA,IAAI,CAACA,MAAM,EAAE;QACX,OAAOD,IAAI,CAACD,OAAO,CAAC;MACtB;MAEA,MAAM;QAAEO,QAAQ;QAAEC;MAAQ,CAAE,GAAGX,OAAO,CAACY,UAAU;MACjD,MAAMC,WAAW,GAAGjB,kBAAkB,CACpCD,kBAAkB,CAAC,GAAGe,QAAQ,IAAIC,QAAQ,EAAE,EAAE,OAAO,CAAC,EACtD,QAAQ,CACT;MACDR,OAAO,CAACW,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAASF,WAAW,EAAE,CAAC;MAC5D,OAAOT,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}