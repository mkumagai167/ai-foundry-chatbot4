{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nexport async function cancelablePromiseRace(abortablePromiseBuilders, options) {\n  const aborter = new AbortController();\n  function abortHandler() {\n    aborter.abort();\n  }\n  options?.abortSignal?.addEventListener(\"abort\", abortHandler);\n  try {\n    return await Promise.race(abortablePromiseBuilders.map(p => p({\n      abortSignal: aborter.signal\n    })));\n  } finally {\n    aborter.abort();\n    options?.abortSignal?.removeEventListener(\"abort\", abortHandler);\n  }\n}","map":{"version":3,"names":["cancelablePromiseRace","abortablePromiseBuilders","options","aborter","AbortController","abortHandler","abort","abortSignal","addEventListener","Promise","race","map","p","signal","removeEventListener"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-util\\src\\aborterUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Options related to abort controller.\n */\nexport interface AbortOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * Represents a function that returns a promise that can be aborted.\n */\nexport type AbortablePromiseBuilder<T> = (abortOptions: {\n  abortSignal?: AbortSignalLike;\n}) => Promise<T>;\n\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nexport async function cancelablePromiseRace<T extends unknown[]>(\n  abortablePromiseBuilders: AbortablePromiseBuilder<T[number]>[],\n  options?: { abortSignal?: AbortSignalLike },\n): Promise<T[number]> {\n  const aborter = new AbortController();\n  function abortHandler(): void {\n    aborter.abort();\n  }\n  options?.abortSignal?.addEventListener(\"abort\", abortHandler);\n  try {\n    return await Promise.race(\n      abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })),\n    );\n  } finally {\n    aborter.abort();\n    options?.abortSignal?.removeEventListener(\"abort\", abortHandler);\n  }\n}\n"],"mappings":"AAAA;AACA;AAyBA;;;AAGA,OAAO,eAAeA,qBAAqBA,CACzCC,wBAA8D,EAC9DC,OAA2C;EAE3C,MAAMC,OAAO,GAAG,IAAIC,eAAe,EAAE;EACrC,SAASC,YAAYA,CAAA;IACnBF,OAAO,CAACG,KAAK,EAAE;EACjB;EACAJ,OAAO,EAAEK,WAAW,EAAEC,gBAAgB,CAAC,OAAO,EAAEH,YAAY,CAAC;EAC7D,IAAI;IACF,OAAO,MAAMI,OAAO,CAACC,IAAI,CACvBT,wBAAwB,CAACU,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC;MAAEL,WAAW,EAAEJ,OAAO,CAACU;IAAM,CAAE,CAAC,CAAC,CACxE;EACH,CAAC,SAAS;IACRV,OAAO,CAACG,KAAK,EAAE;IACfJ,OAAO,EAAEK,WAAW,EAAEO,mBAAmB,CAAC,OAAO,EAAET,YAAY,CAAC;EAClE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}