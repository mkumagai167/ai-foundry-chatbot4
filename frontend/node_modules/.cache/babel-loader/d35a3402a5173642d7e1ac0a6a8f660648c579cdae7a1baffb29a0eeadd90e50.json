{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport const exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy(options = {}) {\n  return retryPolicy([exponentialRetryStrategy({\n    ...options,\n    ignoreSystemErrors: true\n  })], {\n    maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT\n  });\n}","map":{"version":3,"names":["exponentialRetryStrategy","retryPolicy","DEFAULT_RETRY_POLICY_COUNT","exponentialRetryPolicyName","exponentialRetryPolicy","options","ignoreSystemErrors","maxRetries"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\exponentialRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport const exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface ExponentialRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy(\n  options: ExponentialRetryPolicyOptions = {},\n): PipelinePolicy {\n  return retryPolicy(\n    [\n      exponentialRetryStrategy({\n        ...options,\n        ignoreSystemErrors: true,\n      }),\n    ],\n    {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    },\n  );\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,wBAAwB,QAAQ,gDAAgD;AACzF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,0BAA0B,QAAQ,iBAAiB;AAE5D;;;AAGA,OAAO,MAAMC,0BAA0B,GAAG,wBAAwB;AAyBlE;;;;AAIA,OAAM,SAAUC,sBAAsBA,CACpCC,OAAA,GAAyC,EAAE;EAE3C,OAAOJ,WAAW,CAChB,CACED,wBAAwB,CAAC;IACvB,GAAGK,OAAO;IACVC,kBAAkB,EAAE;GACrB,CAAC,CACH,EACD;IACEC,UAAU,EAAEF,OAAO,CAACE,UAAU,IAAIL;GACnC,CACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}