{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nexport function getHeaderName() {\n  return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n  const browserRegexes = [{\n    name: \"Firefox\",\n    regex: /Firefox\\/([\\d.]+)/\n  }, {\n    name: \"Safari\",\n    regex: /Version\\/([\\d.]+).*Safari/\n  }];\n  for (const browser of browserRegexes) {\n    const match = userAgent.match(browser.regex);\n    if (match) {\n      return {\n        brand: browser.name,\n        version: match[1]\n      };\n    }\n  }\n  return undefined;\n}\nfunction getBrandVersionString(brands) {\n  const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n  for (const brand of brandOrder) {\n    const foundBrand = brands.find(b => b.brand === brand);\n    if (foundBrand) {\n      return foundBrand;\n    }\n  }\n  return undefined;\n}\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map) {\n  const localNavigator = globalThis.navigator;\n  let osPlatform = \"unknown\";\n  if (localNavigator?.userAgentData) {\n    const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\"architecture\", \"platformVersion\"]);\n    osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n    // Get the brand and version\n    const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (localNavigator?.platform) {\n    osPlatform = localNavigator.platform;\n    const brand = getBrowserInfo(localNavigator.userAgent);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (typeof globalThis.EdgeRuntime === \"string\") {\n    map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n  }\n  map.set(\"OS\", osPlatform);\n}","map":{"version":3,"names":["getHeaderName","getBrowserInfo","userAgent","browserRegexes","name","regex","browser","match","brand","version","undefined","getBrandVersionString","brands","brandOrder","foundBrand","find","b","setPlatformSpecificData","map","localNavigator","globalThis","navigator","osPlatform","userAgentData","entropyValues","getHighEntropyValues","architecture","platform","platformVersion","set","EdgeRuntime"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\util\\userAgentPlatform-browser.mts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @internal\n */\nexport function getHeaderName(): string {\n  return \"x-ms-useragent\";\n}\n\ninterface BrowserBrand {\n  brand: string;\n  version: string;\n}\n\ninterface NavigatorEx extends Navigator {\n  userAgentData?: {\n    brands: BrowserBrand[];\n    mobile: boolean;\n    platform?: string;\n    getHighEntropyValues: (hints: string[]) => Promise<{\n      architecture: string;\n      bitness: string;\n      brands: BrowserBrand[];\n      formFactor: string;\n      fullVersionList: BrowserBrand[];\n      mobile: boolean;\n      model: string;\n      platform: string;\n      platformVersion: string;\n      wow64: boolean;\n    }>;\n  };\n}\n\ndeclare const globalThis: {\n  navigator?: NavigatorEx;\n  EdgeRuntime?: unknown;\n};\n\nfunction getBrowserInfo(userAgent: string): BrowserBrand | undefined {\n  const browserRegexes = [\n    { name: \"Firefox\", regex: /Firefox\\/([\\d.]+)/ },\n    { name: \"Safari\", regex: /Version\\/([\\d.]+).*Safari/ },\n  ];\n\n  for (const browser of browserRegexes) {\n    const match = userAgent.match(browser.regex);\n    if (match) {\n      return { brand: browser.name, version: match[1] };\n    }\n  }\n\n  return undefined;\n}\n\nfunction getBrandVersionString(brands: BrowserBrand[]): BrowserBrand | undefined {\n  const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n  for (const brand of brandOrder) {\n    const foundBrand = brands.find((b) => b.brand === brand);\n    if (foundBrand) {\n      return foundBrand;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n */\nexport async function setPlatformSpecificData(map: Map<string, string>): Promise<void> {\n  const localNavigator = globalThis.navigator as NavigatorEx;\n  let osPlatform = \"unknown\";\n  if (localNavigator?.userAgentData) {\n    const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\n      \"architecture\",\n      \"platformVersion\",\n    ]);\n    osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n\n    // Get the brand and version\n    const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (localNavigator?.platform) {\n    osPlatform = localNavigator.platform;\n    const brand = getBrowserInfo(localNavigator.userAgent);\n    if (brand) {\n      map.set(brand.brand, brand.version);\n    }\n  } else if (typeof globalThis.EdgeRuntime === \"string\") {\n    map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n  }\n\n  map.set(\"OS\", osPlatform);\n}\n"],"mappings":"AAAA;AACA;AAEA;;;AAGA,OAAM,SAAUA,aAAaA,CAAA;EAC3B,OAAO,gBAAgB;AACzB;AAgCA,SAASC,cAAcA,CAACC,SAAiB;EACvC,MAAMC,cAAc,GAAG,CACrB;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAmB,CAAE,EAC/C;IAAED,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAA2B,CAAE,CACvD;EAED,KAAK,MAAMC,OAAO,IAAIH,cAAc,EAAE;IACpC,MAAMI,KAAK,GAAGL,SAAS,CAACK,KAAK,CAACD,OAAO,CAACD,KAAK,CAAC;IAC5C,IAAIE,KAAK,EAAE;MACT,OAAO;QAAEC,KAAK,EAAEF,OAAO,CAACF,IAAI;QAAEK,OAAO,EAAEF,KAAK,CAAC,CAAC;MAAC,CAAE;IACnD;EACF;EAEA,OAAOG,SAAS;AAClB;AAEA,SAASC,qBAAqBA,CAACC,MAAsB;EACnD,MAAMC,UAAU,GAAG,CAAC,eAAe,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;EACpF,KAAK,MAAML,KAAK,IAAIK,UAAU,EAAE;IAC9B,MAAMC,UAAU,GAAGF,MAAM,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,CAAC;IACxD,IAAIM,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;EACF;EACA,OAAOJ,SAAS;AAClB;AAEA;;;AAGA,OAAO,eAAeO,uBAAuBA,CAACC,GAAwB;EACpE,MAAMC,cAAc,GAAGC,UAAU,CAACC,SAAwB;EAC1D,IAAIC,UAAU,GAAG,SAAS;EAC1B,IAAIH,cAAc,EAAEI,aAAa,EAAE;IACjC,MAAMC,aAAa,GAAG,MAAML,cAAc,CAACI,aAAa,CAACE,oBAAoB,CAAC,CAC5E,cAAc,EACd,iBAAiB,CAClB,CAAC;IACFH,UAAU,GAAG,GAAGE,aAAa,CAACE,YAAY,IAAIF,aAAa,CAACG,QAAQ,IAAIH,aAAa,CAACI,eAAe,EAAE;IAEvG;IACA,MAAMpB,KAAK,GAAGG,qBAAqB,CAACQ,cAAc,CAACI,aAAa,CAACX,MAAM,CAAC;IACxE,IAAIJ,KAAK,EAAE;MACTU,GAAG,CAACW,GAAG,CAACrB,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrC;EACF,CAAC,MAAM,IAAIU,cAAc,EAAEQ,QAAQ,EAAE;IACnCL,UAAU,GAAGH,cAAc,CAACQ,QAAQ;IACpC,MAAMnB,KAAK,GAAGP,cAAc,CAACkB,cAAc,CAACjB,SAAS,CAAC;IACtD,IAAIM,KAAK,EAAE;MACTU,GAAG,CAACW,GAAG,CAACrB,KAAK,CAACA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrC;EACF,CAAC,MAAM,IAAI,OAAOW,UAAU,CAACU,WAAW,KAAK,QAAQ,EAAE;IACrDZ,GAAG,CAACW,GAAG,CAAC,aAAa,EAAET,UAAU,CAACU,WAAW,CAAC;EAChD;EAEAZ,GAAG,CAACW,GAAG,CAAC,IAAI,EAAEP,UAAU,CAAC;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}