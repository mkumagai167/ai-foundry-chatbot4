{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction isQueryParameterWithOptions(x) {\n  const value = x.value;\n  return value !== undefined && value.toString !== undefined && typeof value.toString === \"function\";\n}\n/**\n * Builds the request url, filling in query and path parameters\n * @param endpoint - base url which can be a template url\n * @param routePath - path to append to the endpoint\n * @param pathParameters - values of the path parameters\n * @param options - request parameters including query parameters\n * @returns a full url with path and query parameters\n */\nexport function buildRequestUrl(endpoint, routePath, pathParameters, options = {}) {\n  if (routePath.startsWith(\"https://\") || routePath.startsWith(\"http://\")) {\n    return routePath;\n  }\n  endpoint = buildBaseUrl(endpoint, options);\n  routePath = buildRoutePath(routePath, pathParameters, options);\n  const requestUrl = appendQueryParams(`${endpoint}/${routePath}`, options);\n  const url = new URL(requestUrl);\n  return url.toString()\n  // Remove double forward slashes\n  .replace(/([^:]\\/)\\/+/g, \"$1\");\n}\nfunction getQueryParamValue(key, allowReserved, style, param) {\n  let separator;\n  if (style === \"pipeDelimited\") {\n    separator = \"|\";\n  } else if (style === \"spaceDelimited\") {\n    separator = \"%20\";\n  } else {\n    separator = \",\";\n  }\n  let paramValues;\n  if (Array.isArray(param)) {\n    paramValues = param;\n  } else if (typeof param === \"object\" && param.toString === Object.prototype.toString) {\n    // If the parameter is an object without a custom toString implementation (e.g. a Date),\n    // then we should deconstruct the object into an array [key1, value1, key2, value2, ...].\n    paramValues = Object.entries(param).flat();\n  } else {\n    paramValues = [param];\n  }\n  const value = paramValues.map(p => {\n    if (p === null || p === undefined) {\n      return \"\";\n    }\n    if (!p.toString || typeof p.toString !== \"function\") {\n      throw new Error(`Query parameters must be able to be represented as string, ${key} can't`);\n    }\n    const rawValue = p.toISOString !== undefined ? p.toISOString() : p.toString();\n    return allowReserved ? rawValue : encodeURIComponent(rawValue);\n  }).join(separator);\n  return `${allowReserved ? key : encodeURIComponent(key)}=${value}`;\n}\nfunction appendQueryParams(url, options = {}) {\n  if (!options.queryParameters) {\n    return url;\n  }\n  const parsedUrl = new URL(url);\n  const queryParams = options.queryParameters;\n  const paramStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    const param = queryParams[key];\n    if (param === undefined || param === null) {\n      continue;\n    }\n    const hasMetadata = isQueryParameterWithOptions(param);\n    const rawValue = hasMetadata ? param.value : param;\n    const explode = hasMetadata ? param.explode ?? false : false;\n    const style = hasMetadata && param.style ? param.style : \"form\";\n    if (explode) {\n      if (Array.isArray(rawValue)) {\n        for (const item of rawValue) {\n          paramStrings.push(getQueryParamValue(key, options.skipUrlEncoding ?? false, style, item));\n        }\n      } else if (typeof rawValue === \"object\") {\n        // For object explode, the name of the query parameter is ignored and we use the object key instead\n        for (const [actualKey, value] of Object.entries(rawValue)) {\n          paramStrings.push(getQueryParamValue(actualKey, options.skipUrlEncoding ?? false, style, value));\n        }\n      } else {\n        // Explode doesn't really make sense for primitives\n        throw new Error(\"explode can only be set to true for objects and arrays\");\n      }\n    } else {\n      paramStrings.push(getQueryParamValue(key, options.skipUrlEncoding ?? false, style, rawValue));\n    }\n  }\n  if (parsedUrl.search !== \"\") {\n    parsedUrl.search += \"&\";\n  }\n  parsedUrl.search += paramStrings.join(\"&\");\n  return parsedUrl.toString();\n}\nexport function buildBaseUrl(endpoint, options) {\n  if (!options.pathParameters) {\n    return endpoint;\n  }\n  const pathParams = options.pathParameters;\n  for (const [key, param] of Object.entries(pathParams)) {\n    if (param === undefined || param === null) {\n      throw new Error(`Path parameters ${key} must not be undefined or null`);\n    }\n    if (!param.toString || typeof param.toString !== \"function\") {\n      throw new Error(`Path parameters must be able to be represented as string, ${key} can't`);\n    }\n    let value = param.toISOString !== undefined ? param.toISOString() : String(param);\n    if (!options.skipUrlEncoding) {\n      value = encodeURIComponent(param);\n    }\n    endpoint = replaceAll(endpoint, `{${key}}`, value) ?? \"\";\n  }\n  return endpoint;\n}\nfunction buildRoutePath(routePath, pathParameters, options = {}) {\n  for (const pathParam of pathParameters) {\n    const allowReserved = typeof pathParam === \"object\" && (pathParam.allowReserved ?? false);\n    let value = typeof pathParam === \"object\" ? pathParam.value : pathParam;\n    if (!options.skipUrlEncoding && !allowReserved) {\n      value = encodeURIComponent(value);\n    }\n    routePath = routePath.replace(/\\{[\\w-]+\\}/, String(value));\n  }\n  return routePath;\n}\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(value, searchValue, replaceValue) {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}","map":{"version":3,"names":["isQueryParameterWithOptions","x","value","undefined","toString","buildRequestUrl","endpoint","routePath","pathParameters","options","startsWith","buildBaseUrl","buildRoutePath","requestUrl","appendQueryParams","url","URL","replace","getQueryParamValue","key","allowReserved","style","param","separator","paramValues","Array","isArray","Object","prototype","entries","flat","map","p","Error","rawValue","toISOString","encodeURIComponent","join","queryParameters","parsedUrl","queryParams","paramStrings","keys","hasMetadata","explode","item","push","skipUrlEncoding","actualKey","search","pathParams","String","replaceAll","pathParam","searchValue","replaceValue","split"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\client\\urlHelpers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PathParameterWithOptions, RequestParameters } from \"./common.js\";\n\ntype QueryParameterStyle = \"form\" | \"spaceDelimited\" | \"pipeDelimited\";\n\n/**\n * An object that can be passed as a query parameter, allowing for additional options to be set relating to how the parameter is encoded.\n */\ninterface QueryParameterWithOptions {\n  /**\n   * The value of the query parameter.\n   */\n  value: unknown;\n\n  /**\n   * If set to true, value must be an array. Setting this option to true will cause the array to be encoded as multiple query parameters.\n   * Setting it to false will cause the array values to be encoded as a single query parameter, with each value separated by a comma ','.\n   *\n   * For example, with `explode` set to true, a query parameter named \"foo\" with value [\"a\", \"b\", \"c\"] will be encoded as foo=a&foo=b&foo=c.\n   * If `explode` was set to false, the same example would instead be encouded as foo=a,b,c.\n   *\n   * Defaults to false.\n   */\n  explode?: boolean;\n\n  /**\n   * Style for encoding arrays. Three possible values:\n   * - \"form\": array values will be separated by a comma \",\" in the query parameter value.\n   * - \"spaceDelimited\": array values will be separated by a space (\" \", url-encoded to \"%20\").\n   * - \"pipeDelimited\": array values will be separated by a pipe (\"|\").\n   *\n   * Defaults to \"form\".\n   */\n  style?: QueryParameterStyle;\n}\n\nfunction isQueryParameterWithOptions(x: unknown): x is QueryParameterWithOptions {\n  const value = (x as QueryParameterWithOptions).value as any;\n  return (\n    value !== undefined && value.toString !== undefined && typeof value.toString === \"function\"\n  );\n}\n\n/**\n * Builds the request url, filling in query and path parameters\n * @param endpoint - base url which can be a template url\n * @param routePath - path to append to the endpoint\n * @param pathParameters - values of the path parameters\n * @param options - request parameters including query parameters\n * @returns a full url with path and query parameters\n */\nexport function buildRequestUrl(\n  endpoint: string,\n  routePath: string,\n  pathParameters: (string | number | PathParameterWithOptions)[],\n  options: RequestParameters = {},\n): string {\n  if (routePath.startsWith(\"https://\") || routePath.startsWith(\"http://\")) {\n    return routePath;\n  }\n  endpoint = buildBaseUrl(endpoint, options);\n  routePath = buildRoutePath(routePath, pathParameters, options);\n  const requestUrl = appendQueryParams(`${endpoint}/${routePath}`, options);\n  const url = new URL(requestUrl);\n\n  return (\n    url\n      .toString()\n      // Remove double forward slashes\n      .replace(/([^:]\\/)\\/+/g, \"$1\")\n  );\n}\n\nfunction getQueryParamValue(\n  key: string,\n  allowReserved: boolean,\n  style: QueryParameterStyle,\n  param: any,\n): string {\n  let separator: string;\n  if (style === \"pipeDelimited\") {\n    separator = \"|\";\n  } else if (style === \"spaceDelimited\") {\n    separator = \"%20\";\n  } else {\n    separator = \",\";\n  }\n\n  let paramValues: any[];\n  if (Array.isArray(param)) {\n    paramValues = param;\n  } else if (typeof param === \"object\" && param.toString === Object.prototype.toString) {\n    // If the parameter is an object without a custom toString implementation (e.g. a Date),\n    // then we should deconstruct the object into an array [key1, value1, key2, value2, ...].\n    paramValues = Object.entries(param).flat();\n  } else {\n    paramValues = [param];\n  }\n\n  const value = paramValues\n    .map((p) => {\n      if (p === null || p === undefined) {\n        return \"\";\n      }\n\n      if (!p.toString || typeof p.toString !== \"function\") {\n        throw new Error(`Query parameters must be able to be represented as string, ${key} can't`);\n      }\n\n      const rawValue = p.toISOString !== undefined ? p.toISOString() : p.toString();\n      return allowReserved ? rawValue : encodeURIComponent(rawValue);\n    })\n    .join(separator);\n\n  return `${allowReserved ? key : encodeURIComponent(key)}=${value}`;\n}\n\nfunction appendQueryParams(url: string, options: RequestParameters = {}): string {\n  if (!options.queryParameters) {\n    return url;\n  }\n  const parsedUrl = new URL(url);\n  const queryParams = options.queryParameters;\n\n  const paramStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    const param = queryParams[key] as any;\n    if (param === undefined || param === null) {\n      continue;\n    }\n\n    const hasMetadata = isQueryParameterWithOptions(param);\n    const rawValue = hasMetadata ? param.value : param;\n    const explode = hasMetadata ? (param.explode ?? false) : false;\n    const style = hasMetadata && param.style ? param.style : \"form\";\n\n    if (explode) {\n      if (Array.isArray(rawValue)) {\n        for (const item of rawValue) {\n          paramStrings.push(getQueryParamValue(key, options.skipUrlEncoding ?? false, style, item));\n        }\n      } else if (typeof rawValue === \"object\") {\n        // For object explode, the name of the query parameter is ignored and we use the object key instead\n        for (const [actualKey, value] of Object.entries(rawValue)) {\n          paramStrings.push(\n            getQueryParamValue(actualKey, options.skipUrlEncoding ?? false, style, value),\n          );\n        }\n      } else {\n        // Explode doesn't really make sense for primitives\n        throw new Error(\"explode can only be set to true for objects and arrays\");\n      }\n    } else {\n      paramStrings.push(getQueryParamValue(key, options.skipUrlEncoding ?? false, style, rawValue));\n    }\n  }\n\n  if (parsedUrl.search !== \"\") {\n    parsedUrl.search += \"&\";\n  }\n  parsedUrl.search += paramStrings.join(\"&\");\n  return parsedUrl.toString();\n}\n\nexport function buildBaseUrl(endpoint: string, options: RequestParameters): string {\n  if (!options.pathParameters) {\n    return endpoint;\n  }\n  const pathParams = options.pathParameters;\n  for (const [key, param] of Object.entries(pathParams)) {\n    if (param === undefined || param === null) {\n      throw new Error(`Path parameters ${key} must not be undefined or null`);\n    }\n    if (!param.toString || typeof param.toString !== \"function\") {\n      throw new Error(`Path parameters must be able to be represented as string, ${key} can't`);\n    }\n    let value = param.toISOString !== undefined ? param.toISOString() : String(param);\n    if (!options.skipUrlEncoding) {\n      value = encodeURIComponent(param);\n    }\n    endpoint = replaceAll(endpoint, `{${key}}`, value) ?? \"\";\n  }\n  return endpoint;\n}\n\nfunction buildRoutePath(\n  routePath: string,\n  pathParameters: (string | number | PathParameterWithOptions)[],\n  options: RequestParameters = {},\n): string {\n  for (const pathParam of pathParameters) {\n    const allowReserved = typeof pathParam === \"object\" && (pathParam.allowReserved ?? false);\n    let value = typeof pathParam === \"object\" ? pathParam.value : pathParam;\n\n    if (!options.skipUrlEncoding && !allowReserved) {\n      value = encodeURIComponent(value);\n    }\n\n    routePath = routePath.replace(/\\{[\\w-]+\\}/, String(value));\n  }\n  return routePath;\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string,\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}