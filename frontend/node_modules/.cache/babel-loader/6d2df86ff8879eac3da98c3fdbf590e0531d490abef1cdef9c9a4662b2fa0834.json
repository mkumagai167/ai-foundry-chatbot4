{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isRestError, RestError } from \"../restError.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport { createPipelineRequest } from \"../pipelineRequest.js\";\nimport { getCachedDefaultHttpsClient } from \"./clientHelpers.js\";\nimport { isReadableStream } from \"../util/typeGuards.js\";\nimport { buildMultipartBody } from \"./multipart.js\";\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @param customHttpClient - a custom HttpClient to use when making the request\n * @returns returns and HttpResponse\n */\nexport async function sendRequest(method, url, pipeline, options = {}, customHttpClient) {\n  const httpClient = customHttpClient ?? getCachedDefaultHttpsClient();\n  const request = buildPipelineRequest(method, url, options);\n  try {\n    const response = await pipeline.sendRequest(httpClient, request);\n    const headers = response.headers.toJSON();\n    const stream = response.readableStreamBody ?? response.browserStreamBody;\n    const parsedBody = options.responseAsStream || stream !== undefined ? undefined : getResponseBody(response);\n    const body = stream ?? parsedBody;\n    if (options?.onResponse) {\n      options.onResponse({\n        ...response,\n        request,\n        rawHeaders: headers,\n        parsedBody\n      });\n    }\n    return {\n      request,\n      headers,\n      status: `${response.status}`,\n      body\n    };\n  } catch (e) {\n    if (isRestError(e) && e.response && options.onResponse) {\n      const {\n        response\n      } = e;\n      const rawHeaders = response.headers.toJSON();\n      // UNBRANDED DIFFERENCE: onResponse callback does not have a second __legacyError property\n      options?.onResponse({\n        ...response,\n        request,\n        rawHeaders\n      }, e);\n    }\n    throw e;\n  }\n}\n/**\n * Function to determine the request content type\n * @param options - request options InternalRequestParameters\n * @returns returns the content-type\n */\nfunction getRequestContentType(options = {}) {\n  return options.contentType ?? options.headers?.[\"content-type\"] ?? getContentType(options.body);\n}\n/**\n * Function to determine the content-type of a body\n * this is used if an explicit content-type is not provided\n * @param body - body in the request\n * @returns returns the content-type\n */\nfunction getContentType(body) {\n  if (ArrayBuffer.isView(body)) {\n    return \"application/octet-stream\";\n  }\n  if (typeof body === \"string\") {\n    try {\n      JSON.parse(body);\n      return \"application/json\";\n    } catch (error) {\n      // If we fail to parse the body, it is not json\n      return undefined;\n    }\n  }\n  // By default return json\n  return \"application/json\";\n}\nfunction buildPipelineRequest(method, url, options = {}) {\n  const requestContentType = getRequestContentType(options);\n  const {\n    body,\n    multipartBody\n  } = getRequestBody(options.body, requestContentType);\n  const hasContent = body !== undefined || multipartBody !== undefined;\n  const headers = createHttpHeaders({\n    ...(options.headers ? options.headers : {}),\n    accept: options.accept ?? options.headers?.accept ?? \"application/json\",\n    ...(hasContent && requestContentType && {\n      \"content-type\": requestContentType\n    })\n  });\n  return createPipelineRequest({\n    url,\n    method,\n    body,\n    multipartBody,\n    headers,\n    allowInsecureConnection: options.allowInsecureConnection,\n    abortSignal: options.abortSignal,\n    onUploadProgress: options.onUploadProgress,\n    onDownloadProgress: options.onDownloadProgress,\n    timeout: options.timeout,\n    enableBrowserStreams: true,\n    streamResponseStatusCodes: options.responseAsStream ? new Set([Number.POSITIVE_INFINITY]) : undefined\n  });\n}\n/**\n * Prepares the body before sending the request\n */\nfunction getRequestBody(body, contentType = \"\") {\n  if (body === undefined) {\n    return {\n      body: undefined\n    };\n  }\n  if (typeof FormData !== \"undefined\" && body instanceof FormData) {\n    return {\n      body\n    };\n  }\n  if (isReadableStream(body)) {\n    return {\n      body\n    };\n  }\n  if (ArrayBuffer.isView(body)) {\n    return {\n      body: body instanceof Uint8Array ? body : JSON.stringify(body)\n    };\n  }\n  const firstType = contentType.split(\";\")[0];\n  switch (firstType) {\n    case \"application/json\":\n      return {\n        body: JSON.stringify(body)\n      };\n    case \"multipart/form-data\":\n      if (Array.isArray(body)) {\n        return {\n          multipartBody: buildMultipartBody(body)\n        };\n      }\n      return {\n        body: JSON.stringify(body)\n      };\n    case \"text/plain\":\n      return {\n        body: String(body)\n      };\n    default:\n      if (typeof body === \"string\") {\n        return {\n          body\n        };\n      }\n      return {\n        body: JSON.stringify(body)\n      };\n  }\n}\n/**\n * Prepares the response body\n */\nfunction getResponseBody(response) {\n  // Set the default response type\n  const contentType = response.headers.get(\"content-type\") ?? \"\";\n  const firstType = contentType.split(\";\")[0];\n  const bodyToParse = response.bodyAsText ?? \"\";\n  if (firstType === \"text/plain\") {\n    return String(bodyToParse);\n  }\n  // Default to \"application/json\" and fallback to string;\n  try {\n    return bodyToParse ? JSON.parse(bodyToParse) : undefined;\n  } catch (error) {\n    // If we were supposed to get a JSON object and failed to\n    // parse, throw a parse error\n    if (firstType === \"application/json\") {\n      throw createParseError(response, error);\n    }\n    // We are not sure how to handle the response so we return it as\n    // plain text.\n    return String(bodyToParse);\n  }\n}\nfunction createParseError(response, err) {\n  const msg = `Error \"${err}\" occurred while parsing the response body - ${response.bodyAsText}.`;\n  const errCode = err.code ?? RestError.PARSE_ERROR;\n  return new RestError(msg, {\n    code: errCode,\n    statusCode: response.status,\n    request: response.request,\n    response: response\n  });\n}","map":{"version":3,"names":["isRestError","RestError","createHttpHeaders","createPipelineRequest","getCachedDefaultHttpsClient","isReadableStream","buildMultipartBody","sendRequest","method","url","pipeline","options","customHttpClient","httpClient","request","buildPipelineRequest","response","headers","toJSON","stream","readableStreamBody","browserStreamBody","parsedBody","responseAsStream","undefined","getResponseBody","body","onResponse","rawHeaders","status","e","getRequestContentType","contentType","getContentType","ArrayBuffer","isView","JSON","parse","error","requestContentType","multipartBody","getRequestBody","hasContent","accept","allowInsecureConnection","abortSignal","onUploadProgress","onDownloadProgress","timeout","enableBrowserStreams","streamResponseStatusCodes","Set","Number","POSITIVE_INFINITY","FormData","Uint8Array","stringify","firstType","split","Array","isArray","String","get","bodyToParse","bodyAsText","createParseError","err","msg","errCode","code","PARSE_ERROR","statusCode"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\client\\sendRequest.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  HttpClient,\n  HttpMethods,\n  MultipartRequestBody,\n  PipelineRequest,\n  PipelineResponse,\n  RequestBodyType,\n} from \"../interfaces.js\";\nimport { isRestError, RestError } from \"../restError.js\";\nimport type { Pipeline } from \"../pipeline.js\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport { createPipelineRequest } from \"../pipelineRequest.js\";\nimport { getCachedDefaultHttpsClient } from \"./clientHelpers.js\";\nimport { isReadableStream } from \"../util/typeGuards.js\";\nimport type { HttpResponse, RequestParameters } from \"./common.js\";\nimport type { PartDescriptor } from \"./multipart.js\";\nimport { buildMultipartBody } from \"./multipart.js\";\n\n/**\n * Helper function to send request used by the client\n * @param method - method to use to send the request\n * @param url - url to send the request to\n * @param pipeline - pipeline with the policies to run when sending the request\n * @param options - request options\n * @param customHttpClient - a custom HttpClient to use when making the request\n * @returns returns and HttpResponse\n */\nexport async function sendRequest(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: InternalRequestParameters = {},\n  customHttpClient?: HttpClient,\n): Promise<HttpResponse> {\n  const httpClient = customHttpClient ?? getCachedDefaultHttpsClient();\n  const request = buildPipelineRequest(method, url, options);\n\n  try {\n    const response = await pipeline.sendRequest(httpClient, request);\n    const headers = response.headers.toJSON();\n    const stream = response.readableStreamBody ?? response.browserStreamBody;\n    const parsedBody =\n      options.responseAsStream || stream !== undefined ? undefined : getResponseBody(response);\n    const body = stream ?? parsedBody;\n\n    if (options?.onResponse) {\n      options.onResponse({ ...response, request, rawHeaders: headers, parsedBody });\n    }\n\n    return {\n      request,\n      headers,\n      status: `${response.status}`,\n      body,\n    };\n  } catch (e: unknown) {\n    if (isRestError(e) && e.response && options.onResponse) {\n      const { response } = e;\n      const rawHeaders = response.headers.toJSON();\n      // UNBRANDED DIFFERENCE: onResponse callback does not have a second __legacyError property\n      options?.onResponse({ ...response, request, rawHeaders }, e);\n    }\n\n    throw e;\n  }\n}\n\n/**\n * Function to determine the request content type\n * @param options - request options InternalRequestParameters\n * @returns returns the content-type\n */\nfunction getRequestContentType(options: InternalRequestParameters = {}): string {\n  return (\n    options.contentType ??\n    (options.headers?.[\"content-type\"] as string) ??\n    getContentType(options.body)\n  );\n}\n\n/**\n * Function to determine the content-type of a body\n * this is used if an explicit content-type is not provided\n * @param body - body in the request\n * @returns returns the content-type\n */\nfunction getContentType(body: any): string | undefined {\n  if (ArrayBuffer.isView(body)) {\n    return \"application/octet-stream\";\n  }\n\n  if (typeof body === \"string\") {\n    try {\n      JSON.parse(body);\n      return \"application/json\";\n    } catch (error: any) {\n      // If we fail to parse the body, it is not json\n      return undefined;\n    }\n  }\n  // By default return json\n  return \"application/json\";\n}\n\nexport interface InternalRequestParameters extends RequestParameters {\n  responseAsStream?: boolean;\n}\n\nfunction buildPipelineRequest(\n  method: HttpMethods,\n  url: string,\n  options: InternalRequestParameters = {},\n): PipelineRequest {\n  const requestContentType = getRequestContentType(options);\n  const { body, multipartBody } = getRequestBody(options.body, requestContentType);\n  const hasContent = body !== undefined || multipartBody !== undefined;\n\n  const headers = createHttpHeaders({\n    ...(options.headers ? options.headers : {}),\n    accept: options.accept ?? options.headers?.accept ?? \"application/json\",\n    ...(hasContent &&\n      requestContentType && {\n        \"content-type\": requestContentType,\n      }),\n  });\n\n  return createPipelineRequest({\n    url,\n    method,\n    body,\n    multipartBody,\n    headers,\n    allowInsecureConnection: options.allowInsecureConnection,\n    abortSignal: options.abortSignal,\n    onUploadProgress: options.onUploadProgress,\n    onDownloadProgress: options.onDownloadProgress,\n    timeout: options.timeout,\n    enableBrowserStreams: true,\n    streamResponseStatusCodes: options.responseAsStream\n      ? new Set([Number.POSITIVE_INFINITY])\n      : undefined,\n  });\n}\n\ninterface RequestBody {\n  body?: RequestBodyType;\n  multipartBody?: MultipartRequestBody;\n}\n\n/**\n * Prepares the body before sending the request\n */\nfunction getRequestBody(body?: unknown, contentType: string = \"\"): RequestBody {\n  if (body === undefined) {\n    return { body: undefined };\n  }\n\n  if (typeof FormData !== \"undefined\" && body instanceof FormData) {\n    return { body };\n  }\n\n  if (isReadableStream(body)) {\n    return { body };\n  }\n\n  if (ArrayBuffer.isView(body)) {\n    return { body: body instanceof Uint8Array ? body : JSON.stringify(body) };\n  }\n\n  const firstType = contentType.split(\";\")[0];\n\n  switch (firstType) {\n    case \"application/json\":\n      return { body: JSON.stringify(body) };\n    case \"multipart/form-data\":\n      if (Array.isArray(body)) {\n        return { multipartBody: buildMultipartBody(body as PartDescriptor[]) };\n      }\n      return { body: JSON.stringify(body) };\n    case \"text/plain\":\n      return { body: String(body) };\n    default:\n      if (typeof body === \"string\") {\n        return { body };\n      }\n      return { body: JSON.stringify(body) };\n  }\n}\n\n/**\n * Prepares the response body\n */\nfunction getResponseBody(response: PipelineResponse): RequestBodyType | undefined {\n  // Set the default response type\n  const contentType = response.headers.get(\"content-type\") ?? \"\";\n  const firstType = contentType.split(\";\")[0];\n  const bodyToParse = response.bodyAsText ?? \"\";\n\n  if (firstType === \"text/plain\") {\n    return String(bodyToParse);\n  }\n  // Default to \"application/json\" and fallback to string;\n  try {\n    return bodyToParse ? JSON.parse(bodyToParse) : undefined;\n  } catch (error: any) {\n    // If we were supposed to get a JSON object and failed to\n    // parse, throw a parse error\n    if (firstType === \"application/json\") {\n      throw createParseError(response, error);\n    }\n\n    // We are not sure how to handle the response so we return it as\n    // plain text.\n    return String(bodyToParse);\n  }\n}\n\nfunction createParseError(response: PipelineResponse, err: any): RestError {\n  const msg = `Error \"${err}\" occurred while parsing the response body - ${response.bodyAsText}.`;\n  const errCode = err.code ?? RestError.PARSE_ERROR;\n  return new RestError(msg, {\n    code: errCode,\n    statusCode: response.status,\n    request: response.request,\n    response: response,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}