{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger as coreClientLogger } from \"./log.js\";\nimport { decodeStringToString } from \"./base64.js\";\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges) {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter(x => x);\n  return bearerChallenges.map(challenge => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter(x => x);\n    const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n      [key]: value\n    }))(keyValue.trim().split('=\"')));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => ({\n      ...a,\n      ...b\n    }), {});\n  });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n  const {\n    scopes,\n    response\n  } = onChallengeOptions;\n  const logger = onChallengeOptions.logger || coreClientLogger;\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (!challenge) {\n    logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n    return false;\n  }\n  const challenges = parseCAEChallenge(challenge) || [];\n  const parsedChallenge = challenges.find(x => x.claims);\n  if (!parsedChallenge) {\n    logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n    return false;\n  }\n  const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n    claims: decodeStringToString(parsedChallenge.claims)\n  });\n  if (!accessToken) {\n    return false;\n  }\n  onChallengeOptions.request.headers.set(\"Authorization\", `${accessToken.tokenType ?? \"Bearer\"} ${accessToken.token}`);\n  return true;\n}","map":{"version":3,"names":["logger","coreClientLogger","decodeStringToString","parseCAEChallenge","challenges","bearerChallenges","trim","split","filter","x","map","challenge","challengeParts","keyValuePairs","keyValue","key","value","reduce","a","b","authorizeRequestOnClaimChallenge","onChallengeOptions","scopes","response","headers","get","info","parsedChallenge","find","claims","accessToken","getAccessToken","scope","request","set","tokenType","token"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-client\\src\\authorizeRequestOnClaimChallenge.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AuthorizeRequestOnChallengeOptions } from \"@azure/core-rest-pipeline\";\nimport { logger as coreClientLogger } from \"./log.js\";\nimport { decodeStringToString } from \"./base64.js\";\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges: string): any[] {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n  return bearerChallenges.map((challenge) => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) =>\n      (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')),\n    );\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {});\n  });\n}\n\n/**\n * CAE Challenge structure\n */\nexport interface CAEChallenge {\n  scope: string;\n  claims: string;\n}\n\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(\n  onChallengeOptions: AuthorizeRequestOnChallengeOptions,\n): Promise<boolean> {\n  const { scopes, response } = onChallengeOptions;\n  const logger = onChallengeOptions.logger || coreClientLogger;\n\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (!challenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`,\n    );\n    return false;\n  }\n  const challenges: CAEChallenge[] = parseCAEChallenge(challenge) || [];\n\n  const parsedChallenge = challenges.find((x) => x.claims);\n  if (!parsedChallenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`,\n    );\n    return false;\n  }\n\n  const accessToken = await onChallengeOptions.getAccessToken(\n    parsedChallenge.scope ? [parsedChallenge.scope] : scopes,\n    {\n      claims: decodeStringToString(parsedChallenge.claims),\n    },\n  );\n\n  if (!accessToken) {\n    return false;\n  }\n\n  onChallengeOptions.request.headers.set(\n    \"Authorization\",\n    `${accessToken.tokenType ?? \"Bearer\"} ${accessToken.token}`,\n  );\n  return true;\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,MAAM,IAAIC,gBAAgB,QAAQ,UAAU;AACrD,SAASC,oBAAoB,QAAQ,aAAa;AAElD;;;;;;AAMA,OAAM,SAAUC,iBAAiBA,CAACC,UAAkB;EAClD,MAAMC,gBAAgB,GAAG,KAAKD,UAAU,CAACE,IAAI,EAAE,EAAE,CAACC,KAAK,CAAC,WAAW,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;EACrF,OAAOJ,gBAAgB,CAACK,GAAG,CAAEC,SAAS,IAAI;IACxC,MAAMC,cAAc,GAAG,GAAGD,SAAS,CAACL,IAAI,EAAE,IAAI,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;IAC5E,MAAMI,aAAa,GAAGD,cAAc,CAACF,GAAG,CAAEI,QAAQ,IAChD,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,MAAM;MAAE,CAACD,GAAG,GAAGC;IAAK,CAAE,CAAC,EAAEF,QAAQ,CAACR,IAAI,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CACpE;IACD;IACA,OAAOM,aAAa,CAACI,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM;MAAE,GAAGD,CAAC;MAAE,GAAGC;IAAC,CAAE,CAAC,EAAE,EAAE,CAAC;EAC7D,CAAC,CAAC;AACJ;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,eAAeC,gCAAgCA,CACpDC,kBAAsD;EAEtD,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAE,GAAGF,kBAAkB;EAC/C,MAAMrB,MAAM,GAAGqB,kBAAkB,CAACrB,MAAM,IAAIC,gBAAgB;EAE5D,MAAMU,SAAS,GAAGY,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC1D,IAAI,CAACd,SAAS,EAAE;IACdX,MAAM,CAAC0B,IAAI,CACT,kHAAkH,CACnH;IACD,OAAO,KAAK;EACd;EACA,MAAMtB,UAAU,GAAmBD,iBAAiB,CAACQ,SAAS,CAAC,IAAI,EAAE;EAErE,MAAMgB,eAAe,GAAGvB,UAAU,CAACwB,IAAI,CAAEnB,CAAC,IAAKA,CAAC,CAACoB,MAAM,CAAC;EACxD,IAAI,CAACF,eAAe,EAAE;IACpB3B,MAAM,CAAC0B,IAAI,CACT,iIAAiI,CAClI;IACD,OAAO,KAAK;EACd;EAEA,MAAMI,WAAW,GAAG,MAAMT,kBAAkB,CAACU,cAAc,CACzDJ,eAAe,CAACK,KAAK,GAAG,CAACL,eAAe,CAACK,KAAK,CAAC,GAAGV,MAAM,EACxD;IACEO,MAAM,EAAE3B,oBAAoB,CAACyB,eAAe,CAACE,MAAM;GACpD,CACF;EAED,IAAI,CAACC,WAAW,EAAE;IAChB,OAAO,KAAK;EACd;EAEAT,kBAAkB,CAACY,OAAO,CAACT,OAAO,CAACU,GAAG,CACpC,eAAe,EACf,GAAGJ,WAAW,CAACK,SAAS,IAAI,QAAQ,IAAIL,WAAW,CAACM,KAAK,EAAE,CAC5D;EACD,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}