{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isWebReadableStream } from \"./typeGuards.js\";\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n  return new Response(stream).blob();\n}\nasync function toBlobPart(source) {\n  if (source instanceof Blob || source instanceof Uint8Array) {\n    return source;\n  }\n  if (isWebReadableStream(source)) {\n    return drain(source);\n  } else {\n    throw new Error(\"Unsupported source type. Only Blob, Uint8Array, and ReadableStream are supported in browser.\");\n  }\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(sources) {\n  const parts = [];\n  for (const source of sources) {\n    parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n  }\n  return new Blob(parts);\n}","map":{"version":3,"names":["isWebReadableStream","drain","stream","Response","blob","toBlobPart","source","Blob","Uint8Array","Error","concat","sources","parts","push"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\util\\concat.common.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isWebReadableStream } from \"./typeGuards.js\";\n\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream: ReadableStream<Uint8Array>): Promise<Blob> {\n  return new Response(stream).blob();\n}\n\nasync function toBlobPart(\n  source: ReadableStream<Uint8Array> | Blob | Uint8Array,\n): Promise<Blob | Uint8Array> {\n  if (source instanceof Blob || source instanceof Uint8Array) {\n    return source;\n  }\n\n  if (isWebReadableStream(source)) {\n    return drain(source);\n  } else {\n    throw new Error(\n      \"Unsupported source type. Only Blob, Uint8Array, and ReadableStream are supported in browser.\",\n    );\n  }\n}\n\n/**\n * Accepted binary data types for concat\n *\n * @internal\n */\ntype ConcatSource = ReadableStream<Uint8Array> | Blob | Uint8Array;\n\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(\n  sources: (ConcatSource | (() => ConcatSource))[],\n): Promise<(() => NodeJS.ReadableStream) | Blob> {\n  const parts = [];\n  for (const source of sources) {\n    parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n  }\n\n  return new Blob(parts);\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,mBAAmB,QAAQ,iBAAiB;AAErD;;;;AAIA,SAASC,KAAKA,CAACC,MAAkC;EAC/C,OAAO,IAAIC,QAAQ,CAACD,MAAM,CAAC,CAACE,IAAI,EAAE;AACpC;AAEA,eAAeC,UAAUA,CACvBC,MAAsD;EAEtD,IAAIA,MAAM,YAAYC,IAAI,IAAID,MAAM,YAAYE,UAAU,EAAE;IAC1D,OAAOF,MAAM;EACf;EAEA,IAAIN,mBAAmB,CAACM,MAAM,CAAC,EAAE;IAC/B,OAAOL,KAAK,CAACK,MAAM,CAAC;EACtB,CAAC,MAAM;IACL,MAAM,IAAIG,KAAK,CACb,8FAA8F,CAC/F;EACH;AACF;AASA;;;;;;;;;AASA,OAAO,eAAeC,MAAMA,CAC1BC,OAAgD;EAEhD,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMN,MAAM,IAAIK,OAAO,EAAE;IAC5BC,KAAK,CAACC,IAAI,CAAC,MAAMR,UAAU,CAAC,OAAOC,MAAM,KAAK,UAAU,GAAGA,MAAM,EAAE,GAAGA,MAAM,CAAC,CAAC;EAChF;EAEA,OAAO,IAAIC,IAAI,CAACK,KAAK,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}