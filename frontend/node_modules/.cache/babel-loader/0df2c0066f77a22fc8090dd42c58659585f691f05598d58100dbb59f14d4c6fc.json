{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { BaseRequestPolicy } from \"./RequestPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants.js\";\nimport { setURLParameter } from \"../utils/utils.common.js\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  async sendRequest(request) {\n    if (isNodeLike) {\n      return this._nextPolicy.sendRequest(request);\n    }\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(request.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n    }\n    request.headers.remove(HeaderConstants.COOKIE);\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n    return this._nextPolicy.sendRequest(request);\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","isNodeLike","HeaderConstants","URLConstants","setURLParameter","StorageBrowserPolicy","constructor","nextPolicy","options","sendRequest","request","_nextPolicy","method","toUpperCase","url","Parameters","FORCE_BROWSER_NO_CACHE","Date","getTime","toString","headers","remove","COOKIE","CONTENT_LENGTH"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\policies\\StorageBrowserPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  RequestPolicy,\n  RequestPolicyOptionsLike as RequestPolicyOptions,\n  WebResourceLike as WebResource,\n  CompatResponse as HttpOperationResponse,\n} from \"@azure/core-http-compat\";\nimport { BaseRequestPolicy } from \"./RequestPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { HeaderConstants, URLConstants } from \"../utils/constants.js\";\nimport { setURLParameter } from \"../utils/utils.common.js\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNodeLike) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString(),\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":"AAAA;AACA;AAQA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,EAAEC,YAAY,QAAQ,uBAAuB;AACrE,SAASC,eAAe,QAAQ,0BAA0B;AAE1D;;;;;;;;;;;AAWA,OAAM,MAAOC,oBAAqB,SAAQL,iBAAiB;EACzD;;;;;EAKA;EACA;EACAM,YAAYC,UAAyB,EAAEC,OAA6B;IAClE,KAAK,CAACD,UAAU,EAAEC,OAAO,CAAC;EAC5B;EAEA;;;;;EAKO,MAAMC,WAAWA,CAACC,OAAoB;IAC3C,IAAIT,UAAU,EAAE;MACd,OAAO,IAAI,CAACU,WAAW,CAACF,WAAW,CAACC,OAAO,CAAC;IAC9C;IAEA,IAAIA,OAAO,CAACE,MAAM,CAACC,WAAW,EAAE,KAAK,KAAK,IAAIH,OAAO,CAACE,MAAM,CAACC,WAAW,EAAE,KAAK,MAAM,EAAE;MACrFH,OAAO,CAACI,GAAG,GAAGV,eAAe,CAC3BM,OAAO,CAACI,GAAG,EACXX,YAAY,CAACY,UAAU,CAACC,sBAAsB,EAC9C,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CAACC,QAAQ,EAAE,CAChC;IACH;IAEAT,OAAO,CAACU,OAAO,CAACC,MAAM,CAACnB,eAAe,CAACoB,MAAM,CAAC;IAE9C;IACAZ,OAAO,CAACU,OAAO,CAACC,MAAM,CAACnB,eAAe,CAACqB,cAAc,CAAC;IAEtD,OAAO,IAAI,CAACZ,WAAW,CAACF,WAAW,CAACC,OAAO,CAAC;EAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}