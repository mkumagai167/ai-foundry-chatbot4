{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as tspRuntime from \"@typespec/ts-http-runtime/internal/util\";\nexport { cancelablePromiseRace } from \"./aborterUtils.js\";\nexport { createAbortablePromise } from \"./createAbortablePromise.js\";\nexport { delay } from \"./delay.js\";\nexport { getErrorMessage } from \"./error.js\";\nexport { isDefined, isObjectWithProperties, objectHasProperty } from \"./typeGuards.js\";\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n  return tspRuntime.calculateRetryDelay(retryAttempt, config);\n}\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport function computeSha256Hash(content, encoding) {\n  return tspRuntime.computeSha256Hash(content, encoding);\n}\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(key, stringToSign, encoding) {\n  return tspRuntime.computeSha256Hmac(key, stringToSign, encoding);\n}\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min, max) {\n  return tspRuntime.getRandomIntegerInclusive(min, max);\n}\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n  return tspRuntime.isError(e);\n}\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input) {\n  return tspRuntime.isObject(input);\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID() {\n  return tspRuntime.randomUUID();\n}\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nexport const isBrowser = tspRuntime.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = tspRuntime.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno = tspRuntime.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */\nexport const isNode = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = tspRuntime.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\nexport const isReactNative = tspRuntime.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker = tspRuntime.isWebWorker;\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n  return tspRuntime.uint8ArrayToString(bytes, format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n  return tspRuntime.stringToUint8Array(value, format);\n}","map":{"version":3,"names":["tspRuntime","cancelablePromiseRace","createAbortablePromise","delay","getErrorMessage","isDefined","isObjectWithProperties","objectHasProperty","calculateRetryDelay","retryAttempt","config","computeSha256Hash","content","encoding","computeSha256Hmac","key","stringToSign","getRandomIntegerInclusive","min","max","isError","e","isObject","input","randomUUID","isBrowser","isBun","isDeno","isNode","isNodeLike","isNodeRuntime","isReactNative","isWebWorker","uint8ArrayToString","bytes","format","stringToUint8Array","value"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-util\\src\\index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as tspRuntime from \"@typespec/ts-http-runtime/internal/util\";\n\nexport {\n  type AbortOptions,\n  type AbortablePromiseBuilder,\n  cancelablePromiseRace,\n} from \"./aborterUtils.js\";\nexport {\n  type CreateAbortablePromiseOptions,\n  createAbortablePromise,\n} from \"./createAbortablePromise.js\";\nexport { type DelayOptions, delay } from \"./delay.js\";\nexport { getErrorMessage } from \"./error.js\";\nexport { isDefined, isObjectWithProperties, objectHasProperty } from \"./typeGuards.js\";\n\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(\n  retryAttempt: number,\n  config: {\n    retryDelayInMs: number;\n    maxRetryDelayInMs: number;\n  },\n): {\n  retryAfterInMs: number;\n} {\n  return tspRuntime.calculateRetryDelay(retryAttempt, config);\n}\n\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport function computeSha256Hash(content: string, encoding: \"base64\" | \"hex\"): Promise<string> {\n  return tspRuntime.computeSha256Hash(content, encoding);\n}\n\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(\n  key: string,\n  stringToSign: string,\n  encoding: \"base64\" | \"hex\",\n): Promise<string> {\n  return tspRuntime.computeSha256Hmac(key, stringToSign, encoding);\n}\n\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  return tspRuntime.getRandomIntegerInclusive(min, max);\n}\n\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  return tspRuntime.isError(e);\n}\n\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return tspRuntime.isObject(input);\n}\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return tspRuntime.randomUUID();\n}\n\n/**\n * Supported HTTP methods to use when making requests.\n *\n * @public\n */\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\n\n/**\n * A generic shape for a plain JS object.\n */\nexport type UnknownObject = {\n  [s: string]: unknown;\n};\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\nexport const isBrowser: boolean = tspRuntime.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun: boolean = tspRuntime.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno: boolean = tspRuntime.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */\nexport const isNode: boolean = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike: boolean = tspRuntime.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime: boolean = tspRuntime.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\nexport const isReactNative: boolean = tspRuntime.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker: boolean = tspRuntime.isWebWorker;\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\" | \"hex\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  return tspRuntime.uint8ArrayToString(bytes, format);\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  return tspRuntime.stringToUint8Array(value, format);\n}\n"],"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,UAAU,MAAM,yCAAyC;AAErE,SAGEC,qBAAqB,QAChB,mBAAmB;AAC1B,SAEEC,sBAAsB,QACjB,6BAA6B;AACpC,SAA4BC,KAAK,QAAQ,YAAY;AACrD,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,SAAS,EAAEC,sBAAsB,EAAEC,iBAAiB,QAAQ,iBAAiB;AAEtF;;;;;;;;;AASA,OAAM,SAAUC,mBAAmBA,CACjCC,YAAoB,EACpBC,MAGC;EAID,OAAOV,UAAU,CAACQ,mBAAmB,CAACC,YAAY,EAAEC,MAAM,CAAC;AAC7D;AAEA;;;;;;;AAOA,OAAM,SAAUC,iBAAiBA,CAACC,OAAe,EAAEC,QAA0B;EAC3E,OAAOb,UAAU,CAACW,iBAAiB,CAACC,OAAO,EAAEC,QAAQ,CAAC;AACxD;AAEA;;;;;;;;;AASA,OAAM,SAAUC,iBAAiBA,CAC/BC,GAAW,EACXC,YAAoB,EACpBH,QAA0B;EAE1B,OAAOb,UAAU,CAACc,iBAAiB,CAACC,GAAG,EAAEC,YAAY,EAAEH,QAAQ,CAAC;AAClE;AAEA;;;;;;;AAOA,OAAM,SAAUI,yBAAyBA,CAACC,GAAW,EAAEC,GAAW;EAChE,OAAOnB,UAAU,CAACiB,yBAAyB,CAACC,GAAG,EAAEC,GAAG,CAAC;AACvD;AAEA;;;;;AAKA,OAAM,SAAUC,OAAOA,CAACC,CAAU;EAChC,OAAOrB,UAAU,CAACoB,OAAO,CAACC,CAAC,CAAC;AAC9B;AAEA;;;;;AAKA,OAAM,SAAUC,QAAQA,CAACC,KAAc;EACrC,OAAOvB,UAAU,CAACsB,QAAQ,CAACC,KAAK,CAAC;AACnC;AAEA;;;;;AAKA,OAAM,SAAUC,UAAUA,CAAA;EACxB,OAAOxB,UAAU,CAACwB,UAAU,EAAE;AAChC;AAwBA;;;AAGA,OAAO,MAAMC,SAAS,GAAYzB,UAAU,CAACyB,SAAS;AACtD;;;AAGA,OAAO,MAAMC,KAAK,GAAY1B,UAAU,CAAC0B,KAAK;AAC9C;;;AAGA,OAAO,MAAMC,MAAM,GAAY3B,UAAU,CAAC2B,MAAM;AAChD;;;;;;;AAOA,OAAO,MAAMC,MAAM,GAAY5B,UAAU,CAAC6B,UAAU;AACpD;;;AAGA,OAAO,MAAMA,UAAU,GAAY7B,UAAU,CAAC6B,UAAU;AACxD;;;AAGA,OAAO,MAAMC,aAAa,GAAY9B,UAAU,CAAC8B,aAAa;AAC9D;;;AAGA,OAAO,MAAMC,aAAa,GAAY/B,UAAU,CAAC+B,aAAa;AAC9D;;;AAGA,OAAO,MAAMC,WAAW,GAAYhC,UAAU,CAACgC,WAAW;AAK1D;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAACC,KAAiB,EAAEC,MAAoB;EACxE,OAAOnC,UAAU,CAACiC,kBAAkB,CAACC,KAAK,EAAEC,MAAM,CAAC;AACrD;AAEA;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAACC,KAAa,EAAEF,MAAoB;EACpE,OAAOnC,UAAU,CAACoC,kBAAkB,CAACC,KAAK,EAAEF,MAAM,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}