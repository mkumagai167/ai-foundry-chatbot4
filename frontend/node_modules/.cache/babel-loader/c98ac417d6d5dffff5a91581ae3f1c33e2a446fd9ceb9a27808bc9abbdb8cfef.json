{"ast":null,"code":"// src/utils/export.js\n// Import jsPDF for PDF export\nimport{jsPDF}from\"jspdf\";// Import docx and file-saver for Word export\nimport{Document,Packer,Paragraph,TextRun}from\"docx\";import{saveAs}from\"file-saver\";/**\r\n * Export chat messages to PDF file.\r\n * @param {Array} messages - Array of message objects { role, text, time }\r\n */export const exportToPdf=messages=>{const doc=new jsPDF();let y=10;// vertical starting point on page\nmessages.forEach(msg=>{// Determine prefix based on role\nconst prefix=msg.role===\"user\"?\"You: \":msg.role===\"assistant\"?\"Assistant: \":\"System: \";const text=prefix+msg.text;// Split long text to fit page width\nconst lines=doc.splitTextToSize(text,180);doc.text(lines,10,y);y+=lines.length*10;// Add new page if bottom is reached\nif(y>280){doc.addPage();y=10;}});// Save PDF with filename\ndoc.save(\"chat-export.pdf\");};/**\r\n * Export chat messages to Word (.docx) file.\r\n * @param {Array} messages - Array of message objects { role, text, time }\r\n */export const exportToDocx=async messages=>{// Create a new Word Document\nconst doc=new Document({creator:\"Azure Foundry Chat App\",title:\"Chat Export\",description:\"Chat conversation exported from Azure Foundry Chat App\",sections:[{children:messages.map(msg=>new Paragraph({children:[new TextRun({text:(msg.role===\"user\"?\"You: \":msg.role===\"assistant\"?\"Assistant: \":\"System: \")+msg.text,bold:msg.role===\"user\",color:msg.role===\"user\"?\"0000FF\":\"000000\"})]}))}]});// Generate the Word document as a Blob (must await)\nconst blob=await Packer.toBlob(doc);// Trigger file download using file-saver\nsaveAs(blob,\"chat-export.docx\");};","map":{"version":3,"names":["jsPDF","Document","Packer","Paragraph","TextRun","saveAs","exportToPdf","messages","doc","y","forEach","msg","prefix","role","text","lines","splitTextToSize","length","addPage","save","exportToDocx","creator","title","description","sections","children","map","bold","color","blob","toBlob"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/utils/export.js"],"sourcesContent":["// src/utils/export.js\r\n\r\n// Import jsPDF for PDF export\r\nimport { jsPDF } from \"jspdf\";\r\n\r\n// Import docx and file-saver for Word export\r\nimport {\r\n  Document,\r\n  Packer,\r\n  Paragraph,\r\n  TextRun,\r\n} from \"docx\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\n/**\r\n * Export chat messages to PDF file.\r\n * @param {Array} messages - Array of message objects { role, text, time }\r\n */\r\nexport const exportToPdf = (messages) => {\r\n  const doc = new jsPDF();\r\n\r\n  let y = 10; // vertical starting point on page\r\n\r\n  messages.forEach((msg) => {\r\n    // Determine prefix based on role\r\n    const prefix =\r\n      msg.role === \"user\"\r\n        ? \"You: \"\r\n        : msg.role === \"assistant\"\r\n        ? \"Assistant: \"\r\n        : \"System: \";\r\n    const text = prefix + msg.text;\r\n\r\n    // Split long text to fit page width\r\n    const lines = doc.splitTextToSize(text, 180);\r\n    doc.text(lines, 10, y);\r\n\r\n    y += lines.length * 10;\r\n\r\n    // Add new page if bottom is reached\r\n    if (y > 280) {\r\n      doc.addPage();\r\n      y = 10;\r\n    }\r\n  });\r\n\r\n  // Save PDF with filename\r\n  doc.save(\"chat-export.pdf\");\r\n};\r\n\r\n/**\r\n * Export chat messages to Word (.docx) file.\r\n * @param {Array} messages - Array of message objects { role, text, time }\r\n */\r\nexport const exportToDocx = async (messages) => {\r\n  // Create a new Word Document\r\n  const doc = new Document({\r\n    creator: \"Azure Foundry Chat App\",\r\n    title: \"Chat Export\",\r\n    description: \"Chat conversation exported from Azure Foundry Chat App\",\r\n    sections: [\r\n      {\r\n        children: messages.map((msg) =>\r\n          new Paragraph({\r\n            children: [\r\n              new TextRun({\r\n                text:\r\n                  (msg.role === \"user\"\r\n                    ? \"You: \"\r\n                    : msg.role === \"assistant\"\r\n                    ? \"Assistant: \"\r\n                    : \"System: \") + msg.text,\r\n                bold: msg.role === \"user\",\r\n                color: msg.role === \"user\" ? \"0000FF\" : \"000000\",\r\n              }),\r\n            ],\r\n          })\r\n        ),\r\n      },\r\n    ],\r\n  });\r\n\r\n  // Generate the Word document as a Blob (must await)\r\n  const blob = await Packer.toBlob(doc);\r\n\r\n  // Trigger file download using file-saver\r\n  saveAs(blob, \"chat-export.docx\");\r\n};\r\n"],"mappings":"AAAA;AAEA;AACA,OAASA,KAAK,KAAQ,OAAO,CAE7B;AACA,OACEC,QAAQ,CACRC,MAAM,CACNC,SAAS,CACTC,OAAO,KACF,MAAM,CACb,OAASC,MAAM,KAAQ,YAAY,CAEnC;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,WAAW,CAAIC,QAAQ,EAAK,CACvC,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAR,KAAK,CAAC,CAAC,CAEvB,GAAI,CAAAS,CAAC,CAAG,EAAE,CAAE;AAEZF,QAAQ,CAACG,OAAO,CAAEC,GAAG,EAAK,CACxB;AACA,KAAM,CAAAC,MAAM,CACVD,GAAG,CAACE,IAAI,GAAK,MAAM,CACf,OAAO,CACPF,GAAG,CAACE,IAAI,GAAK,WAAW,CACxB,aAAa,CACb,UAAU,CAChB,KAAM,CAAAC,IAAI,CAAGF,MAAM,CAAGD,GAAG,CAACG,IAAI,CAE9B;AACA,KAAM,CAAAC,KAAK,CAAGP,GAAG,CAACQ,eAAe,CAACF,IAAI,CAAE,GAAG,CAAC,CAC5CN,GAAG,CAACM,IAAI,CAACC,KAAK,CAAE,EAAE,CAAEN,CAAC,CAAC,CAEtBA,CAAC,EAAIM,KAAK,CAACE,MAAM,CAAG,EAAE,CAEtB;AACA,GAAIR,CAAC,CAAG,GAAG,CAAE,CACXD,GAAG,CAACU,OAAO,CAAC,CAAC,CACbT,CAAC,CAAG,EAAE,CACR,CACF,CAAC,CAAC,CAEF;AACAD,GAAG,CAACW,IAAI,CAAC,iBAAiB,CAAC,CAC7B,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAb,QAAQ,EAAK,CAC9C;AACA,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAP,QAAQ,CAAC,CACvBoB,OAAO,CAAE,wBAAwB,CACjCC,KAAK,CAAE,aAAa,CACpBC,WAAW,CAAE,wDAAwD,CACrEC,QAAQ,CAAE,CACR,CACEC,QAAQ,CAAElB,QAAQ,CAACmB,GAAG,CAAEf,GAAG,EACzB,GAAI,CAAAR,SAAS,CAAC,CACZsB,QAAQ,CAAE,CACR,GAAI,CAAArB,OAAO,CAAC,CACVU,IAAI,CACF,CAACH,GAAG,CAACE,IAAI,GAAK,MAAM,CAChB,OAAO,CACPF,GAAG,CAACE,IAAI,GAAK,WAAW,CACxB,aAAa,CACb,UAAU,EAAIF,GAAG,CAACG,IAAI,CAC5Ba,IAAI,CAAEhB,GAAG,CAACE,IAAI,GAAK,MAAM,CACzBe,KAAK,CAAEjB,GAAG,CAACE,IAAI,GAAK,MAAM,CAAG,QAAQ,CAAG,QAC1C,CAAC,CAAC,CAEN,CAAC,CACH,CACF,CAAC,CAEL,CAAC,CAAC,CAEF;AACA,KAAM,CAAAgB,IAAI,CAAG,KAAM,CAAA3B,MAAM,CAAC4B,MAAM,CAACtB,GAAG,CAAC,CAErC;AACAH,MAAM,CAACwB,IAAI,CAAE,kBAAkB,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}