{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(key, stringToSign, encoding) {\n  const crypto = getCrypto();\n  const keyBytes = stringToUint8Array(key, \"base64\");\n  const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n  const cryptoKey = await crypto.importKey(\"raw\", keyBytes, {\n    name: \"HMAC\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, false, [\"sign\"]);\n  const signature = await crypto.sign({\n    name: \"HMAC\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, cryptoKey, stringToSignBytes);\n  return uint8ArrayToString(new Uint8Array(signature), encoding);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(content, encoding) {\n  const contentBytes = stringToUint8Array(content, \"utf-8\");\n  const digest = await getCrypto().digest({\n    name: \"SHA-256\"\n  }, contentBytes);\n  return uint8ArrayToString(new Uint8Array(digest), encoding);\n}","map":{"version":3,"names":["stringToUint8Array","uint8ArrayToString","subtleCrypto","getCrypto","self","crypto","subtle","Error","computeSha256Hmac","key","stringToSign","encoding","keyBytes","stringToSignBytes","cryptoKey","importKey","name","hash","signature","sign","Uint8Array","computeSha256Hash","content","contentBytes","digest"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\util\\sha256.common.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\n\n// stubs for browser self.crypto\ninterface JsonWebKey {}\ninterface CryptoKey {}\ntype KeyUsage =\n  | \"decrypt\"\n  | \"deriveBits\"\n  | \"deriveKey\"\n  | \"encrypt\"\n  | \"sign\"\n  | \"unwrapKey\"\n  | \"verify\"\n  | \"wrapKey\";\ninterface Algorithm {\n  name: string;\n}\ninterface SubtleCrypto {\n  importKey(\n    format: string,\n    keyData: JsonWebKey,\n    algorithm: HmacImportParams,\n    extractable: boolean,\n    usage: KeyUsage[],\n  ): Promise<CryptoKey>;\n  sign(\n    algorithm: HmacImportParams,\n    key: CryptoKey,\n    data: ArrayBufferView | ArrayBuffer,\n  ): Promise<ArrayBuffer>;\n  digest(algorithm: Algorithm, data: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer>;\n}\ninterface Crypto {\n  readonly subtle: SubtleCrypto;\n  getRandomValues<T extends ArrayBufferView | null>(array: T): T;\n}\ndeclare const self: {\n  crypto: Crypto;\n};\ninterface HmacImportParams {\n  name: string;\n  hash: Algorithm;\n  length?: number;\n}\n\nlet subtleCrypto: SubtleCrypto | undefined;\n\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto(): SubtleCrypto {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(\n  key: string,\n  stringToSign: string,\n  encoding: \"base64\" | \"hex\",\n): Promise<string> {\n  const crypto = getCrypto();\n  const keyBytes = stringToUint8Array(key, \"base64\");\n  const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n\n  const cryptoKey = await crypto.importKey(\n    \"raw\",\n    keyBytes,\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    false,\n    [\"sign\"],\n  );\n  const signature = await crypto.sign(\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    cryptoKey,\n    stringToSignBytes,\n  );\n\n  return uint8ArrayToString(new Uint8Array(signature), encoding);\n}\n\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(\n  content: string,\n  encoding: \"base64\" | \"hex\",\n): Promise<string> {\n  const contentBytes = stringToUint8Array(content, \"utf-8\");\n  const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n\n  return uint8ArrayToString(new Uint8Array(digest), encoding);\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,kBAAkB,EAAEC,kBAAkB,QAAQ,oBAAoB;AA6C3E,IAAIC,YAAsC;AAE1C;;;;AAIA,SAASC,SAASA,CAAA;EAChB,IAAID,YAAY,EAAE;IAChB,OAAOA,YAAY;EACrB;EAEA,IAAI,CAACE,IAAI,CAACC,MAAM,IAAI,CAACD,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;IACvC,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACtF;EAEAL,YAAY,GAAGE,IAAI,CAACC,MAAM,CAACC,MAAM;EACjC,OAAOJ,YAAY;AACrB;AAEA;;;;;;AAMA,OAAO,eAAeM,iBAAiBA,CACrCC,GAAW,EACXC,YAAoB,EACpBC,QAA0B;EAE1B,MAAMN,MAAM,GAAGF,SAAS,EAAE;EAC1B,MAAMS,QAAQ,GAAGZ,kBAAkB,CAACS,GAAG,EAAE,QAAQ,CAAC;EAClD,MAAMI,iBAAiB,GAAGb,kBAAkB,CAACU,YAAY,EAAE,OAAO,CAAC;EAEnE,MAAMI,SAAS,GAAG,MAAMT,MAAM,CAACU,SAAS,CACtC,KAAK,EACLH,QAAQ,EACR;IACEI,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;MAAED,IAAI,EAAE;IAAS;GACxB,EACD,KAAK,EACL,CAAC,MAAM,CAAC,CACT;EACD,MAAME,SAAS,GAAG,MAAMb,MAAM,CAACc,IAAI,CACjC;IACEH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;MAAED,IAAI,EAAE;IAAS;GACxB,EACDF,SAAS,EACTD,iBAAiB,CAClB;EAED,OAAOZ,kBAAkB,CAAC,IAAImB,UAAU,CAACF,SAAS,CAAC,EAAEP,QAAQ,CAAC;AAChE;AAEA;;;;;AAKA,OAAO,eAAeU,iBAAiBA,CACrCC,OAAe,EACfX,QAA0B;EAE1B,MAAMY,YAAY,GAAGvB,kBAAkB,CAACsB,OAAO,EAAE,OAAO,CAAC;EACzD,MAAME,MAAM,GAAG,MAAMrB,SAAS,EAAE,CAACqB,MAAM,CAAC;IAAER,IAAI,EAAE;EAAS,CAAE,EAAEO,YAAY,CAAC;EAE1E,OAAOtB,kBAAkB,CAAC,IAAImB,UAAU,CAACI,MAAM,CAAC,EAAEb,QAAQ,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}