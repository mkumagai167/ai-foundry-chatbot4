{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logger } from \"../../log.js\";\n// Ensure the warining is only emitted once\nlet insecureConnectionWarningEmmitted = false;\n/**\n * Checks if the request is allowed to be sent over an insecure connection.\n *\n * A request is allowed to be sent over an insecure connection when:\n * - The `allowInsecureConnection` option is set to `true`.\n * - The request has the `allowInsecureConnection` property set to `true`.\n * - The request is being sent to `localhost` or `127.0.0.1`\n */\nfunction allowInsecureConnection(request, options) {\n  if (options.allowInsecureConnection && request.allowInsecureConnection) {\n    const url = new URL(request.url);\n    if (url.hostname === \"localhost\" || url.hostname === \"127.0.0.1\") {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Logs a warning about sending a token over an insecure connection.\n *\n * This function will emit a node warning once, but log the warning every time.\n */\nfunction emitInsecureConnectionWarning() {\n  const warning = \"Sending token over insecure transport. Assume any token issued is compromised.\";\n  logger.warning(warning);\n  if (typeof process?.emitWarning === \"function\" && !insecureConnectionWarningEmmitted) {\n    insecureConnectionWarningEmmitted = true;\n    process.emitWarning(warning);\n  }\n}\n/**\n * Ensures that authentication is only allowed over HTTPS unless explicitly allowed.\n * Throws an error if the connection is not secure and not explicitly allowed.\n */\nexport function ensureSecureConnection(request, options) {\n  if (!request.url.toLowerCase().startsWith(\"https://\")) {\n    if (allowInsecureConnection(request, options)) {\n      emitInsecureConnectionWarning();\n    } else {\n      throw new Error(\"Authentication is not permitted for non-TLS protected (non-https) URLs when allowInsecureConnection is false.\");\n    }\n  }\n}","map":{"version":3,"names":["logger","insecureConnectionWarningEmmitted","allowInsecureConnection","request","options","url","URL","hostname","emitInsecureConnectionWarning","warning","process","emitWarning","ensureSecureConnection","toLowerCase","startsWith","Error"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\auth\\checkInsecureConnection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelineRequest } from \"../../interfaces.js\";\nimport { logger } from \"../../log.js\";\n\n// Ensure the warining is only emitted once\nlet insecureConnectionWarningEmmitted = false;\n\n/**\n * Checks if the request is allowed to be sent over an insecure connection.\n *\n * A request is allowed to be sent over an insecure connection when:\n * - The `allowInsecureConnection` option is set to `true`.\n * - The request has the `allowInsecureConnection` property set to `true`.\n * - The request is being sent to `localhost` or `127.0.0.1`\n */\nfunction allowInsecureConnection(\n  request: PipelineRequest,\n  options: { allowInsecureConnection?: boolean },\n): boolean {\n  if (options.allowInsecureConnection && request.allowInsecureConnection) {\n    const url = new URL(request.url);\n    if (url.hostname === \"localhost\" || url.hostname === \"127.0.0.1\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Logs a warning about sending a token over an insecure connection.\n *\n * This function will emit a node warning once, but log the warning every time.\n */\nfunction emitInsecureConnectionWarning(): void {\n  const warning = \"Sending token over insecure transport. Assume any token issued is compromised.\";\n\n  logger.warning(warning);\n\n  if (typeof process?.emitWarning === \"function\" && !insecureConnectionWarningEmmitted) {\n    insecureConnectionWarningEmmitted = true;\n    process.emitWarning(warning);\n  }\n}\n\n/**\n * Ensures that authentication is only allowed over HTTPS unless explicitly allowed.\n * Throws an error if the connection is not secure and not explicitly allowed.\n */\nexport function ensureSecureConnection(\n  request: PipelineRequest,\n  options: { allowInsecureConnection?: boolean },\n): void {\n  if (!request.url.toLowerCase().startsWith(\"https://\")) {\n    if (allowInsecureConnection(request, options)) {\n      emitInsecureConnectionWarning();\n    } else {\n      throw new Error(\n        \"Authentication is not permitted for non-TLS protected (non-https) URLs when allowInsecureConnection is false.\",\n      );\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,MAAM,QAAQ,cAAc;AAErC;AACA,IAAIC,iCAAiC,GAAG,KAAK;AAE7C;;;;;;;;AAQA,SAASC,uBAAuBA,CAC9BC,OAAwB,EACxBC,OAA8C;EAE9C,IAAIA,OAAO,CAACF,uBAAuB,IAAIC,OAAO,CAACD,uBAAuB,EAAE;IACtE,MAAMG,GAAG,GAAG,IAAIC,GAAG,CAACH,OAAO,CAACE,GAAG,CAAC;IAChC,IAAIA,GAAG,CAACE,QAAQ,KAAK,WAAW,IAAIF,GAAG,CAACE,QAAQ,KAAK,WAAW,EAAE;MAChE,OAAO,IAAI;IACb;EACF;EAEA,OAAO,KAAK;AACd;AAEA;;;;;AAKA,SAASC,6BAA6BA,CAAA;EACpC,MAAMC,OAAO,GAAG,gFAAgF;EAEhGT,MAAM,CAACS,OAAO,CAACA,OAAO,CAAC;EAEvB,IAAI,OAAOC,OAAO,EAAEC,WAAW,KAAK,UAAU,IAAI,CAACV,iCAAiC,EAAE;IACpFA,iCAAiC,GAAG,IAAI;IACxCS,OAAO,CAACC,WAAW,CAACF,OAAO,CAAC;EAC9B;AACF;AAEA;;;;AAIA,OAAM,SAAUG,sBAAsBA,CACpCT,OAAwB,EACxBC,OAA8C;EAE9C,IAAI,CAACD,OAAO,CAACE,GAAG,CAACQ,WAAW,EAAE,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IACrD,IAAIZ,uBAAuB,CAACC,OAAO,EAAEC,OAAO,CAAC,EAAE;MAC7CI,6BAA6B,EAAE;IACjC,CAAC,MAAM;MACL,MAAM,IAAIO,KAAK,CACb,+GAA+G,CAChH;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}