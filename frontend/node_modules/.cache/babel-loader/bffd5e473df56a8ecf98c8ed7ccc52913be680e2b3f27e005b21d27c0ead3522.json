{"ast":null,"code":"// src/utils/export.js\n\nimport { jsPDF } from \"jspdf\"; // For PDF export\nimport { Document, Packer, Paragraph, TextRun } from \"docx\"; // For Word (DOCX) export\nimport { saveAs } from \"file-saver\"; // For triggering file download\n\n/**\r\n * Export chat messages to a PDF file\r\n * @param {Array} messages - List of chat messages [{ role, text }]\r\n */\nexport const exportToPdf = messages => {\n  const doc = new jsPDF();\n  let y = 10; // Start position for text\n\n  messages.forEach(msg => {\n    const prefix = msg.role === \"user\" ? \"You: \" : msg.role === \"assistant\" ? \"Assistant: \" : \"System: \";\n    const text = prefix + msg.text;\n    const lines = doc.splitTextToSize(text, 180); // Wrap long lines\n    doc.text(lines, 10, y);\n    y += lines.length * 10;\n    if (y > 280) {\n      doc.addPage(); // Start new page if nearing bottom\n      y = 10;\n    }\n  });\n  doc.save(\"chat-export.pdf\");\n};\n\n/**\r\n * Export chat messages to a Word (DOCX) document\r\n * @param {Array} messages - List of chat messages [{ role, text }]\r\n */\nexport const exportToDocx = async messages => {\n  const doc = new Document();\n\n  // Convert each message into a Paragraph with styled sender prefix\n  const paragraphs = messages.map(msg => {\n    const prefix = msg.role === \"user\" ? \"You: \" : msg.role === \"assistant\" ? \"Assistant: \" : \"System: \";\n    return new Paragraph({\n      children: [new TextRun({\n        text: prefix,\n        bold: true\n      }), new TextRun({\n        text: msg.text,\n        break: 1 // Line break after prefix\n      })]\n    });\n  });\n\n  // Add all message paragraphs to a section in the Word document\n  doc.addSection({\n    children: paragraphs\n  });\n\n  // Convert document to Blob and trigger download\n  const blob = await Packer.toBlob(doc);\n  saveAs(blob, \"chat-export.docx\");\n};","map":{"version":3,"names":["jsPDF","Document","Packer","Paragraph","TextRun","saveAs","exportToPdf","messages","doc","y","forEach","msg","prefix","role","text","lines","splitTextToSize","length","addPage","save","exportToDocx","paragraphs","map","children","bold","break","addSection","blob","toBlob"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/utils/export.js"],"sourcesContent":["// src/utils/export.js\r\n\r\nimport { jsPDF } from \"jspdf\"; // For PDF export\r\nimport {\r\n  Document,\r\n  Packer,\r\n  Paragraph,\r\n  TextRun,\r\n} from \"docx\"; // For Word (DOCX) export\r\nimport { saveAs } from \"file-saver\"; // For triggering file download\r\n\r\n/**\r\n * Export chat messages to a PDF file\r\n * @param {Array} messages - List of chat messages [{ role, text }]\r\n */\r\nexport const exportToPdf = (messages) => {\r\n  const doc = new jsPDF();\r\n  let y = 10; // Start position for text\r\n\r\n  messages.forEach((msg) => {\r\n    const prefix =\r\n      msg.role === \"user\"\r\n        ? \"You: \"\r\n        : msg.role === \"assistant\"\r\n        ? \"Assistant: \"\r\n        : \"System: \";\r\n    const text = prefix + msg.text;\r\n\r\n    const lines = doc.splitTextToSize(text, 180); // Wrap long lines\r\n    doc.text(lines, 10, y);\r\n    y += lines.length * 10;\r\n\r\n    if (y > 280) {\r\n      doc.addPage(); // Start new page if nearing bottom\r\n      y = 10;\r\n    }\r\n  });\r\n\r\n  doc.save(\"chat-export.pdf\");\r\n};\r\n\r\n/**\r\n * Export chat messages to a Word (DOCX) document\r\n * @param {Array} messages - List of chat messages [{ role, text }]\r\n */\r\nexport const exportToDocx = async (messages) => {\r\n  const doc = new Document();\r\n\r\n  // Convert each message into a Paragraph with styled sender prefix\r\n  const paragraphs = messages.map((msg) => {\r\n    const prefix =\r\n      msg.role === \"user\"\r\n        ? \"You: \"\r\n        : msg.role === \"assistant\"\r\n        ? \"Assistant: \"\r\n        : \"System: \";\r\n\r\n    return new Paragraph({\r\n      children: [\r\n        new TextRun({\r\n          text: prefix,\r\n          bold: true,\r\n        }),\r\n        new TextRun({\r\n          text: msg.text,\r\n          break: 1, // Line break after prefix\r\n        }),\r\n      ],\r\n    });\r\n  });\r\n\r\n  // Add all message paragraphs to a section in the Word document\r\n  doc.addSection({\r\n    children: paragraphs,\r\n  });\r\n\r\n  // Convert document to Blob and trigger download\r\n  const blob = await Packer.toBlob(doc);\r\n  saveAs(blob, \"chat-export.docx\");\r\n};\r\n"],"mappings":"AAAA;;AAEA,SAASA,KAAK,QAAQ,OAAO,CAAC,CAAC;AAC/B,SACEC,QAAQ,EACRC,MAAM,EACNC,SAAS,EACTC,OAAO,QACF,MAAM,CAAC,CAAC;AACf,SAASC,MAAM,QAAQ,YAAY,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EACvC,MAAMC,GAAG,GAAG,IAAIR,KAAK,CAAC,CAAC;EACvB,IAAIS,CAAC,GAAG,EAAE,CAAC,CAAC;;EAEZF,QAAQ,CAACG,OAAO,CAAEC,GAAG,IAAK;IACxB,MAAMC,MAAM,GACVD,GAAG,CAACE,IAAI,KAAK,MAAM,GACf,OAAO,GACPF,GAAG,CAACE,IAAI,KAAK,WAAW,GACxB,aAAa,GACb,UAAU;IAChB,MAAMC,IAAI,GAAGF,MAAM,GAAGD,GAAG,CAACG,IAAI;IAE9B,MAAMC,KAAK,GAAGP,GAAG,CAACQ,eAAe,CAACF,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC9CN,GAAG,CAACM,IAAI,CAACC,KAAK,EAAE,EAAE,EAAEN,CAAC,CAAC;IACtBA,CAAC,IAAIM,KAAK,CAACE,MAAM,GAAG,EAAE;IAEtB,IAAIR,CAAC,GAAG,GAAG,EAAE;MACXD,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC,CAAC;MACfT,CAAC,GAAG,EAAE;IACR;EACF,CAAC,CAAC;EAEFD,GAAG,CAACW,IAAI,CAAC,iBAAiB,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOb,QAAQ,IAAK;EAC9C,MAAMC,GAAG,GAAG,IAAIP,QAAQ,CAAC,CAAC;;EAE1B;EACA,MAAMoB,UAAU,GAAGd,QAAQ,CAACe,GAAG,CAAEX,GAAG,IAAK;IACvC,MAAMC,MAAM,GACVD,GAAG,CAACE,IAAI,KAAK,MAAM,GACf,OAAO,GACPF,GAAG,CAACE,IAAI,KAAK,WAAW,GACxB,aAAa,GACb,UAAU;IAEhB,OAAO,IAAIV,SAAS,CAAC;MACnBoB,QAAQ,EAAE,CACR,IAAInB,OAAO,CAAC;QACVU,IAAI,EAAEF,MAAM;QACZY,IAAI,EAAE;MACR,CAAC,CAAC,EACF,IAAIpB,OAAO,CAAC;QACVU,IAAI,EAAEH,GAAG,CAACG,IAAI;QACdW,KAAK,EAAE,CAAC,CAAE;MACZ,CAAC,CAAC;IAEN,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAjB,GAAG,CAACkB,UAAU,CAAC;IACbH,QAAQ,EAAEF;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMM,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,MAAM,CAACpB,GAAG,CAAC;EACrCH,MAAM,CAACsB,IAAI,EAAE,kBAAkB,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}