{"ast":null,"code":"// frontend/src/services/api.js\nexport async function postToBackend(message,accessToken){let fileIds=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let threadId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;try{const bodyPayload={message};// ✅ Only include fileIds if any were uploaded\nif(fileIds.length>0){bodyPayload.fileIds=fileIds;}// ✅ Include threadId if one exists\nif(threadId){bodyPayload.threadId=threadId;}const response=await fetch(\"http://localhost:7071/api/runAgent\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(accessToken)},body:JSON.stringify(bodyPayload)});if(!response.ok){let errorText=await response.text();throw new Error(\"Backend error: \".concat(response.status,\" - \").concat(errorText));}return await response.json();}catch(err){console.error(\"postToBackend error:\",err);throw err;}}","map":{"version":3,"names":["postToBackend","message","accessToken","fileIds","arguments","length","undefined","threadId","bodyPayload","response","fetch","method","headers","concat","body","JSON","stringify","ok","errorText","text","Error","status","json","err","console","error"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\n\r\nexport async function postToBackend(message, accessToken, fileIds = [], threadId = null) {\r\n  try {\r\n    const bodyPayload = {\r\n      message,\r\n    };\r\n\r\n    // ✅ Only include fileIds if any were uploaded\r\n    if (fileIds.length > 0) {\r\n      bodyPayload.fileIds = fileIds;\r\n    }\r\n\r\n    // ✅ Include threadId if one exists\r\n    if (threadId) {\r\n      bodyPayload.threadId = threadId;\r\n    }\r\n\r\n    const response = await fetch(\"http://localhost:7071/api/runAgent\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(bodyPayload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorText = await response.text();\r\n      throw new Error(`Backend error: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.error(\"postToBackend error:\", err);\r\n    throw err;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AAEA,MAAO,eAAe,CAAAA,aAAaA,CAACC,OAAO,CAAEC,WAAW,CAAiC,IAA/B,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IAAE,CAAAG,QAAQ,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACrF,GAAI,CACF,KAAM,CAAAI,WAAW,CAAG,CAClBP,OACF,CAAC,CAED;AACA,GAAIE,OAAO,CAACE,MAAM,CAAG,CAAC,CAAE,CACtBG,WAAW,CAACL,OAAO,CAAGA,OAAO,CAC/B,CAEA;AACA,GAAII,QAAQ,CAAE,CACZC,WAAW,CAACD,QAAQ,CAAGA,QAAQ,CACjC,CAEA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAAC,MAAA,CAAYX,WAAW,CACxC,CAAC,CACDY,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACQ,EAAE,CAAE,CAChB,GAAI,CAAAC,SAAS,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACrC,KAAM,IAAI,CAAAC,KAAK,mBAAAP,MAAA,CAAmBJ,QAAQ,CAACY,MAAM,QAAAR,MAAA,CAAMK,SAAS,CAAE,CAAC,CACrE,CAEA,MAAO,MAAM,CAAAT,QAAQ,CAACa,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEF,GAAG,CAAC,CAC1C,KAAM,CAAAA,GAAG,CACX,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}