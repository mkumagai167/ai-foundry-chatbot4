{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { toHttpHeadersLike, toPipelineRequest, toWebResourceLike } from \"./util.js\";\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toCompatResponse(response, options) {\n  let request = toWebResourceLike(response.request);\n  let headers = toHttpHeadersLike(response.headers);\n  if (options?.createProxy) {\n    return new Proxy(response, {\n      get(target, prop, receiver) {\n        if (prop === \"headers\") {\n          return headers;\n        } else if (prop === \"request\") {\n          return request;\n        } else if (prop === originalResponse) {\n          return response;\n        }\n        return Reflect.get(target, prop, receiver);\n      },\n      set(target, prop, value, receiver) {\n        if (prop === \"headers\") {\n          headers = value;\n        } else if (prop === \"request\") {\n          request = value;\n        }\n        return Reflect.set(target, prop, value, receiver);\n      }\n    });\n  } else {\n    return {\n      ...response,\n      request,\n      headers\n    };\n  }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toPipelineResponse(compatResponse) {\n  const extendedCompatResponse = compatResponse;\n  const response = extendedCompatResponse[originalResponse];\n  const headers = createHttpHeaders(compatResponse.headers.toJson({\n    preserveCase: true\n  }));\n  if (response) {\n    response.headers = headers;\n    return response;\n  } else {\n    return {\n      ...compatResponse,\n      headers,\n      request: toPipelineRequest(compatResponse.request)\n    };\n  }\n}","map":{"version":3,"names":["createHttpHeaders","toHttpHeadersLike","toPipelineRequest","toWebResourceLike","originalResponse","Symbol","toCompatResponse","response","options","request","headers","createProxy","Proxy","get","target","prop","receiver","Reflect","set","value","toPipelineResponse","compatResponse","extendedCompatResponse","toJson","preserveCase"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-http-compat\\src\\response.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { FullOperationResponse } from \"@azure/core-client\";\nimport type { PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport { createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport type { HttpHeadersLike, WebResourceLike } from \"./util.js\";\nimport { toHttpHeadersLike, toPipelineRequest, toWebResourceLike } from \"./util.js\";\n/**\n * Http Response that is compatible with the core-v1(core-http).\n */\nexport interface CompatResponse extends Omit<FullOperationResponse, \"request\" | \"headers\"> {\n  /**\n   * A description of a HTTP request to be made to a remote server.\n   */\n  request: WebResourceLike;\n  /**\n   * A collection of HTTP header key/value pairs.\n   */\n  headers: HttpHeadersLike;\n}\n\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\ntype ExtendedCompatResponse = CompatResponse & { [originalResponse]?: FullOperationResponse };\n\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toCompatResponse(\n  response: FullOperationResponse,\n  options?: { createProxy?: boolean },\n): CompatResponse {\n  let request = toWebResourceLike(response.request);\n  let headers = toHttpHeadersLike(response.headers);\n  if (options?.createProxy) {\n    return new Proxy(response, {\n      get(target, prop, receiver) {\n        if (prop === \"headers\") {\n          return headers;\n        } else if (prop === \"request\") {\n          return request;\n        } else if (prop === originalResponse) {\n          return response;\n        }\n        return Reflect.get(target, prop, receiver);\n      },\n      set(target, prop, value, receiver) {\n        if (prop === \"headers\") {\n          headers = value;\n        } else if (prop === \"request\") {\n          request = value;\n        }\n        return Reflect.set(target, prop, value, receiver);\n      },\n    }) as unknown as CompatResponse;\n  } else {\n    return {\n      ...response,\n      request,\n      headers,\n    };\n  }\n}\n\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nexport function toPipelineResponse(compatResponse: CompatResponse): PipelineResponse {\n  const extendedCompatResponse = compatResponse as ExtendedCompatResponse;\n  const response = extendedCompatResponse[originalResponse];\n  const headers = createHttpHeaders(compatResponse.headers.toJson({ preserveCase: true }));\n  if (response) {\n    response.headers = headers;\n    return response;\n  } else {\n    return {\n      ...compatResponse,\n      headers,\n      request: toPipelineRequest(compatResponse.request),\n    };\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,iBAAiB,QAAQ,2BAA2B;AAE7D,SAASC,iBAAiB,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,WAAW;AAenF,MAAMC,gBAAgB,GAAGC,MAAM,CAAC,gCAAgC,CAAC;AAGjE;;;;;AAKA,OAAM,SAAUC,gBAAgBA,CAC9BC,QAA+B,EAC/BC,OAAmC;EAEnC,IAAIC,OAAO,GAAGN,iBAAiB,CAACI,QAAQ,CAACE,OAAO,CAAC;EACjD,IAAIC,OAAO,GAAGT,iBAAiB,CAACM,QAAQ,CAACG,OAAO,CAAC;EACjD,IAAIF,OAAO,EAAEG,WAAW,EAAE;IACxB,OAAO,IAAIC,KAAK,CAACL,QAAQ,EAAE;MACzBM,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ;QACxB,IAAID,IAAI,KAAK,SAAS,EAAE;UACtB,OAAOL,OAAO;QAChB,CAAC,MAAM,IAAIK,IAAI,KAAK,SAAS,EAAE;UAC7B,OAAON,OAAO;QAChB,CAAC,MAAM,IAAIM,IAAI,KAAKX,gBAAgB,EAAE;UACpC,OAAOG,QAAQ;QACjB;QACA,OAAOU,OAAO,CAACJ,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC;MAC5C,CAAC;MACDE,GAAGA,CAACJ,MAAM,EAAEC,IAAI,EAAEI,KAAK,EAAEH,QAAQ;QAC/B,IAAID,IAAI,KAAK,SAAS,EAAE;UACtBL,OAAO,GAAGS,KAAK;QACjB,CAAC,MAAM,IAAIJ,IAAI,KAAK,SAAS,EAAE;UAC7BN,OAAO,GAAGU,KAAK;QACjB;QACA,OAAOF,OAAO,CAACC,GAAG,CAACJ,MAAM,EAAEC,IAAI,EAAEI,KAAK,EAAEH,QAAQ,CAAC;MACnD;KACD,CAA8B;EACjC,CAAC,MAAM;IACL,OAAO;MACL,GAAGT,QAAQ;MACXE,OAAO;MACPC;KACD;EACH;AACF;AAEA;;;;AAIA,OAAM,SAAUU,kBAAkBA,CAACC,cAA8B;EAC/D,MAAMC,sBAAsB,GAAGD,cAAwC;EACvE,MAAMd,QAAQ,GAAGe,sBAAsB,CAAClB,gBAAgB,CAAC;EACzD,MAAMM,OAAO,GAAGV,iBAAiB,CAACqB,cAAc,CAACX,OAAO,CAACa,MAAM,CAAC;IAAEC,YAAY,EAAE;EAAI,CAAE,CAAC,CAAC;EACxF,IAAIjB,QAAQ,EAAE;IACZA,QAAQ,CAACG,OAAO,GAAGA,OAAO;IAC1B,OAAOH,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO;MACL,GAAGc,cAAc;MACjBX,OAAO;MACPD,OAAO,EAAEP,iBAAiB,CAACmB,cAAc,CAACZ,OAAO;KAClD;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}