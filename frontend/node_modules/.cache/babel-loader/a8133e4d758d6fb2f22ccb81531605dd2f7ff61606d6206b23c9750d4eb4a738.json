{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { BatchResponseParser } from \"./BatchResponseParser.js\";\nimport { utf8ByteLength } from \"./BatchUtils.js\";\nimport { BlobBatch } from \"./BlobBatch.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential.js\";\nimport { StorageContextClient } from \"./StorageContextClient.js\";\nimport { newPipeline, isPipelineLike, getCoreClientOptions } from \"./Pipeline.js\";\nimport { assertResponse, getURLPath } from \"./utils/utils.common.js\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://learn.microsoft.com/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  serviceOrContainerContext;\n  constructor(url, credentialOrPipeline,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n    const storageClientContext = new StorageContextClient(url, getCoreClientOptions(pipeline));\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = storageClientContext.container;\n    } else {\n      this.serviceOrContainerContext = storageClientContext.service;\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  createBatch() {\n    return new BlobBatch();\n  }\n  async deleteBlobs(urlsOrBlobClients, credentialOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n  async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions,\n  // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n      } else {\n        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```ts snippet:BlobBatchClientSubmitBatch\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { BlobServiceClient, BlobBatch } from \"@azure/storage-blob\";\n   *\n   * const account = \"<account>\";\n   * const credential = new DefaultAzureCredential();\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   credential,\n   * );\n   *\n   * const containerName = \"<container name>\";\n   * const containerClient = blobServiceClient.getContainerClient(containerName);\n   * const blobBatchClient = containerClient.getBlobBatchClient();\n   *\n   * const batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(\"<blob-url-1>\", credential);\n   * await batchRequest.deleteBlob(\"<blob-url-2>\", credential, {\n   *   deleteSnapshots: \"include\",\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```ts snippet:BlobBatchClientSubmitBatchWithLease\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { BlobServiceClient, BlobBatch } from \"@azure/storage-blob\";\n   *\n   * const account = \"<account>\";\n   * const credential = new DefaultAzureCredential();\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   credential,\n   * );\n   *\n   * const containerName = \"<container name>\";\n   * const containerClient = blobServiceClient.getContainerClient(containerName);\n   * const blobBatchClient = containerClient.getBlobBatchClient();\n   * const blobClient = containerClient.getBlobClient(\"<blob name>\");\n   *\n   * const batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blobClient, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blobClient, \"Cool\", {\n   *   conditions: { leaseId: \"<lease-id>\" },\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  async submitBatch(batchRequest, options = {}) {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n    return tracingClient.withSpan(\"BlobBatchClient-submitBatch\", options, async updatedOptions => {\n      const batchRequestBody = batchRequest.getHttpRequestBody();\n      // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n      const rawBatchResponse = assertResponse(await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, {\n        ...updatedOptions\n      }));\n      // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n      const responseSummary = await batchResponseParser.parseBatchResponse();\n      const res = {\n        _response: rawBatchResponse._response,\n        contentType: rawBatchResponse.contentType,\n        errorCode: rawBatchResponse.errorCode,\n        requestId: rawBatchResponse.requestId,\n        clientRequestId: rawBatchResponse.clientRequestId,\n        version: rawBatchResponse.version,\n        subResponses: responseSummary.subResponses,\n        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n        subResponsesFailedCount: responseSummary.subResponsesFailedCount\n      };\n      return res;\n    });\n  }\n}","map":{"version":3,"names":["BatchResponseParser","utf8ByteLength","BlobBatch","tracingClient","AnonymousCredential","StorageContextClient","newPipeline","isPipelineLike","getCoreClientOptions","assertResponse","getURLPath","BlobBatchClient","serviceOrContainerContext","constructor","url","credentialOrPipeline","options","pipeline","storageClientContext","path","container","service","createBatch","deleteBlobs","urlsOrBlobClients","credentialOrOptions","batch","urlOrBlobClient","deleteBlob","submitBatch","setBlobsAccessTier","credentialOrTier","tierOrOptions","setBlobAccessTier","batchRequest","getSubRequests","size","RangeError","withSpan","updatedOptions","batchRequestBody","getHttpRequestBody","rawBatchResponse","getMultiPartContentType","batchResponseParser","responseSummary","parseBatchResponse","res","_response","contentType","errorCode","requestId","clientRequestId","version","subResponses","subResponsesSucceededCount","subResponsesFailedCount"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\BlobBatchClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  AccessTier,\n  ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchOptionalParamsModel,\n  ServiceSubmitBatchResponseModel,\n} from \"./generatedModels.js\";\nimport type { ParsedBatchResponse } from \"./BatchResponse.js\";\nimport { BatchResponseParser } from \"./BatchResponseParser.js\";\nimport { utf8ByteLength } from \"./BatchUtils.js\";\nimport { BlobBatch } from \"./BlobBatch.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { Service, Container } from \"./generated/src/operationsInterfaces/index.js\";\nimport type { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential.js\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential.js\";\nimport type { BlobDeleteOptions, BlobClient, BlobSetTierOptions } from \"./Clients.js\";\nimport { StorageContextClient } from \"./StorageContextClient.js\";\nimport type { PipelineLike, StoragePipelineOptions } from \"./Pipeline.js\";\nimport { newPipeline, isPipelineLike, getCoreClientOptions } from \"./Pipeline.js\";\nimport type { WithResponse } from \"./utils/utils.common.js\";\nimport { assertResponse, getURLPath } from \"./utils/utils.common.js\";\n\n/**\n * Options to configure the Service - Submit Batch Optional Params.\n */\nexport interface BlobBatchSubmitBatchOptionalParams extends ServiceSubmitBatchOptionalParamsModel {}\n\n/**\n * Contains response data for blob batch operations.\n */\nexport declare type BlobBatchSubmitBatchResponse = WithResponse<\n  ParsedBatchResponse & ServiceSubmitBatchHeaders,\n  ServiceSubmitBatchHeaders\n>;\n\n/**\n * Contains response data for the {@link deleteBlobs} operation.\n */\nexport declare type BlobBatchDeleteBlobsResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * Contains response data for the {@link setBlobsAccessTier} operation.\n */\nexport declare type BlobBatchSetBlobsAccessTierResponse = BlobBatchSubmitBatchResponse;\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://learn.microsoft.com/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n  private serviceOrContainerContext: Service | Container;\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions,\n  );\n\n  /**\n   * Creates an instance of BlobBatchClient.\n   *\n   * @param url - A url pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: PipelineLike);\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | PipelineLike,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: StoragePipelineOptions,\n  ) {\n    let pipeline: PipelineLike;\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageContextClient(url, getCoreClientOptions(pipeline));\n\n    const path = getURLPath(url);\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = storageClientContext.container;\n    } else {\n      this.serviceOrContainerContext = storageClientContext.service;\n    }\n  }\n\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n  public createBatch(): BlobBatch {\n    return new BlobBatch();\n  }\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://learn.microsoft.com/rest/api/storageservices/delete-blob).\n   * The operations will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://learn.microsoft.com/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resources to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options -\n   */\n  public async deleteBlobs(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions,\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  /**\n   * Create multiple delete operations to mark the specified blobs or snapshots for deletion.\n   * Note that in order to delete a blob, you must delete all of its snapshots.\n   * You can delete both at the same time. See [delete operation details](https://learn.microsoft.com/rest/api/storageservices/delete-blob).\n   * The operation(subrequest) will be authenticated and authorized with specified credential.\n   * See [blob batch authorization details](https://learn.microsoft.com/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs to delete.\n   * @param options -\n   */\n  public async deleteBlobs(\n    blobClients: BlobClient[],\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions,\n  ): Promise<BlobBatchDeleteBlobsResponse>;\n\n  public async deleteBlobs(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrOptions:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | BlobDeleteOptions\n      | undefined,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobDeleteOptions,\n  ): Promise<BlobBatchDeleteBlobsResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as TokenCredential, options);\n      } else {\n        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions as BlobDeleteOptions);\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://learn.microsoft.com/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://learn.microsoft.com/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param urls - The urls of the blob resource to delete.\n   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    urls: string[],\n    credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions,\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  /**\n   * Create multiple set tier operations to set the tier on a blob.\n   * The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * See [set blob tier details](https://learn.microsoft.com/rest/api/storageservices/set-blob-tier).\n   * The operation(subrequest) will be authenticated and authorized\n   * with specified credential.See [blob batch authorization details](https://learn.microsoft.com/rest/api/storageservices/blob-batch#authorization).\n   *\n   * @param blobClients - The BlobClients for the blobs which should have a new tier set.\n   * @param tier -\n   * @param options -\n   */\n  public async setBlobsAccessTier(\n    blobClients: BlobClient[],\n    tier: AccessTier,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions,\n  ): Promise<BlobBatchSetBlobsAccessTierResponse>;\n\n  public async setBlobsAccessTier(\n    urlsOrBlobClients: string[] | BlobClient[],\n    credentialOrTier:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | AccessTier,\n    tierOrOptions?: AccessTier | BlobSetTierOptions,\n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options?: BlobSetTierOptions,\n  ): Promise<BlobBatchSetBlobsAccessTierResponse> {\n    const batch = new BlobBatch();\n    for (const urlOrBlobClient of urlsOrBlobClients) {\n      if (typeof urlOrBlobClient === \"string\") {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as TokenCredential,\n          tierOrOptions as AccessTier,\n          options,\n        );\n      } else {\n        await batch.setBlobAccessTier(\n          urlOrBlobClient,\n          credentialOrTier as AccessTier,\n          tierOrOptions as BlobSetTierOptions,\n        );\n      }\n    }\n    return this.submitBatch(batch);\n  }\n\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```ts snippet:BlobBatchClientSubmitBatch\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { BlobServiceClient, BlobBatch } from \"@azure/storage-blob\";\n   *\n   * const account = \"<account>\";\n   * const credential = new DefaultAzureCredential();\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   credential,\n   * );\n   *\n   * const containerName = \"<container name>\";\n   * const containerClient = blobServiceClient.getContainerClient(containerName);\n   * const blobBatchClient = containerClient.getBlobBatchClient();\n   *\n   * const batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(\"<blob-url-1>\", credential);\n   * await batchRequest.deleteBlob(\"<blob-url-2>\", credential, {\n   *   deleteSnapshots: \"include\",\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```ts snippet:BlobBatchClientSubmitBatchWithLease\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { BlobServiceClient, BlobBatch } from \"@azure/storage-blob\";\n   *\n   * const account = \"<account>\";\n   * const credential = new DefaultAzureCredential();\n   * const blobServiceClient = new BlobServiceClient(\n   *   `https://${account}.blob.core.windows.net`,\n   *   credential,\n   * );\n   *\n   * const containerName = \"<container name>\";\n   * const containerClient = blobServiceClient.getContainerClient(containerName);\n   * const blobBatchClient = containerClient.getBlobBatchClient();\n   * const blobClient = containerClient.getBlobClient(\"<blob name>\");\n   *\n   * const batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blobClient, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blobClient, \"Cool\", {\n   *   conditions: { leaseId: \"<lease-id>\" },\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://learn.microsoft.com/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n  public async submitBatch(\n    batchRequest: BlobBatch,\n    options: BlobBatchSubmitBatchOptionalParams = {},\n  ): Promise<BlobBatchSubmitBatchResponse> {\n    if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n      throw new RangeError(\"Batch request should contain one or more sub requests.\");\n    }\n\n    return tracingClient.withSpan(\n      \"BlobBatchClient-submitBatch\",\n      options,\n      async (updatedOptions) => {\n        const batchRequestBody = batchRequest.getHttpRequestBody();\n\n        // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n        const rawBatchResponse: ServiceSubmitBatchResponseModel = assertResponse(\n          await this.serviceOrContainerContext.submitBatch(\n            utf8ByteLength(batchRequestBody),\n            batchRequest.getMultiPartContentType(),\n            batchRequestBody,\n            {\n              ...updatedOptions,\n            },\n          ),\n        );\n\n        // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n        const batchResponseParser = new BatchResponseParser(\n          rawBatchResponse,\n          batchRequest.getSubRequests(),\n        );\n        const responseSummary = await batchResponseParser.parseBatchResponse();\n\n        const res: BlobBatchSubmitBatchResponse = {\n          _response: rawBatchResponse._response,\n          contentType: rawBatchResponse.contentType,\n          errorCode: rawBatchResponse.errorCode,\n          requestId: rawBatchResponse.requestId,\n          clientRequestId: rawBatchResponse.clientRequestId,\n          version: rawBatchResponse.version,\n          subResponses: responseSummary.subResponses,\n          subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n          subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n        };\n\n        return res;\n      },\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}