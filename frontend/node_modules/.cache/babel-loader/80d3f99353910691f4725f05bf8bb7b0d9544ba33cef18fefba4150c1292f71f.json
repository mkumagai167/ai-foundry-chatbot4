{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.Kumagai\\\\Documents\\\\React\\\\ai-foundry-chatbot4\\\\frontend\\\\src\\\\components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FileUpload({\n  threadId\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedId, setUploadedId] = useState(null);\n  async function onUpload() {\n    if (!file) return;\n    setUploading(true);\n    try {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64 = reader.result.split(\",\")[1]; // remove data:<type>;base64,\n\n        const response = await fetch(\"/api/uploadToVectorStore\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            fileName: file.name,\n            fileData: base64,\n            threadId\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Upload failed: \" + response.statusText);\n        }\n        const data = await response.json();\n        setUploadedId(data.fileId);\n        alert(\"Upload successful!\");\n      };\n      reader.readAsDataURL(file);\n    } catch (err) {\n      console.error(\"Upload error:\", err);\n      alert(\"Upload failed: \" + err.message);\n    } finally {\n      setUploading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload a Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0]),\n      style: {\n        marginRight: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      disabled: !file || uploading,\n      children: uploading ? \"Uploading...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), uploadedId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: [\"\\u2705 File uploaded with ID: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: uploadedId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"Krg5l00ls6EsStJlIK55wOgXFho=\");\n_c = FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","threadId","_s","file","setFile","uploading","setUploading","uploadedId","setUploadedId","onUpload","reader","FileReader","onload","base64","result","split","response","fetch","method","headers","body","JSON","stringify","fileName","name","fileData","ok","Error","statusText","data","json","fileId","alert","readAsDataURL","err","console","error","message","style","marginTop","children","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","marginRight","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/components/FileUpload.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function FileUpload({ threadId }) {\r\n  const [file, setFile] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [uploadedId, setUploadedId] = useState(null);\r\n\r\n  async function onUpload() {\r\n    if (!file) return;\r\n\r\n    setUploading(true);\r\n    try {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = async () => {\r\n        const base64 = reader.result.split(\",\")[1]; // remove data:<type>;base64,\r\n\r\n        const response = await fetch(\"/api/uploadToVectorStore\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            fileName: file.name,\r\n            fileData: base64,\r\n            threadId,\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Upload failed: \" + response.statusText);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setUploadedId(data.fileId);\r\n        alert(\"Upload successful!\");\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    } catch (err) {\r\n      console.error(\"Upload error:\", err);\r\n      alert(\"Upload failed: \" + err.message);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <h3>Upload a Document</h3>\r\n      <input\r\n        type=\"file\"\r\n        onChange={(e) => setFile(e.target.files[0])}\r\n        style={{ marginRight: 10 }}\r\n      />\r\n      <button onClick={onUpload} disabled={!file || uploading}>\r\n        {uploading ? \"Uploading...\" : \"Upload\"}\r\n      </button>\r\n\r\n      {uploadedId && (\r\n        <div style={{ marginTop: 10 }}>\r\n          âœ… File uploaded with ID: <code>{uploadedId}</code>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}