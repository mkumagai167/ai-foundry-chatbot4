{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The base class from which all request policies derive.\n */\nexport class BaseRequestPolicy {\n  _nextPolicy;\n  _options;\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  constructor(\n  /**\n   * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n   */\n  _nextPolicy,\n  /**\n   * The options that can be passed to a given request policy.\n   */\n  _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel) {\n    return this._options.shouldLog(logLevel);\n  }\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  log(logLevel, message) {\n    this._options.log(logLevel, message);\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","_nextPolicy","_options","constructor","shouldLog","logLevel","log","message"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\policies\\RequestPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyOptionsLike,\n  WebResourceLike,\n  CompatResponse as HttpOperationResponse,\n} from \"@azure/core-http-compat\";\n\n/**\n * The base class from which all request policies derive.\n */\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  protected constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    readonly _nextPolicy: RequestPolicy,\n    /**\n     * The options that can be passed to a given request policy.\n     */\n    readonly _options: RequestPolicyOptionsLike,\n  ) {}\n\n  /**\n   * Sends a network request based on the given web resource.\n   * @param webResource - A {@link WebResourceLike} that describes a HTTP request to be made.\n   */\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n"],"mappings":"AAAA;AACA;AAUA;;;AAGA,OAAM,MAAgBA,iBAAiB;EAQ1BC,WAAA;EAIAC,QAAA;EAXX;;;EAGAC;EACE;;;EAGSF,WAA0B;EACnC;;;EAGSC,QAAkC;IAJlC,KAAAD,WAAW,GAAXA,WAAW;IAIX,KAAAC,QAAQ,GAARA,QAAQ;EAChB;EAQH;;;;;EAKOE,SAASA,CAACC,QAA8B;IAC7C,OAAO,IAAI,CAACH,QAAQ,CAACE,SAAS,CAACC,QAAQ,CAAC;EAC1C;EAEA;;;;;;EAMOC,GAAGA,CAACD,QAA8B,EAAEE,OAAe;IACxD,IAAI,CAACL,QAAQ,CAACI,GAAG,CAACD,QAAQ,EAAEE,OAAO,CAAC;EACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}