{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the Agent Policy\n */\nexport const agentPolicyName = \"agentPolicy\";\n/**\n * Gets a pipeline policy that sets http.agent\n */\nexport function agentPolicy(agent) {\n  return {\n    name: agentPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define an agent on the request, honor it over the client level one\n      if (!req.agent) {\n        req.agent = agent;\n      }\n      return next(req);\n    }\n  };\n}","map":{"version":3,"names":["agentPolicyName","agentPolicy","agent","name","sendRequest","req","next"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\agentPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport type { Agent } from \"../interfaces.js\";\n\n/**\n * Name of the Agent Policy\n */\nexport const agentPolicyName = \"agentPolicy\";\n\n/**\n * Gets a pipeline policy that sets http.agent\n */\nexport function agentPolicy(agent?: Agent): PipelinePolicy {\n  return {\n    name: agentPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define an agent on the request, honor it over the client level one\n      if (!req.agent) {\n        req.agent = agent;\n      }\n      return next(req);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAKA;;;AAGA,OAAO,MAAMA,eAAe,GAAG,aAAa;AAE5C;;;AAGA,OAAM,SAAUC,WAAWA,CAACC,KAAa;EACvC,OAAO;IACLC,IAAI,EAAEH,eAAe;IACrBI,WAAW,EAAE,MAAAA,CAAOC,GAAG,EAAEC,IAAI,KAAI;MAC/B;MACA,IAAI,CAACD,GAAG,CAACH,KAAK,EAAE;QACdG,GAAG,CAACH,KAAK,GAAGA,KAAK;MACnB;MACA,OAAOI,IAAI,CAACD,GAAG,CAAC;IAClB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}