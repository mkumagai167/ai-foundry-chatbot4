{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"@typespec/ts-http-runtime/internal/util\";\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs, options) {\n  let token;\n  const {\n    abortSignal,\n    abortErrorMsg\n  } = options ?? {};\n  return createAbortablePromise(resolve => {\n    token = setTimeout(resolve, timeInMs);\n  }, {\n    cleanupBeforeAbort: () => clearTimeout(token),\n    abortSignal,\n    abortErrorMsg: abortErrorMsg ?? StandardAbortMessage\n  });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(retryAttempt, config) {\n  // Exponentially increase the delay each time\n  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n  // Don't let the delay exceed the maximum\n  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n  // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n  // that retries across multiple clients don't occur simultaneously.\n  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n  return {\n    retryAfterInMs\n  };\n}","map":{"version":3,"names":["createAbortablePromise","getRandomIntegerInclusive","StandardAbortMessage","delay","timeInMs","options","token","abortSignal","abortErrorMsg","resolve","setTimeout","cleanupBeforeAbort","clearTimeout","calculateRetryDelay","retryAttempt","config","exponentialDelay","retryDelayInMs","Math","pow","clampedDelay","min","maxRetryDelayInMs","retryAfterInMs"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-util\\src\\delay.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortOptions } from \"./aborterUtils.js\";\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\nimport { getRandomIntegerInclusive } from \"@typespec/ts-http-runtime/internal/util\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions extends AbortOptions {}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    },\n  );\n}\n\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nexport function calculateRetryDelay(\n  retryAttempt: number,\n  config: {\n    retryDelayInMs: number;\n    maxRetryDelayInMs: number;\n  },\n): { retryAfterInMs: number } {\n  // Exponentially increase the delay each time\n  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n\n  // Don't let the delay exceed the maximum\n  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n\n  // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n  // that retries across multiple clients don't occur simultaneously.\n  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);\n\n  return { retryAfterInMs };\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,yBAAyB,QAAQ,yCAAyC;AAEnF,MAAMC,oBAAoB,GAAG,wBAAwB;AAOrD;;;;;;AAMA,OAAM,SAAUC,KAAKA,CAACC,QAAgB,EAAEC,OAAsB;EAC5D,IAAIC,KAAoC;EACxC,MAAM;IAAEC,WAAW;IAAEC;EAAa,CAAE,GAAGH,OAAO,IAAI,EAAE;EACpD,OAAOL,sBAAsB,CAC1BS,OAAO,IAAI;IACVH,KAAK,GAAGI,UAAU,CAACD,OAAO,EAAEL,QAAQ,CAAC;EACvC,CAAC,EACD;IACEO,kBAAkB,EAAEA,CAAA,KAAMC,YAAY,CAACN,KAAK,CAAC;IAC7CC,WAAW;IACXC,aAAa,EAAEA,aAAa,IAAIN;GACjC,CACF;AACH;AAEA;;;;;;AAMA,OAAM,SAAUW,mBAAmBA,CACjCC,YAAoB,EACpBC,MAGC;EAED;EACA,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,YAAY,CAAC;EAE1E;EACA,MAAMM,YAAY,GAAGF,IAAI,CAACG,GAAG,CAACN,MAAM,CAACO,iBAAiB,EAAEN,gBAAgB,CAAC;EAEzE;EACA;EACA,MAAMO,cAAc,GAAGH,YAAY,GAAG,CAAC,GAAGnB,yBAAyB,CAAC,CAAC,EAAEmB,YAAY,GAAG,CAAC,CAAC;EAExF,OAAO;IAAEG;EAAc,CAAE;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}