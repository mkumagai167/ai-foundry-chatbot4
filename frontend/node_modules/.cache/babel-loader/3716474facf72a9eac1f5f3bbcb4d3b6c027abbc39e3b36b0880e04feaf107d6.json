{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObjectWithProperties } from \"@azure/core-util\";\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential {\n  _signature;\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  get signature() {\n    return this._signature;\n  }\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n    this._signature = signature;\n  }\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n  update(newSignature) {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n    this._signature = newSignature;\n  }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential) {\n  return isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\";\n}","map":{"version":3,"names":["isObjectWithProperties","AzureSASCredential","_signature","signature","constructor","Error","update","newSignature","isSASCredential","credential"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-auth\\src\\azureSASCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isObjectWithProperties } from \"@azure/core-util\";\n\n/**\n * Represents a credential defined by a static shared access signature.\n */\nexport interface SASCredential {\n  /**\n   * The value of the shared access signature represented as a string\n   */\n  readonly signature: string;\n}\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nexport class AzureSASCredential implements SASCredential {\n  private _signature: string;\n\n  /**\n   * The value of the shared access signature to be used in authentication\n   */\n  public get signature(): string {\n    return this._signature;\n  }\n\n  /**\n   * Create an instance of an AzureSASCredential for use\n   * with a service client.\n   *\n   * @param signature - The initial value of the shared access signature to use in authentication\n   */\n  constructor(signature: string) {\n    if (!signature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = signature;\n  }\n\n  /**\n   * Change the value of the signature.\n   *\n   * Updates will take effect upon the next request after\n   * updating the signature value.\n   *\n   * @param newSignature - The new shared access signature value to be used\n   */\n  public update(newSignature: string): void {\n    if (!newSignature) {\n      throw new Error(\"shared access signature must be a non-empty string\");\n    }\n\n    this._signature = newSignature;\n  }\n}\n\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nexport function isSASCredential(credential: unknown): credential is SASCredential {\n  return (\n    isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\"\n  );\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,sBAAsB,QAAQ,kBAAkB;AAYzD;;;;AAIA,OAAM,MAAOC,kBAAkB;EACrBC,UAAU;EAElB;;;EAGA,IAAWC,SAASA,CAAA;IAClB,OAAO,IAAI,CAACD,UAAU;EACxB;EAEA;;;;;;EAMAE,YAAYD,SAAiB;IAC3B,IAAI,CAACA,SAAS,EAAE;MACd,MAAM,IAAIE,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,IAAI,CAACH,UAAU,GAAGC,SAAS;EAC7B;EAEA;;;;;;;;EAQOG,MAAMA,CAACC,YAAoB;IAChC,IAAI,CAACA,YAAY,EAAE;MACjB,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,IAAI,CAACH,UAAU,GAAGK,YAAY;EAChC;;AAGF;;;;;AAKA,OAAM,SAAUC,eAAeA,CAACC,UAAmB;EACjD,OACET,sBAAsB,CAACS,UAAU,EAAE,CAAC,WAAW,CAAC,CAAC,IAAI,OAAOA,UAAU,CAACN,SAAS,KAAK,QAAQ;AAEjG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}