{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nexport function wrapAbortSignalLike(abortSignalLike) {\n  if (abortSignalLike instanceof AbortSignal) {\n    return {\n      abortSignal: abortSignalLike\n    };\n  }\n  if (abortSignalLike.aborted) {\n    return {\n      abortSignal: AbortSignal.abort(abortSignalLike.reason)\n    };\n  }\n  const controller = new AbortController();\n  let needsCleanup = true;\n  function cleanup() {\n    if (needsCleanup) {\n      abortSignalLike.removeEventListener(\"abort\", listener);\n      needsCleanup = false;\n    }\n  }\n  function listener() {\n    controller.abort(abortSignalLike.reason);\n    cleanup();\n  }\n  abortSignalLike.addEventListener(\"abort\", listener);\n  return {\n    abortSignal: controller.signal,\n    cleanup\n  };\n}","map":{"version":3,"names":["wrapAbortSignalLike","abortSignalLike","AbortSignal","abortSignal","aborted","abort","reason","controller","AbortController","needsCleanup","cleanup","removeEventListener","listener","addEventListener","signal"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-rest-pipeline\\src\\util\\wrapAbortSignal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */\nexport function wrapAbortSignalLike(abortSignalLike: AbortSignalLike): {\n  abortSignal: AbortSignal;\n  cleanup?: () => void;\n} {\n  if (abortSignalLike instanceof AbortSignal) {\n    return { abortSignal: abortSignalLike };\n  }\n\n  if (abortSignalLike.aborted) {\n    return { abortSignal: AbortSignal.abort((abortSignalLike as any).reason) };\n  }\n\n  const controller = new AbortController();\n  let needsCleanup = true;\n  function cleanup(): void {\n    if (needsCleanup) {\n      abortSignalLike.removeEventListener(\"abort\", listener);\n      needsCleanup = false;\n    }\n  }\n  function listener(): void {\n    controller.abort((abortSignalLike as any).reason);\n    cleanup();\n  }\n\n  abortSignalLike.addEventListener(\"abort\", listener);\n  return { abortSignal: controller.signal, cleanup };\n}\n"],"mappings":"AAAA;AACA;AAIA;;;;;;AAMA,OAAM,SAAUA,mBAAmBA,CAACC,eAAgC;EAIlE,IAAIA,eAAe,YAAYC,WAAW,EAAE;IAC1C,OAAO;MAAEC,WAAW,EAAEF;IAAe,CAAE;EACzC;EAEA,IAAIA,eAAe,CAACG,OAAO,EAAE;IAC3B,OAAO;MAAED,WAAW,EAAED,WAAW,CAACG,KAAK,CAAEJ,eAAuB,CAACK,MAAM;IAAC,CAAE;EAC5E;EAEA,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;EACxC,IAAIC,YAAY,GAAG,IAAI;EACvB,SAASC,OAAOA,CAAA;IACd,IAAID,YAAY,EAAE;MAChBR,eAAe,CAACU,mBAAmB,CAAC,OAAO,EAAEC,QAAQ,CAAC;MACtDH,YAAY,GAAG,KAAK;IACtB;EACF;EACA,SAASG,QAAQA,CAAA;IACfL,UAAU,CAACF,KAAK,CAAEJ,eAAuB,CAACK,MAAM,CAAC;IACjDI,OAAO,EAAE;EACX;EAEAT,eAAe,CAACY,gBAAgB,CAAC,OAAO,EAAED,QAAQ,CAAC;EACnD,OAAO;IAAET,WAAW,EAAEI,UAAU,CAACO,MAAM;IAAEJ;EAAO,CAAE;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}