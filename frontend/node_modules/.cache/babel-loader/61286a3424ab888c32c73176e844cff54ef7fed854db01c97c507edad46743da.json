{"ast":null,"code":"// frontend/src/services/api.js\n\nexport async function postToBackend(message, accessToken, fileIds = [], threadId = null) {\n  try {\n    const bodyPayload = {\n      message\n    };\n\n    // ✅ Only include fileIds if any were uploaded\n    if (fileIds.length > 0) {\n      bodyPayload.fileIds = fileIds;\n    }\n\n    // ✅ Include threadId if one exists\n    if (threadId) {\n      bodyPayload.threadId = threadId;\n    }\n    const response = await fetch(\"http://localhost:7071/api/runAgent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(bodyPayload)\n    });\n    if (!response.ok) {\n      let errorText = await response.text();\n      throw new Error(`Backend error: ${response.status} - ${errorText}`);\n    }\n    return await response.json();\n  } catch (err) {\n    console.error(\"postToBackend error:\", err);\n    throw err;\n  }\n}","map":{"version":3,"names":["postToBackend","message","accessToken","fileIds","threadId","bodyPayload","length","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","json","err","console","error"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\n\r\nexport async function postToBackend(message, accessToken, fileIds = [], threadId = null) {\r\n  try {\r\n    const bodyPayload = {\r\n      message,\r\n    };\r\n\r\n    // ✅ Only include fileIds if any were uploaded\r\n    if (fileIds.length > 0) {\r\n      bodyPayload.fileIds = fileIds;\r\n    }\r\n\r\n    // ✅ Include threadId if one exists\r\n    if (threadId) {\r\n      bodyPayload.threadId = threadId;\r\n    }\r\n\r\n    const response = await fetch(\"http://localhost:7071/api/runAgent\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(bodyPayload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      let errorText = await response.text();\r\n      throw new Error(`Backend error: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.error(\"postToBackend error:\", err);\r\n    throw err;\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,aAAaA,CAACC,OAAO,EAAEC,WAAW,EAAEC,OAAO,GAAG,EAAE,EAAEC,QAAQ,GAAG,IAAI,EAAE;EACvF,IAAI;IACF,MAAMC,WAAW,GAAG;MAClBJ;IACF,CAAC;;IAED;IACA,IAAIE,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;MACtBD,WAAW,CAACF,OAAO,GAAGA,OAAO;IAC/B;;IAEA;IACA,IAAIC,QAAQ,EAAE;MACZC,WAAW,CAACD,QAAQ,GAAGA,QAAQ;IACjC;IAEA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUR,WAAW;MACxC,CAAC;MACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,IAAIC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACrC,MAAM,IAAIC,KAAK,CAAC,kBAAkBV,QAAQ,CAACW,MAAM,MAAMH,SAAS,EAAE,CAAC;IACrE;IAEA,OAAO,MAAMR,QAAQ,CAACY,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC1C,MAAMA,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}