{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport function isNodeReadableStream(x) {\n  return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nexport function isWebReadableStream(x) {\n  return Boolean(x && typeof x.getReader === \"function\" && typeof x.tee === \"function\");\n}\nexport function isBinaryBody(body) {\n  return body !== undefined && (body instanceof Uint8Array || isReadableStream(body) || typeof body === \"function\" || body instanceof Blob);\n}\nexport function isReadableStream(x) {\n  return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nexport function isBlob(x) {\n  return typeof x.stream === \"function\";\n}","map":{"version":3,"names":["isNodeReadableStream","x","Boolean","isWebReadableStream","getReader","tee","isBinaryBody","body","undefined","Uint8Array","isReadableStream","Blob","isBlob","stream"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\util\\typeGuards.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport function isNodeReadableStream(x: unknown): x is NodeJS.ReadableStream {\n  return Boolean(x && typeof (x as NodeJS.ReadableStream)[\"pipe\"] === \"function\");\n}\n\nexport function isWebReadableStream(x: unknown): x is ReadableStream {\n  return Boolean(\n    x &&\n      typeof (x as ReadableStream).getReader === \"function\" &&\n      typeof (x as ReadableStream).tee === \"function\",\n  );\n}\n\nexport function isBinaryBody(\n  body: unknown,\n): body is\n  | Uint8Array\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | (() => NodeJS.ReadableStream)\n  | (() => ReadableStream<Uint8Array>)\n  | Blob {\n  return (\n    body !== undefined &&\n    (body instanceof Uint8Array ||\n      isReadableStream(body) ||\n      typeof body === \"function\" ||\n      body instanceof Blob)\n  );\n}\n\nexport function isReadableStream(x: unknown): x is ReadableStream | NodeJS.ReadableStream {\n  return isNodeReadableStream(x) || isWebReadableStream(x);\n}\n\nexport function isBlob(x: unknown): x is Blob {\n  return typeof (x as Blob).stream === \"function\";\n}\n"],"mappings":"AAAA;AACA;AAEA,OAAM,SAAUA,oBAAoBA,CAACC,CAAU;EAC7C,OAAOC,OAAO,CAACD,CAAC,IAAI,OAAQA,CAA2B,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC;AACjF;AAEA,OAAM,SAAUE,mBAAmBA,CAACF,CAAU;EAC5C,OAAOC,OAAO,CACZD,CAAC,IACC,OAAQA,CAAoB,CAACG,SAAS,KAAK,UAAU,IACrD,OAAQH,CAAoB,CAACI,GAAG,KAAK,UAAU,CAClD;AACH;AAEA,OAAM,SAAUC,YAAYA,CAC1BC,IAAa;EAQb,OACEA,IAAI,KAAKC,SAAS,KACjBD,IAAI,YAAYE,UAAU,IACzBC,gBAAgB,CAACH,IAAI,CAAC,IACtB,OAAOA,IAAI,KAAK,UAAU,IAC1BA,IAAI,YAAYI,IAAI,CAAC;AAE3B;AAEA,OAAM,SAAUD,gBAAgBA,CAACT,CAAU;EACzC,OAAOD,oBAAoB,CAACC,CAAC,CAAC,IAAIE,mBAAmB,CAACF,CAAC,CAAC;AAC1D;AAEA,OAAM,SAAUW,MAAMA,CAACX,CAAU;EAC/B,OAAO,OAAQA,CAAU,CAACY,MAAM,KAAK,UAAU;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}