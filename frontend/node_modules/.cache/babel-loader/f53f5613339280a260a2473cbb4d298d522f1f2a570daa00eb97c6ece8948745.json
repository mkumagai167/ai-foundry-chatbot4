{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M.Kumagai\\\\Documents\\\\React\\\\ai-foundry-chatbot4\\\\frontend\\\\src\\\\components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { BlockBlobClient } from \"@azure/storage-blob\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FileUpload() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadedUrl, setUploadedUrl] = useState(\"\");\n  async function onUpload() {\n    if (!file) return;\n    setUploading(true);\n    try {\n      // Get SAS upload URL from backend\n      const res = await fetch(`/api/getSas?filename=${encodeURIComponent(file.name)}`);\n      if (!res.ok) throw new Error(\"Failed to get SAS token\");\n      const {\n        uploadUrl\n      } = await res.json();\n\n      // Upload directly to Blob using SAS\n      const blockBlobClient = new BlockBlobClient(uploadUrl);\n      await blockBlobClient.uploadBrowserData(file, {\n        blobHTTPHeaders: {\n          blobContentType: file.type\n        }\n      });\n      setUploadedUrl(uploadUrl.split(\"?\")[0]); // save blob URL (without SAS)\n    } catch (err) {\n      console.error(\"Upload failed:\", err);\n      alert(\"Upload failed: \" + err.message);\n    } finally {\n      setUploading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload a Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0]),\n      style: {\n        marginRight: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      disabled: !file || uploading,\n      children: uploading ? \"Uploading...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), uploadedUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      children: [\"\\u2705 Uploaded to:\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: uploadedUrl,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: uploadedUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"66z/KDVayxDKGC2a1C/W4Y4ht0E=\");\n_c = FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","BlockBlobClient","jsxDEV","_jsxDEV","FileUpload","_s","file","setFile","uploading","setUploading","uploadedUrl","setUploadedUrl","onUpload","res","fetch","encodeURIComponent","name","ok","Error","uploadUrl","json","blockBlobClient","uploadBrowserData","blobHTTPHeaders","blobContentType","type","split","err","console","error","alert","message","style","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","files","marginRight","onClick","disabled","href","rel","_c","$RefreshReg$"],"sources":["C:/Users/M.Kumagai/Documents/React/ai-foundry-chatbot4/frontend/src/components/FileUpload.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { BlockBlobClient } from \"@azure/storage-blob\";\r\n\r\nexport default function FileUpload() {\r\n  const [file, setFile] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [uploadedUrl, setUploadedUrl] = useState(\"\");\r\n\r\n  async function onUpload() {\r\n    if (!file) return;\r\n    setUploading(true);\r\n    try {\r\n      // Get SAS upload URL from backend\r\n      const res = await fetch(\r\n        `/api/getSas?filename=${encodeURIComponent(file.name)}`\r\n      );\r\n      if (!res.ok) throw new Error(\"Failed to get SAS token\");\r\n      const { uploadUrl } = await res.json();\r\n\r\n      // Upload directly to Blob using SAS\r\n      const blockBlobClient = new BlockBlobClient(uploadUrl);\r\n      await blockBlobClient.uploadBrowserData(file, {\r\n        blobHTTPHeaders: { blobContentType: file.type }\r\n      });\r\n\r\n      setUploadedUrl(uploadUrl.split(\"?\")[0]); // save blob URL (without SAS)\r\n    } catch (err) {\r\n      console.error(\"Upload failed:\", err);\r\n      alert(\"Upload failed: \" + err.message);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <h3>Upload a Document</h3>\r\n      <input\r\n        type=\"file\"\r\n        onChange={(e) => setFile(e.target.files[0])}\r\n        style={{ marginRight: 10 }}\r\n      />\r\n      <button onClick={onUpload} disabled={!file || uploading}>\r\n        {uploading ? \"Uploading...\" : \"Upload\"}\r\n      </button>\r\n\r\n      {uploadedUrl && (\r\n        <div style={{ marginTop: 10 }}>\r\n          âœ… Uploaded to:\r\n          <a href={uploadedUrl} target=\"_blank\" rel=\"noreferrer\">\r\n            {uploadedUrl}\r\n          </a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}