{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport { getOperationArgumentValueFromParameter, getOperationRequestInfo } from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options = {}) {\n  const stringifyXML = options.stringifyXML;\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request, next) {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo?.operationSpec;\n      const operationArguments = operationInfo?.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    }\n  };\n}\n/**\n * @internal\n */\nexport function serializeHeaders(request, operationArguments, operationSpec) {\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if (headerValue !== null && headerValue !== undefined || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n        const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n        }\n      }\n    }\n  }\n  const customHeaders = operationArguments.options?.requestOptions?.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n/**\n * @internal\n */\nexport function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n  throw new Error(\"XML serialization unsupported!\");\n}) {\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  const updatedOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY\n    }\n  };\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (request.body !== undefined && request.body !== null || nullable && request.body === null || required) {\n        const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n        request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n        const isStream = typeName === MapperTypeNames.Stream;\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {\n              rootName: xmlName || serializedName,\n              xmlCharKey\n            });\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey\n            });\n          }\n        } else if (typeName === MapperTypeNames.String && (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n      }\n    }\n  }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = {\n      [xmlnsKey]: xmlNamespace\n    };\n    return result;\n  }\n  return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return {\n      [elementName]: obj\n    };\n  }\n  const result = {\n    [elementName]: obj\n  };\n  result[XML_ATTRKEY] = {\n    [xmlNamespaceKey]: xmlNamespace\n  };\n  return result;\n}","map":{"version":3,"names":["XML_ATTRKEY","XML_CHARKEY","getOperationArgumentValueFromParameter","getOperationRequestInfo","MapperTypeNames","getPathStringFromParameter","serializationPolicyName","serializationPolicy","options","stringifyXML","name","sendRequest","request","next","operationInfo","operationSpec","operationArguments","serializeHeaders","serializeRequestBody","headerParameters","headerParameter","headerValue","undefined","mapper","required","serializer","serialize","headerCollectionPrefix","key","Object","keys","headers","set","serializedName","customHeaders","requestOptions","customHeaderName","Error","serializerOptions","updatedOptions","xml","rootName","includeRoot","xmlCharKey","requestBody","body","bodyMapper","xmlName","xmlElementName","xmlNamespace","xmlNamespacePrefix","nullable","typeName","type","requestBodyParameterPathString","isStream","Stream","isXML","xmlnsKey","value","getXmlValueWithNamespace","Sequence","prepareXMLRootList","String","contentType","match","mediaType","JSON","stringify","error","message","formDataParameters","length","formData","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializedValue","includes","result","obj","elementName","xmlNamespaceKey","Array","isArray"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-client\\src\\serializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  DictionaryMapper,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport type { PipelinePolicy, PipelineResponse, SendRequest } from \"@azure/core-rest-pipeline\";\nimport {\n  getOperationArgumentValueFromParameter,\n  getOperationRequestInfo,\n} from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n\n/**\n * Options to configure API request serialization.\n */\nexport interface SerializationPolicyOptions {\n  /**\n   * A function that is able to write XML. Required for XML support.\n   */\n  stringifyXML?: (obj: any, opts?: XmlOptions) => string;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options: SerializationPolicyOptions = {}): PipelinePolicy {\n  const stringifyXML = options.stringifyXML;\n\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request: OperationRequest, next: SendRequest): Promise<PipelineResponse> {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo?.operationSpec;\n      const operationArguments = operationInfo?.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function serializeHeaders(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n): void {\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(\n          headerParameter.mapper,\n          headerValue,\n          getPathStringFromParameter(headerParameter),\n        );\n        const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n          .headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(\n            headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter),\n            headerValue,\n          );\n        }\n      }\n    }\n  }\n  const customHeaders = operationArguments.options?.requestOptions?.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function serializeRequestBody(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n  stringifyXML: (obj: any, opts?: XmlOptions) => string = function () {\n    throw new Error(\"XML serialization unsupported!\");\n  },\n): void {\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(\n      operationArguments,\n      operationSpec.requestBody,\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable,\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n\n    try {\n      if (\n        (request.body !== undefined && request.body !== null) ||\n        (nullable && request.body === null) ||\n        required\n      ) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody,\n        );\n        request.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          request.body,\n          requestBodyParameterPathString,\n          updatedOptions,\n        );\n\n        const isStream = typeName === MapperTypeNames.Stream;\n\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(\n            xmlNamespace,\n            xmlnsKey,\n            typeName,\n            request.body,\n            updatedOptions,\n          );\n\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(\n              prepareXMLRootList(\n                value,\n                xmlElementName || xmlName || serializedName!,\n                xmlnsKey,\n                xmlNamespace,\n              ),\n              { rootName: xmlName || serializedName, xmlCharKey },\n            );\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey,\n            });\n          }\n        } else if (\n          typeName === MapperTypeNames.String &&\n          (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")\n        ) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error: any) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \",\n        )}.`,\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(\n        operationArguments,\n        formDataParameter,\n      );\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter),\n          updatedOptions,\n        );\n      }\n    }\n  }\n}\n\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(\n  xmlNamespace: string | undefined,\n  xmlnsKey: string,\n  typeName: string,\n  serializedValue: any,\n  options: RequiredSerializerOptions,\n): any {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result: any = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n    return result;\n  }\n\n  return serializedValue;\n}\n\nfunction prepareXMLRootList(\n  obj: any,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string,\n): { [key: string]: any[] } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}