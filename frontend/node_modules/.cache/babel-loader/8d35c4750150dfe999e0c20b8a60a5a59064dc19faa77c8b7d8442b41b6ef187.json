{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing BlockBlob operations. */\nexport class BlockBlobImpl {\n  client;\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  upload(contentLength, body, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      body,\n      options\n    }, uploadOperationSpec);\n  }\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  putBlobFromUrl(contentLength, copySource, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      copySource,\n      options\n    }, putBlobFromUrlOperationSpec);\n  }\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  stageBlock(blockId, contentLength, body, options) {\n    return this.client.sendOperationRequest({\n      blockId,\n      contentLength,\n      body,\n      options\n    }, stageBlockOperationSpec);\n  }\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n  stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n    return this.client.sendOperationRequest({\n      blockId,\n      contentLength,\n      sourceUrl,\n      options\n    }, stageBlockFromURLOperationSpec);\n  }\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n  commitBlockList(blocks, options) {\n    return this.client.sendOperationRequest({\n      blocks,\n      options\n    }, commitBlockListOperationSpec);\n  }\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n  getBlockList(listType, options) {\n    return this.client.sendOperationRequest({\n      listType,\n      options\n    }, getBlockListOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);\nconst uploadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.blobType2],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer\n};\nconst putBlobFromUrlOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.fileRequestIntent, Parameters.transactionalContentMD5, Parameters.blobType2, Parameters.copySourceBlobProperties],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst stageBlockOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer\n};\nconst stageBlockFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp24, Parameters.blockId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.fileRequestIntent, Parameters.sourceUrl, Parameters.sourceContentCrc64, Parameters.sourceRange1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst commitBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getBlockListOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp25, Parameters.listType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","BlockBlobImpl","client","constructor","upload","contentLength","body","options","sendOperationRequest","uploadOperationSpec","putBlobFromUrl","copySource","putBlobFromUrlOperationSpec","stageBlock","blockId","stageBlockOperationSpec","stageBlockFromURL","sourceUrl","stageBlockFromURLOperationSpec","commitBlockList","blocks","commitBlockListOperationSpec","getBlockList","listType","getBlockListOperationSpec","xmlSerializer","createSerializer","path","httpMethod","responses","headersMapper","BlockBlobUploadHeaders","default","bodyMapper","StorageError","BlockBlobUploadExceptionHeaders","requestBody","body1","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","tier","blobTagsString","legalHold1","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","blobType2","isXML","contentType","mediaType","serializer","BlockBlobPutBlobFromUrlHeaders","BlockBlobPutBlobFromUrlExceptionHeaders","accept1","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","sourceContentMD5","copySourceAuthorization","copySourceTags","fileRequestIntent","copySourceBlobProperties","BlockBlobStageBlockHeaders","BlockBlobStageBlockExceptionHeaders","comp24","BlockBlobStageBlockFromURLHeaders","BlockBlobStageBlockFromURLExceptionHeaders","sourceContentCrc64","sourceRange1","BlockBlobCommitBlockListHeaders","BlockBlobCommitBlockListExceptionHeaders","comp25","accept","BlockList","BlockBlobGetBlockListHeaders","BlockBlobGetBlockListExceptionHeaders","snapshot"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\blockBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { BlockBlob } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageClient } from \"../storageClient.js\";\nimport {\n  BlockBlobUploadOptionalParams,\n  BlockBlobUploadResponse,\n  BlockBlobPutBlobFromUrlOptionalParams,\n  BlockBlobPutBlobFromUrlResponse,\n  BlockBlobStageBlockOptionalParams,\n  BlockBlobStageBlockResponse,\n  BlockBlobStageBlockFromURLOptionalParams,\n  BlockBlobStageBlockFromURLResponse,\n  BlockLookupList,\n  BlockBlobCommitBlockListOptionalParams,\n  BlockBlobCommitBlockListResponse,\n  BlockListType,\n  BlockBlobGetBlockListOptionalParams,\n  BlockBlobGetBlockListResponse,\n} from \"../models/index.js\";\n\n/** Class containing BlockBlob operations. */\nexport class BlockBlobImpl implements BlockBlob {\n  private readonly client: StorageClient;\n\n  /**\n   * Initialize a new instance of the class BlockBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClient) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n   * partial update of the content of a block blob, use the Put Block List operation.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  upload(\n    contentLength: number,\n    body: coreRestPipeline.RequestBodyType,\n    options?: BlockBlobUploadOptionalParams,\n  ): Promise<BlockBlobUploadResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, body, options },\n      uploadOperationSpec,\n    );\n  }\n\n  /**\n   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n   * content of the new blob.  To perform partial updates to a block blobâ€™s contents using a source URL,\n   * use the Put Block from URL API in conjunction with Put Block List.\n   * @param contentLength The length of the request.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  putBlobFromUrl(\n    contentLength: number,\n    copySource: string,\n    options?: BlockBlobPutBlobFromUrlOptionalParams,\n  ): Promise<BlockBlobPutBlobFromUrlResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, copySource, options },\n      putBlobFromUrlOperationSpec,\n    );\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  stageBlock(\n    blockId: string,\n    contentLength: number,\n    body: coreRestPipeline.RequestBodyType,\n    options?: BlockBlobStageBlockOptionalParams,\n  ): Promise<BlockBlobStageBlockResponse> {\n    return this.client.sendOperationRequest(\n      { blockId, contentLength, body, options },\n      stageBlockOperationSpec,\n    );\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n   * are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n   *                for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The options parameters.\n   */\n  stageBlockFromURL(\n    blockId: string,\n    contentLength: number,\n    sourceUrl: string,\n    options?: BlockBlobStageBlockFromURLOptionalParams,\n  ): Promise<BlockBlobStageBlockFromURLResponse> {\n    return this.client.sendOperationRequest(\n      { blockId, contentLength, sourceUrl, options },\n      stageBlockFromURLOperationSpec,\n    );\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n   * blob. In order to be written as part of a blob, a block must have been successfully written to the\n   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n   * only those blocks that have changed, then committing the new and existing blocks together. You can\n   * do this by specifying whether to commit a block from the committed block list or from the\n   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n   * it may belong to.\n   * @param blocks Blob Blocks.\n   * @param options The options parameters.\n   */\n  commitBlockList(\n    blocks: BlockLookupList,\n    options?: BlockBlobCommitBlockListOptionalParams,\n  ): Promise<BlockBlobCommitBlockListResponse> {\n    return this.client.sendOperationRequest(\n      { blocks, options },\n      commitBlockListOperationSpec,\n    );\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n   * blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n   *                 blocks, or both lists together.\n   * @param options The options parameters.\n   */\n  getBlockList(\n    listType: BlockListType,\n    options?: BlockBlobGetBlockListOptionalParams,\n  ): Promise<BlockBlobGetBlockListResponse> {\n    return this.client.sendOperationRequest(\n      { listType, options },\n      getBlockListOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst uploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobUploadExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.blobType2,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobPutBlobFromUrlExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags,\n    Parameters.fileRequestIntent,\n    Parameters.transactionalContentMD5,\n    Parameters.blobType2,\n    Parameters.copySourceBlobProperties,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobStageBlockFromURLExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp24,\n    Parameters.blockId,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.fileRequestIntent,\n    Parameters.sourceUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.sourceRange1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobCommitBlockListExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.blocks,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp25],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlockBlobGetBlockListExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp25,\n    Parameters.listType,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}