{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n  return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\nclass HttpHeadersImpl {\n  _headersMap;\n  constructor(rawHeaders) {\n    this._headersMap = new Map();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  set(name, value) {\n    this._headersMap.set(normalizeName(name), {\n      name,\n      value: String(value).trim()\n    });\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  get(name) {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  has(name) {\n    return this._headersMap.has(normalizeName(name));\n  }\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  delete(name) {\n    this._headersMap.delete(normalizeName(name));\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  toJSON(options = {}) {\n    const result = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator]() {\n    return headerIterator(this._headersMap);\n  }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders) {\n  return new HttpHeadersImpl(rawHeaders);\n}","map":{"version":3,"names":["normalizeName","name","toLowerCase","headerIterator","map","entry","values","value","HttpHeadersImpl","_headersMap","constructor","rawHeaders","Map","headerName","Object","keys","set","String","trim","get","has","delete","toJSON","options","result","preserveCase","normalizedName","toString","JSON","stringify","Symbol","iterator","createHttpHeaders"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\httpHeaders.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces.js\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n"],"mappings":"AAAA;AACA;AASA,SAASA,aAAaA,CAACC,IAAY;EACjC,OAAOA,IAAI,CAACC,WAAW,EAAE;AAC3B;AAEA,UAAUC,cAAcA,CAACC,GAA6B;EACpD,KAAK,MAAMC,KAAK,IAAID,GAAG,CAACE,MAAM,EAAE,EAAE;IAChC,MAAM,CAACD,KAAK,CAACJ,IAAI,EAAEI,KAAK,CAACE,KAAK,CAAC;EACjC;AACF;AAEA,MAAMC,eAAe;EACFC,WAAW;EAE5BC,YAAYC,UAAiD;IAC3D,IAAI,CAACF,WAAW,GAAG,IAAIG,GAAG,EAAuB;IACjD,IAAID,UAAU,EAAE;MACd,KAAK,MAAME,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAAC,EAAE;QAChD,IAAI,CAACK,GAAG,CAACH,UAAU,EAAEF,UAAU,CAACE,UAAU,CAAC,CAAC;MAC9C;IACF;EACF;EAEA;;;;;;EAMOG,GAAGA,CAACf,IAAY,EAAEM,KAAgC;IACvD,IAAI,CAACE,WAAW,CAACO,GAAG,CAAChB,aAAa,CAACC,IAAI,CAAC,EAAE;MAAEA,IAAI;MAAEM,KAAK,EAAEU,MAAM,CAACV,KAAK,CAAC,CAACW,IAAI;IAAE,CAAE,CAAC;EAClF;EAEA;;;;;EAKOC,GAAGA,CAAClB,IAAY;IACrB,OAAO,IAAI,CAACQ,WAAW,CAACU,GAAG,CAACnB,aAAa,CAACC,IAAI,CAAC,CAAC,EAAEM,KAAK;EACzD;EAEA;;;;EAIOa,GAAGA,CAACnB,IAAY;IACrB,OAAO,IAAI,CAACQ,WAAW,CAACW,GAAG,CAACpB,aAAa,CAACC,IAAI,CAAC,CAAC;EAClD;EAEA;;;;EAIOoB,MAAMA,CAACpB,IAAY;IACxB,IAAI,CAACQ,WAAW,CAACY,MAAM,CAACrB,aAAa,CAACC,IAAI,CAAC,CAAC;EAC9C;EAEA;;;EAGOqB,MAAMA,CAACC,OAAA,GAAsC,EAAE;IACpD,MAAMC,MAAM,GAAmB,EAAE;IACjC,IAAID,OAAO,CAACE,YAAY,EAAE;MACxB,KAAK,MAAMpB,KAAK,IAAI,IAAI,CAACI,WAAW,CAACH,MAAM,EAAE,EAAE;QAC7CkB,MAAM,CAACnB,KAAK,CAACJ,IAAI,CAAC,GAAGI,KAAK,CAACE,KAAK;MAClC;IACF,CAAC,MAAM;MACL,KAAK,MAAM,CAACmB,cAAc,EAAErB,KAAK,CAAC,IAAI,IAAI,CAACI,WAAW,EAAE;QACtDe,MAAM,CAACE,cAAc,CAAC,GAAGrB,KAAK,CAACE,KAAK;MACtC;IACF;IAEA,OAAOiB,MAAM;EACf;EAEA;;;EAGOG,QAAQA,CAAA;IACb,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACP,MAAM,CAAC;MAAEG,YAAY,EAAE;IAAI,CAAE,CAAC,CAAC;EAC5D;EAEA;;;EAGA,CAACK,MAAM,CAACC,QAAQ,IAAC;IACf,OAAO5B,cAAc,CAAC,IAAI,CAACM,WAAW,CAAC;EACzC;;AAGF;;;;AAIA,OAAM,SAAUuB,iBAAiBA,CAACrB,UAAgC;EAChE,OAAO,IAAIH,eAAe,CAACG,UAAU,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}