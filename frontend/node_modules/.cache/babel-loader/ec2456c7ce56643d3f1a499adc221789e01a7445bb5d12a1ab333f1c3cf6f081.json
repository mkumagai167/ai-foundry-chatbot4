{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the API Key Authentication Policy\n */\nexport const apiKeyAuthenticationPolicyName = \"apiKeyAuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds API key authentication to requests\n */\nexport function apiKeyAuthenticationPolicy(options) {\n  return {\n    name: apiKeyAuthenticationPolicyName,\n    async sendRequest(request, next) {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find(x => x.kind === \"apiKey\");\n      // Skip adding authentication header if no API key authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      if (scheme.apiKeyLocation !== \"header\") {\n        throw new Error(`Unsupported API key location: ${scheme.apiKeyLocation}`);\n      }\n      request.headers.set(scheme.name, options.credential.key);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["ensureSecureConnection","apiKeyAuthenticationPolicyName","apiKeyAuthenticationPolicy","options","name","sendRequest","request","next","scheme","authSchemes","find","x","kind","apiKeyLocation","Error","headers","set","credential","key"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\auth\\apiKeyAuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ApiKeyCredential } from \"../../auth/credentials.js\";\nimport type { AuthScheme } from \"../../auth/schemes.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../../interfaces.js\";\nimport type { PipelinePolicy } from \"../../pipeline.js\";\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n\n/**\n * Name of the API Key Authentication Policy\n */\nexport const apiKeyAuthenticationPolicyName = \"apiKeyAuthenticationPolicy\";\n\n/**\n * Options for configuring the API key authentication policy\n */\nexport interface ApiKeyAuthenticationPolicyOptions {\n  /**\n   * The credential used to authenticate requests\n   */\n  credential: ApiKeyCredential;\n  /**\n   * Optional authentication schemes to use. If `authSchemes` is provided in both request and policy options, the request options will take precedence.\n   */\n  authSchemes?: AuthScheme[];\n  /**\n   * Allows for connecting to HTTP endpoints instead of enforcing HTTPS.\n   * CAUTION: Never use this option in production.\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * Gets a pipeline policy that adds API key authentication to requests\n */\nexport function apiKeyAuthenticationPolicy(\n  options: ApiKeyAuthenticationPolicyOptions,\n): PipelinePolicy {\n  return {\n    name: apiKeyAuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find((x) => x.kind === \"apiKey\");\n\n      // Skip adding authentication header if no API key authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      if (scheme.apiKeyLocation !== \"header\") {\n        throw new Error(`Unsupported API key location: ${scheme.apiKeyLocation}`);\n      }\n\n      request.headers.set(scheme.name, options.credential.key);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAMA,SAASA,sBAAsB,QAAQ,8BAA8B;AAErE;;;AAGA,OAAO,MAAMC,8BAA8B,GAAG,4BAA4B;AAqB1E;;;AAGA,OAAM,SAAUC,0BAA0BA,CACxCC,OAA0C;EAE1C,OAAO;IACLC,IAAI,EAAEH,8BAA8B;IACpC,MAAMI,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D;MACAP,sBAAsB,CAACM,OAAO,EAAEH,OAAO,CAAC;MAExC,MAAMK,MAAM,GAAG,CAACF,OAAO,CAACG,WAAW,IAAIN,OAAO,CAACM,WAAW,GAAGC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,QAAQ,CAAC;MAE7F;MACA,IAAI,CAACJ,MAAM,EAAE;QACX,OAAOD,IAAI,CAACD,OAAO,CAAC;MACtB;MACA,IAAIE,MAAM,CAACK,cAAc,KAAK,QAAQ,EAAE;QACtC,MAAM,IAAIC,KAAK,CAAC,iCAAiCN,MAAM,CAACK,cAAc,EAAE,CAAC;MAC3E;MAEAP,OAAO,CAACS,OAAO,CAACC,GAAG,CAACR,MAAM,CAACJ,IAAI,EAAED,OAAO,CAACc,UAAU,CAACC,GAAG,CAAC;MACxD,OAAOX,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}