{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing Blob operations. */\nexport class BlobImpl {\n  client;\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, downloadOperationSpec);\n  }\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getPropertiesOperationSpec);\n  }\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, deleteOperationSpec);\n  }\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, undeleteOperationSpec);\n  }\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(expiryOptions, options) {\n    return this.client.sendOperationRequest({\n      expiryOptions,\n      options\n    }, setExpiryOperationSpec);\n  }\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setHttpHeadersOperationSpec);\n  }\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, deleteImmutabilityPolicyOperationSpec);\n  }\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(legalHold, options) {\n    return this.client.sendOperationRequest({\n      legalHold,\n      options\n    }, setLegalHoldOperationSpec);\n  }\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setMetadataOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, acquireLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(leaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      options\n    }, releaseLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(leaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      options\n    }, renewLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(leaseId, proposedLeaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      proposedLeaseId,\n      options\n    }, changeLeaseOperationSpec);\n  }\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, breakLeaseOperationSpec);\n  }\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, createSnapshotOperationSpec);\n  }\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(copySource, options) {\n    return this.client.sendOperationRequest({\n      copySource,\n      options\n    }, startCopyFromURLOperationSpec);\n  }\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(copySource, options) {\n    return this.client.sendOperationRequest({\n      copySource,\n      options\n    }, copyFromURLOperationSpec);\n  }\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(copyId, options) {\n    return this.client.sendOperationRequest({\n      copyId,\n      options\n    }, abortCopyFromURLOperationSpec);\n  }\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(tier, options) {\n    return this.client.sendOperationRequest({\n      tier,\n      options\n    }, setTierOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getAccountInfoOperationSpec);\n  }\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, queryOperationSpec);\n  }\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getTagsOperationSpec);\n  }\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setTagsOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);\nconst downloadOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.blobDeleteType],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.deleteSnapshots],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst undeleteOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setExpiryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.expiryOptions, Parameters.expiresOn],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifUnmodifiedSince, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp12],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setLegalHoldOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp13],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.legalHold],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst createSnapshotOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.tier, Parameters.rehydratePriority, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.copySource, Parameters.blobTagsString, Parameters.sealBlob, Parameters.legalHold1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.copySource, Parameters.blobTagsString, Parameters.legalHold1, Parameters.xMsRequiresSync, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.copySourceTags, Parameters.fileRequestIntent],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp15, Parameters.copyId],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.copyActionAbortConstant],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTierOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags, Parameters.rehydratePriority, Parameters.tier1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst queryOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.BlobQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders\n    }\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.comp17],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setTagsOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp18],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.leaseId, Parameters.ifTags, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","BlobImpl","client","constructor","download","options","sendOperationRequest","downloadOperationSpec","getProperties","getPropertiesOperationSpec","delete","deleteOperationSpec","undelete","undeleteOperationSpec","setExpiry","expiryOptions","setExpiryOperationSpec","setHttpHeaders","setHttpHeadersOperationSpec","setImmutabilityPolicy","setImmutabilityPolicyOperationSpec","deleteImmutabilityPolicy","deleteImmutabilityPolicyOperationSpec","setLegalHold","legalHold","setLegalHoldOperationSpec","setMetadata","setMetadataOperationSpec","acquireLease","acquireLeaseOperationSpec","releaseLease","leaseId","releaseLeaseOperationSpec","renewLease","renewLeaseOperationSpec","changeLease","proposedLeaseId","changeLeaseOperationSpec","breakLease","breakLeaseOperationSpec","createSnapshot","createSnapshotOperationSpec","startCopyFromURL","copySource","startCopyFromURLOperationSpec","copyFromURL","copyFromURLOperationSpec","abortCopyFromURL","copyId","abortCopyFromURLOperationSpec","setTier","tier","setTierOperationSpec","getAccountInfo","getAccountInfoOperationSpec","query","queryOperationSpec","getTags","getTagsOperationSpec","setTags","setTagsOperationSpec","xmlSerializer","createSerializer","path","httpMethod","responses","bodyMapper","type","name","serializedName","headersMapper","BlobDownloadHeaders","default","StorageError","BlobDownloadExceptionHeaders","queryParameters","timeoutInSeconds","snapshot","versionId","urlParameters","url","headerParameters","version","requestId","accept1","ifModifiedSince","ifUnmodifiedSince","range","rangeGetContentMD5","rangeGetContentCRC64","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","isXML","serializer","BlobGetPropertiesHeaders","BlobGetPropertiesExceptionHeaders","BlobDeleteHeaders","BlobDeleteExceptionHeaders","blobDeleteType","deleteSnapshots","BlobUndeleteHeaders","BlobUndeleteExceptionHeaders","comp8","BlobSetExpiryHeaders","BlobSetExpiryExceptionHeaders","comp11","expiresOn","BlobSetHttpHeadersHeaders","BlobSetHttpHeadersExceptionHeaders","comp","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","BlobSetImmutabilityPolicyHeaders","BlobSetImmutabilityPolicyExceptionHeaders","comp12","immutabilityPolicyExpiry","immutabilityPolicyMode","BlobDeleteImmutabilityPolicyHeaders","BlobDeleteImmutabilityPolicyExceptionHeaders","BlobSetLegalHoldHeaders","BlobSetLegalHoldExceptionHeaders","comp13","BlobSetMetadataHeaders","BlobSetMetadataExceptionHeaders","comp6","metadata","encryptionScope","BlobAcquireLeaseHeaders","BlobAcquireLeaseExceptionHeaders","comp10","action","duration","BlobReleaseLeaseHeaders","BlobReleaseLeaseExceptionHeaders","action1","leaseId1","BlobRenewLeaseHeaders","BlobRenewLeaseExceptionHeaders","action2","BlobChangeLeaseHeaders","BlobChangeLeaseExceptionHeaders","action4","proposedLeaseId1","BlobBreakLeaseHeaders","BlobBreakLeaseExceptionHeaders","action3","breakPeriod","BlobCreateSnapshotHeaders","BlobCreateSnapshotExceptionHeaders","comp14","BlobStartCopyFromURLHeaders","BlobStartCopyFromURLExceptionHeaders","rehydratePriority","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceIfTags","blobTagsString","sealBlob","legalHold1","BlobCopyFromURLHeaders","BlobCopyFromURLExceptionHeaders","xMsRequiresSync","sourceContentMD5","copySourceAuthorization","copySourceTags","fileRequestIntent","BlobAbortCopyFromURLHeaders","BlobAbortCopyFromURLExceptionHeaders","comp15","copyActionAbortConstant","BlobSetTierHeaders","BlobSetTierExceptionHeaders","comp16","tier1","BlobGetAccountInfoHeaders","BlobGetAccountInfoExceptionHeaders","restype1","BlobQueryHeaders","BlobQueryExceptionHeaders","requestBody","queryRequest","comp17","contentType","accept","mediaType","BlobTags","BlobGetTagsHeaders","BlobGetTagsExceptionHeaders","comp18","BlobSetTagsHeaders","BlobSetTagsExceptionHeaders","tags","transactionalContentMD5","transactionalContentCrc64"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\blob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Blob } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageClient } from \"../storageClient.js\";\nimport {\n  BlobDownloadOptionalParams,\n  BlobDownloadResponse,\n  BlobGetPropertiesOptionalParams,\n  BlobGetPropertiesResponse,\n  BlobDeleteOptionalParams,\n  BlobDeleteResponse,\n  BlobUndeleteOptionalParams,\n  BlobUndeleteResponse,\n  BlobExpiryOptions,\n  BlobSetExpiryOptionalParams,\n  BlobSetExpiryResponse,\n  BlobSetHttpHeadersOptionalParams,\n  BlobSetHttpHeadersResponse,\n  BlobSetImmutabilityPolicyOptionalParams,\n  BlobSetImmutabilityPolicyResponse,\n  BlobDeleteImmutabilityPolicyOptionalParams,\n  BlobDeleteImmutabilityPolicyResponse,\n  BlobSetLegalHoldOptionalParams,\n  BlobSetLegalHoldResponse,\n  BlobSetMetadataOptionalParams,\n  BlobSetMetadataResponse,\n  BlobAcquireLeaseOptionalParams,\n  BlobAcquireLeaseResponse,\n  BlobReleaseLeaseOptionalParams,\n  BlobReleaseLeaseResponse,\n  BlobRenewLeaseOptionalParams,\n  BlobRenewLeaseResponse,\n  BlobChangeLeaseOptionalParams,\n  BlobChangeLeaseResponse,\n  BlobBreakLeaseOptionalParams,\n  BlobBreakLeaseResponse,\n  BlobCreateSnapshotOptionalParams,\n  BlobCreateSnapshotResponse,\n  BlobStartCopyFromURLOptionalParams,\n  BlobStartCopyFromURLResponse,\n  BlobCopyFromURLOptionalParams,\n  BlobCopyFromURLResponse,\n  BlobAbortCopyFromURLOptionalParams,\n  BlobAbortCopyFromURLResponse,\n  AccessTier,\n  BlobSetTierOptionalParams,\n  BlobSetTierResponse,\n  BlobGetAccountInfoOptionalParams,\n  BlobGetAccountInfoResponse,\n  BlobQueryOptionalParams,\n  BlobQueryResponse,\n  BlobGetTagsOptionalParams,\n  BlobGetTagsResponse,\n  BlobSetTagsOptionalParams,\n  BlobSetTagsResponse,\n} from \"../models/index.js\";\n\n/** Class containing Blob operations. */\nexport class BlobImpl implements Blob {\n  private readonly client: StorageClient;\n\n  /**\n   * Initialize a new instance of the class Blob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClient) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param options The options parameters.\n   */\n  download(\n    options?: BlobDownloadOptionalParams,\n  ): Promise<BlobDownloadResponse> {\n    return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n   * properties for the blob. It does not return the content of the blob.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: BlobGetPropertiesOptionalParams,\n  ): Promise<BlobGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPropertiesOperationSpec,\n    );\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n   * by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n   * permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n   * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n   * (ResourceNotFound).\n   * @param options The options parameters.\n   */\n  delete(options?: BlobDeleteOptionalParams): Promise<BlobDeleteResponse> {\n    return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(\n    options?: BlobUndeleteOptionalParams,\n  ): Promise<BlobUndeleteResponse> {\n    return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n  }\n\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: BlobExpiryOptions,\n    options?: BlobSetExpiryOptionalParams,\n  ): Promise<BlobSetExpiryResponse> {\n    return this.client.sendOperationRequest(\n      { expiryOptions, options },\n      setExpiryOperationSpec,\n    );\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    options?: BlobSetHttpHeadersOptionalParams,\n  ): Promise<BlobSetHttpHeadersResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      setHttpHeadersOperationSpec,\n    );\n  }\n\n  /**\n   * The Set Immutability Policy operation sets the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  setImmutabilityPolicy(\n    options?: BlobSetImmutabilityPolicyOptionalParams,\n  ): Promise<BlobSetImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      setImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * The Delete Immutability Policy operation deletes the immutability policy on the blob\n   * @param options The options parameters.\n   */\n  deleteImmutabilityPolicy(\n    options?: BlobDeleteImmutabilityPolicyOptionalParams,\n  ): Promise<BlobDeleteImmutabilityPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      deleteImmutabilityPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * The Set Legal Hold operation sets a legal hold on the blob.\n   * @param legalHold Specified if a legal hold should be set on the blob.\n   * @param options The options parameters.\n   */\n  setLegalHold(\n    legalHold: boolean,\n    options?: BlobSetLegalHoldOptionalParams,\n  ): Promise<BlobSetLegalHoldResponse> {\n    return this.client.sendOperationRequest(\n      { legalHold, options },\n      setLegalHoldOperationSpec,\n    );\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: BlobSetMetadataOptionalParams,\n  ): Promise<BlobSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      setMetadataOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: BlobAcquireLeaseOptionalParams,\n  ): Promise<BlobAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      acquireLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: BlobReleaseLeaseOptionalParams,\n  ): Promise<BlobReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, options },\n      releaseLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: BlobRenewLeaseOptionalParams,\n  ): Promise<BlobRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, options },\n      renewLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: BlobChangeLeaseOptionalParams,\n  ): Promise<BlobChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, proposedLeaseId, options },\n      changeLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: BlobBreakLeaseOptionalParams,\n  ): Promise<BlobBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      breakLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param options The options parameters.\n   */\n  createSnapshot(\n    options?: BlobCreateSnapshotOptionalParams,\n  ): Promise<BlobCreateSnapshotResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      createSnapshotOperationSpec,\n    );\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptionalParams,\n  ): Promise<BlobStartCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      { copySource, options },\n      startCopyFromURLOperationSpec,\n    );\n  }\n\n  /**\n   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n   * a response until the copy is complete.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyFromURL(\n    copySource: string,\n    options?: BlobCopyFromURLOptionalParams,\n  ): Promise<BlobCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      { copySource, options },\n      copyFromURLOperationSpec,\n    );\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n   * blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopyFromURL(\n    copyId: string,\n    options?: BlobAbortCopyFromURLOptionalParams,\n  ): Promise<BlobAbortCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      { copyId, options },\n      abortCopyFromURLOperationSpec,\n    );\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n   * ETag.\n   * @param tier Indicates the tier to be set on the blob.\n   * @param options The options parameters.\n   */\n  setTier(\n    tier: AccessTier,\n    options?: BlobSetTierOptionalParams,\n  ): Promise<BlobSetTierResponse> {\n    return this.client.sendOperationRequest(\n      { tier, options },\n      setTierOperationSpec,\n    );\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: BlobGetAccountInfoOptionalParams,\n  ): Promise<BlobGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getAccountInfoOperationSpec,\n    );\n  }\n\n  /**\n   * The Query operation enables users to select/project on blob data by providing simple query\n   * expressions.\n   * @param options The options parameters.\n   */\n  query(options?: BlobQueryOptionalParams): Promise<BlobQueryResponse> {\n    return this.client.sendOperationRequest({ options }, queryOperationSpec);\n  }\n\n  /**\n   * The Get Tags operation enables users to get the tags associated with a blob.\n   * @param options The options parameters.\n   */\n  getTags(options?: BlobGetTagsOptionalParams): Promise<BlobGetTagsResponse> {\n    return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n  }\n\n  /**\n   * The Set Tags operation enables users to set tags on a blob.\n   * @param options The options parameters.\n   */\n  setTags(options?: BlobSetTagsOptionalParams): Promise<BlobSetTagsResponse> {\n    return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst downloadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.BlobDownloadHeaders,\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.BlobDownloadHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDownloadExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.rangeGetContentMD5,\n    Parameters.rangeGetContentCRC64,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetPropertiesExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.blobDeleteType,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.deleteSnapshots,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst undeleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobUndeleteExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetExpiryHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetExpiryExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.expiryOptions,\n    Parameters.expiresOn,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHttpHeadersHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetHttpHeadersExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetImmutabilityPolicyHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetImmutabilityPolicyExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp12,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifUnmodifiedSince,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobDeleteImmutabilityPolicyExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp12,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetLegalHoldHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetLegalHoldExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp13,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.legalHold,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetMetadataExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAcquireLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobReleaseLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobRenewLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobChangeLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobBreakLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCreateSnapshotExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp14],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobStartCopyFromURLExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.tier,\n    Parameters.rehydratePriority,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfTags,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.sealBlob,\n    Parameters.legalHold1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobCopyFromURLHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobCopyFromURLExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.copySource,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.xMsRequiresSync,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.copySourceTags,\n    Parameters.fileRequestIntent,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobAbortCopyFromURLExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp15,\n    Parameters.copyId,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.copyActionAbortConstant,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setTierOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders,\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTierExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp16,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.rehydratePriority,\n    Parameters.tier1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetAccountInfoExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst queryOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.BlobQueryHeaders,\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.BlobQueryHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobQueryExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.queryRequest,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.comp17,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst getTagsOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobTags,\n      headersMapper: Mappers.BlobGetTagsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobGetTagsExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.snapshot,\n    Parameters.versionId,\n    Parameters.comp18,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setTagsOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobSetTagsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.BlobSetTagsExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.tags,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.versionId,\n    Parameters.comp18,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId,\n    Parameters.ifTags,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}