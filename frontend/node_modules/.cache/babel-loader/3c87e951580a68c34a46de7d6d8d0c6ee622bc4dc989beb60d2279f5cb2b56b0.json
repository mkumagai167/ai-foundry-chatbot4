{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"@azure/core-util\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller {\n  intervalInMs;\n  constructor(options) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions\n    } = options;\n    let state;\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n    const operation = makeBlobBeginCopyFromURLPollOperation({\n      ...state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions\n    });\n    super(operation);\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n    this.intervalInMs = intervalInMs;\n  }\n  delay() {\n    return delay(this.intervalInMs);\n  }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n  const state = this.state;\n  const {\n    copyId\n  } = state;\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n  // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal\n  });\n  state.isCancelled = true;\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n  const state = this.state;\n  const {\n    blobClient,\n    copySource,\n    startCopyFromURLOptions\n  } = state;\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n    // copyId is needed to abort\n    state.copyId = result.copyId;\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({\n        abortSignal: options.abortSignal\n      });\n      const {\n        copyStatus,\n        copyProgress\n      } = result;\n      const prevCopyProgress = state.copyProgress;\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n      if (copyStatus === \"pending\" && copyProgress !== prevCopyProgress && typeof options.fireProgress === \"function\") {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n        state.isCompleted = true;\n      }\n    } catch (err) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n  return JSON.stringify({\n    state: this.state\n  }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n  return {\n    state: {\n      ...state\n    },\n    cancel,\n    toString,\n    update\n  };\n}","map":{"version":3,"names":["delay","Poller","BlobBeginCopyFromUrlPoller","intervalInMs","constructor","options","blobClient","copySource","onProgress","resumeFrom","startCopyFromURLOptions","state","JSON","parse","operation","makeBlobBeginCopyFromURLPollOperation","cancel","copyId","isCompleted","isCancelled","abortCopyFromURL","abortSignal","update","isStarted","result","startCopyFromURL","copyStatus","getProperties","copyProgress","prevCopyProgress","fireProgress","error","Error","copyStatusDescription","err","toString","stringify","key","value","undefined"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\pollers\\BlobStartCopyFromUrlPoller.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay } from \"@azure/core-util\";\nimport type { PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { Poller } from \"@azure/core-lro\";\nimport type {\n  BlobClient,\n  BlobStartCopyFromURLOptions,\n  BlobBeginCopyFromURLResponse,\n} from \"../Clients.js\";\n\n/**\n * Defines the operations from a {@link BlobClient} that are needed for the poller\n * returned by {@link BlobClient.beginCopyFromURL} to work.\n */\nexport type CopyPollerBlobClient = Pick<BlobClient, \"abortCopyFromURL\" | \"getProperties\"> & {\n  startCopyFromURL(\n    copySource: string,\n    options?: BlobStartCopyFromURLOptions,\n  ): Promise<BlobBeginCopyFromURLResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link BlobClient.beginCopyFromURL}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BlobBeginCopyFromUrlPollState\n  extends PollOperationState<BlobBeginCopyFromURLResponse> {\n  /**\n   * The instance of {@link BlobClient} that was used when calling {@link BlobClient.beginCopyFromURL}.\n   */\n  readonly blobClient: CopyPollerBlobClient;\n  /**\n   * The copyId that identifies the in-progress blob copy.\n   */\n  copyId?: string;\n  /**\n   * the progress of the blob copy as reported by the service.\n   */\n  copyProgress?: string;\n  /**\n   * The source URL provided in {@link BlobClient.beginCopyFromURL}.\n   */\n  copySource: string;\n  /**\n   * The options that were passed to the initial {@link BlobClient.beginCopyFromURL} call.\n   * This is exposed for the poller and should not be modified directly.\n   */\n  readonly startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * The PollOperation responsible for:\n *  - performing the initial startCopyFromURL\n *  - checking the copy status via getProperties\n *  - cancellation via abortCopyFromURL\n * @hidden\n */\nexport interface BlobBeginCopyFromURLPollOperation\n  extends PollOperation<BlobBeginCopyFromUrlPollState, BlobBeginCopyFromURLResponse> {}\n\n/**\n * The set of options used to configure the poller.\n * This is an internal interface populated by {@link BlobClient.beginCopyFromURL}.\n *\n * @hidden\n */\nexport interface BlobBeginCopyFromUrlPollerOptions {\n  blobClient: CopyPollerBlobClient;\n  copySource: string;\n  intervalInMs?: number;\n  onProgress?: (state: BlobBeginCopyFromUrlPollState) => void;\n  resumeFrom?: string;\n  startCopyFromURLOptions?: BlobStartCopyFromURLOptions;\n}\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nexport class BlobBeginCopyFromUrlPoller extends Poller<\n  BlobBeginCopyFromUrlPollState,\n  BlobBeginCopyFromURLResponse\n> {\n  public intervalInMs: number;\n\n  constructor(options: BlobBeginCopyFromUrlPollerOptions) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions,\n    } = options;\n\n    let state: BlobBeginCopyFromUrlPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation({\n      ...state,\n      blobClient,\n      copySource,\n      startCopyFromURLOptions,\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel: BlobBeginCopyFromURLPollOperation[\"cancel\"] = async function cancel(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {},\n) {\n  const state = this.state;\n  const { copyId } = state;\n  if (state.isCompleted) {\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  if (!copyId) {\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  }\n\n  // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n  await state.blobClient.abortCopyFromURL(copyId, {\n    abortSignal: options.abortSignal,\n  });\n  state.isCancelled = true;\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update: BlobBeginCopyFromURLPollOperation[\"update\"] = async function update(\n  this: BlobBeginCopyFromURLPollOperation,\n  options = {},\n): Promise<BlobBeginCopyFromURLPollOperation> {\n  const state = this.state;\n  const { blobClient, copySource, startCopyFromURLOptions } = state;\n\n  if (!state.isStarted) {\n    state.isStarted = true;\n    const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n\n    // copyId is needed to abort\n    state.copyId = result.copyId;\n    if (result.copyStatus === \"success\") {\n      state.result = result;\n      state.isCompleted = true;\n    }\n  } else if (!state.isCompleted) {\n    try {\n      const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n      const { copyStatus, copyProgress } = result;\n      const prevCopyProgress = state.copyProgress;\n      if (copyProgress) {\n        state.copyProgress = copyProgress;\n      }\n      if (\n        copyStatus === \"pending\" &&\n        copyProgress !== prevCopyProgress &&\n        typeof options.fireProgress === \"function\"\n      ) {\n        // trigger in setTimeout, or swallow error?\n        options.fireProgress(state);\n      } else if (copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      } else if (copyStatus === \"failed\") {\n        state.error = new Error(\n          `Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`,\n        );\n        state.isCompleted = true;\n      }\n    } catch (err: any) {\n      state.error = err;\n      state.isCompleted = true;\n    }\n  }\n\n  return makeBlobBeginCopyFromURLPollOperation(state);\n};\n\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString: BlobBeginCopyFromURLPollOperation[\"toString\"] = function toString(\n  this: BlobBeginCopyFromURLPollOperation,\n) {\n  return JSON.stringify({ state: this.state }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n    return value;\n  });\n};\n\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(\n  state: BlobBeginCopyFromUrlPollState,\n): BlobBeginCopyFromURLPollOperation {\n  return {\n    state: { ...state },\n    cancel,\n    toString,\n    update,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}