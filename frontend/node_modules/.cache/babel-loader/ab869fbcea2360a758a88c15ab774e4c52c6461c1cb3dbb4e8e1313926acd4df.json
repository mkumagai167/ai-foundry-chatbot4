{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  static parse(services) {\n    const accountSASServices = new AccountSASServices();\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n    return accountSASServices;\n  }\n  /**\n   * Permission to access blob resources granted.\n   */\n  blob = false;\n  /**\n   * Permission to access file resources granted.\n   */\n  file = false;\n  /**\n   * Permission to access queue resources granted.\n   */\n  queue = false;\n  /**\n   * Permission to access table resources granted.\n   */\n  table = false;\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  toString() {\n    const services = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}","map":{"version":3,"names":["AccountSASServices","parse","services","accountSASServices","c","blob","file","queue","table","RangeError","toString","push","join"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\sas\\AccountSASServices.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA;;;;;;;;;AASA,OAAM,MAAOA,kBAAkB;EAC7B;;;;;;EAMO,OAAOC,KAAKA,CAACC,QAAgB;IAClC,MAAMC,kBAAkB,GAAG,IAAIH,kBAAkB,EAAE;IAEnD,KAAK,MAAMI,CAAC,IAAIF,QAAQ,EAAE;MACxB,QAAQE,CAAC;QACP,KAAK,GAAG;UACND,kBAAkB,CAACE,IAAI,GAAG,IAAI;UAC9B;QACF,KAAK,GAAG;UACNF,kBAAkB,CAACG,IAAI,GAAG,IAAI;UAC9B;QACF,KAAK,GAAG;UACNH,kBAAkB,CAACI,KAAK,GAAG,IAAI;UAC/B;QACF,KAAK,GAAG;UACNJ,kBAAkB,CAACK,KAAK,GAAG,IAAI;UAC/B;QACF;UACE,MAAM,IAAIC,UAAU,CAAC,8BAA8BL,CAAC,EAAE,CAAC;MAC3D;IACF;IAEA,OAAOD,kBAAkB;EAC3B;EAEA;;;EAGOE,IAAI,GAAY,KAAK;EAE5B;;;EAGOC,IAAI,GAAY,KAAK;EAE5B;;;EAGOC,KAAK,GAAY,KAAK;EAE7B;;;EAGOC,KAAK,GAAY,KAAK;EAE7B;;;;EAIOE,QAAQA,CAAA;IACb,MAAMR,QAAQ,GAAa,EAAE;IAC7B,IAAI,IAAI,CAACG,IAAI,EAAE;MACbH,QAAQ,CAACS,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,IAAI,IAAI,CAACH,KAAK,EAAE;MACdN,QAAQ,CAACS,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,IAAI,IAAI,CAACJ,KAAK,EAAE;MACdL,QAAQ,CAACS,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,IAAI,IAAI,CAACL,IAAI,EAAE;MACbJ,QAAQ,CAACS,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,OAAOT,QAAQ,CAACU,IAAI,CAAC,EAAE,CAAC;EAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}