{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n/**\n * Name of the OAuth2 Authentication Policy\n */\nexport const oauth2AuthenticationPolicyName = \"oauth2AuthenticationPolicy\";\n/**\n * Gets a pipeline policy that adds authorization header from OAuth2 schemes\n */\nexport function oauth2AuthenticationPolicy(options) {\n  return {\n    name: oauth2AuthenticationPolicyName,\n    async sendRequest(request, next) {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find(x => x.kind === \"oauth2\");\n      // Skip adding authentication header if no OAuth2 authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      const token = await options.credential.getOAuth2Token(scheme.flows, {\n        abortSignal: request.abortSignal\n      });\n      request.headers.set(\"Authorization\", `Bearer ${token}`);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["ensureSecureConnection","oauth2AuthenticationPolicyName","oauth2AuthenticationPolicy","options","name","sendRequest","request","next","scheme","authSchemes","find","x","kind","token","credential","getOAuth2Token","flows","abortSignal","headers","set"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\auth\\oauth2AuthenticationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OAuth2Flow } from \"../../auth/oauth2Flows.js\";\nimport type { OAuth2TokenCredential } from \"../../auth/credentials.js\";\nimport type { AuthScheme } from \"../../auth/schemes.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../../interfaces.js\";\nimport type { PipelinePolicy } from \"../../pipeline.js\";\nimport { ensureSecureConnection } from \"./checkInsecureConnection.js\";\n\n/**\n * Name of the OAuth2 Authentication Policy\n */\nexport const oauth2AuthenticationPolicyName = \"oauth2AuthenticationPolicy\";\n\n/**\n * Options for configuring the OAuth2 authentication policy\n */\nexport interface OAuth2AuthenticationPolicyOptions<TFlows extends OAuth2Flow> {\n  /**\n   * The OAuth2TokenCredential implementation that can supply the bearer token.\n   */\n  credential: OAuth2TokenCredential<TFlows>;\n  /**\n   * Optional authentication schemes to use. If not provided, schemes from the request will be used.\n   */\n  authSchemes?: AuthScheme[];\n  /**\n   * Allows for connecting to HTTP endpoints instead of enforcing HTTPS.\n   * CAUTION: Never use this option in production.\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * Gets a pipeline policy that adds authorization header from OAuth2 schemes\n */\nexport function oauth2AuthenticationPolicy<TFlows extends OAuth2Flow>(\n  options: OAuth2AuthenticationPolicyOptions<TFlows>,\n): PipelinePolicy {\n  return {\n    name: oauth2AuthenticationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // Ensure allowInsecureConnection is explicitly set when sending request to non-https URLs\n      ensureSecureConnection(request, options);\n\n      const scheme = (request.authSchemes ?? options.authSchemes)?.find((x) => x.kind === \"oauth2\");\n\n      // Skip adding authentication header if no OAuth2 authentication scheme is found\n      if (!scheme) {\n        return next(request);\n      }\n      const token = await options.credential.getOAuth2Token(scheme.flows as TFlows[], {\n        abortSignal: request.abortSignal,\n      });\n      request.headers.set(\"Authorization\", `Bearer ${token}`);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAOA,SAASA,sBAAsB,QAAQ,8BAA8B;AAErE;;;AAGA,OAAO,MAAMC,8BAA8B,GAAG,4BAA4B;AAqB1E;;;AAGA,OAAM,SAAUC,0BAA0BA,CACxCC,OAAkD;EAElD,OAAO;IACLC,IAAI,EAAEH,8BAA8B;IACpC,MAAMI,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D;MACAP,sBAAsB,CAACM,OAAO,EAAEH,OAAO,CAAC;MAExC,MAAMK,MAAM,GAAG,CAACF,OAAO,CAACG,WAAW,IAAIN,OAAO,CAACM,WAAW,GAAGC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,QAAQ,CAAC;MAE7F;MACA,IAAI,CAACJ,MAAM,EAAE;QACX,OAAOD,IAAI,CAACD,OAAO,CAAC;MACtB;MACA,MAAMO,KAAK,GAAG,MAAMV,OAAO,CAACW,UAAU,CAACC,cAAc,CAACP,MAAM,CAACQ,KAAiB,EAAE;QAC9EC,WAAW,EAAEX,OAAO,CAACW;OACtB,CAAC;MACFX,OAAO,CAACY,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAC;MACvD,OAAON,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}