{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing PageBlob operations. */\nexport class PageBlobImpl {\n  client;\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(contentLength, blobContentLength, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      blobContentLength,\n      options\n    }, createOperationSpec);\n  }\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(contentLength, body, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      body,\n      options\n    }, uploadPagesOperationSpec);\n  }\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(contentLength, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      options\n    }, clearPagesOperationSpec);\n  }\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n    return this.client.sendOperationRequest({\n      sourceUrl,\n      sourceRange,\n      contentLength,\n      range,\n      options\n    }, uploadPagesFromURLOperationSpec);\n  }\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getPageRangesOperationSpec);\n  }\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getPageRangesDiffOperationSpec);\n  }\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(blobContentLength, options) {\n    return this.client.sendOperationRequest({\n      blobContentLength,\n      options\n    }, resizeOperationSpec);\n  }\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(sequenceNumberAction, options) {\n    return this.client.sendOperationRequest({\n      sequenceNumberAction,\n      options\n    }, updateSequenceNumberOperationSpec);\n  }\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(copySource, options) {\n    return this.client.sendOperationRequest({\n      copySource,\n      options\n    }, copyIncrementalOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);\nconst createOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.immutabilityPolicyExpiry, Parameters.immutabilityPolicyMode, Parameters.encryptionScope, Parameters.tier, Parameters.blobTagsString, Parameters.legalHold1, Parameters.blobType, Parameters.blobContentLength, Parameters.blobSequenceNumber],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.contentType1, Parameters.accept2, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer\n};\nconst clearPagesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.pageWrite1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadPagesFromURLOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.contentLength, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceContentMD5, Parameters.copySourceAuthorization, Parameters.fileRequestIntent, Parameters.pageWrite, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.sourceUrl, Parameters.sourceRange, Parameters.sourceContentCrc64, Parameters.range1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPageRangesDiffOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.snapshot, Parameters.comp20, Parameters.prevsnapshot],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.range, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.prevSnapshotUrl],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst resizeOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.encryptionScope, Parameters.blobContentLength],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst updateSequenceNumberOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.blobSequenceNumber, Parameters.sequenceNumberAction],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst copyIncrementalOperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.copySource],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","PageBlobImpl","client","constructor","create","contentLength","blobContentLength","options","sendOperationRequest","createOperationSpec","uploadPages","body","uploadPagesOperationSpec","clearPages","clearPagesOperationSpec","uploadPagesFromURL","sourceUrl","sourceRange","range","uploadPagesFromURLOperationSpec","getPageRanges","getPageRangesOperationSpec","getPageRangesDiff","getPageRangesDiffOperationSpec","resize","resizeOperationSpec","updateSequenceNumber","sequenceNumberAction","updateSequenceNumberOperationSpec","copyIncremental","copySource","copyIncrementalOperationSpec","xmlSerializer","createSerializer","path","httpMethod","responses","headersMapper","PageBlobCreateHeaders","default","bodyMapper","StorageError","PageBlobCreateExceptionHeaders","queryParameters","timeoutInSeconds","urlParameters","url","headerParameters","version","requestId","accept1","metadata","leaseId","ifModifiedSince","ifUnmodifiedSince","encryptionKey","encryptionKeySha256","encryptionAlgorithm","ifMatch","ifNoneMatch","ifTags","blobCacheControl","blobContentType","blobContentMD5","blobContentEncoding","blobContentLanguage","blobContentDisposition","immutabilityPolicyExpiry","immutabilityPolicyMode","encryptionScope","tier","blobTagsString","legalHold1","blobType","blobSequenceNumber","isXML","serializer","PageBlobUploadPagesHeaders","PageBlobUploadPagesExceptionHeaders","requestBody","body1","comp19","transactionalContentMD5","transactionalContentCrc64","contentType1","accept2","pageWrite","ifSequenceNumberLessThanOrEqualTo","ifSequenceNumberLessThan","ifSequenceNumberEqualTo","contentType","mediaType","PageBlobClearPagesHeaders","PageBlobClearPagesExceptionHeaders","pageWrite1","PageBlobUploadPagesFromURLHeaders","PageBlobUploadPagesFromURLExceptionHeaders","sourceIfModifiedSince","sourceIfUnmodifiedSince","sourceIfMatch","sourceIfNoneMatch","sourceContentMD5","copySourceAuthorization","fileRequestIntent","sourceContentCrc64","range1","PageList","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesExceptionHeaders","marker","maxPageSize","snapshot","comp20","PageBlobGetPageRangesDiffHeaders","PageBlobGetPageRangesDiffExceptionHeaders","prevsnapshot","prevSnapshotUrl","PageBlobResizeHeaders","PageBlobResizeExceptionHeaders","comp","PageBlobUpdateSequenceNumberHeaders","PageBlobUpdateSequenceNumberExceptionHeaders","PageBlobCopyIncrementalHeaders","PageBlobCopyIncrementalExceptionHeaders","comp21"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\pageBlob.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PageBlob } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageClient } from \"../storageClient.js\";\nimport {\n  PageBlobCreateOptionalParams,\n  PageBlobCreateResponse,\n  PageBlobUploadPagesOptionalParams,\n  PageBlobUploadPagesResponse,\n  PageBlobClearPagesOptionalParams,\n  PageBlobClearPagesResponse,\n  PageBlobUploadPagesFromURLOptionalParams,\n  PageBlobUploadPagesFromURLResponse,\n  PageBlobGetPageRangesOptionalParams,\n  PageBlobGetPageRangesResponse,\n  PageBlobGetPageRangesDiffOptionalParams,\n  PageBlobGetPageRangesDiffResponse,\n  PageBlobResizeOptionalParams,\n  PageBlobResizeResponse,\n  SequenceNumberActionType,\n  PageBlobUpdateSequenceNumberOptionalParams,\n  PageBlobUpdateSequenceNumberResponse,\n  PageBlobCopyIncrementalOptionalParams,\n  PageBlobCopyIncrementalResponse,\n} from \"../models/index.js\";\n\n/** Class containing PageBlob operations. */\nexport class PageBlobImpl implements PageBlob {\n  private readonly client: StorageClient;\n\n  /**\n   * Initialize a new instance of the class PageBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClient) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  create(\n    contentLength: number,\n    blobContentLength: number,\n    options?: PageBlobCreateOptionalParams,\n  ): Promise<PageBlobCreateResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, blobContentLength, options },\n      createOperationSpec,\n    );\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  uploadPages(\n    contentLength: number,\n    body: coreRestPipeline.RequestBodyType,\n    options?: PageBlobUploadPagesOptionalParams,\n  ): Promise<PageBlobUploadPagesResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, body, options },\n      uploadPagesOperationSpec,\n    );\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param options The options parameters.\n   */\n  clearPages(\n    contentLength: number,\n    options?: PageBlobClearPagesOptionalParams,\n  ): Promise<PageBlobClearPagesResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, options },\n      clearPagesOperationSpec,\n    );\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n   * URL\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param sourceRange Bytes of source data in the specified range. The length of this range should\n   *                    match the ContentLength header and x-ms-range/Range destination range header.\n   * @param contentLength The length of the request.\n   * @param range The range of bytes to which the source range would be written. The range should be 512\n   *              aligned and range-end is required.\n   * @param options The options parameters.\n   */\n  uploadPagesFromURL(\n    sourceUrl: string,\n    sourceRange: string,\n    contentLength: number,\n    range: string,\n    options?: PageBlobUploadPagesFromURLOptionalParams,\n  ): Promise<PageBlobUploadPagesFromURLResponse> {\n    return this.client.sendOperationRequest(\n      { sourceUrl, sourceRange, contentLength, range, options },\n      uploadPagesFromURLOperationSpec,\n    );\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n   * page blob\n   * @param options The options parameters.\n   */\n  getPageRanges(\n    options?: PageBlobGetPageRangesOptionalParams,\n  ): Promise<PageBlobGetPageRangesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPageRangesOperationSpec,\n    );\n  }\n\n  /**\n   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n   * changed between target blob and previous snapshot.\n   * @param options The options parameters.\n   */\n  getPageRangesDiff(\n    options?: PageBlobGetPageRangesDiffOptionalParams,\n  ): Promise<PageBlobGetPageRangesDiffResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPageRangesDiffOperationSpec,\n    );\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n   *                          page blob size must be aligned to a 512-byte boundary.\n   * @param options The options parameters.\n   */\n  resize(\n    blobContentLength: number,\n    options?: PageBlobResizeOptionalParams,\n  ): Promise<PageBlobResizeResponse> {\n    return this.client.sendOperationRequest(\n      { blobContentLength, options },\n      resizeOperationSpec,\n    );\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n   *                             This property applies to page blobs only. This property indicates how the service should modify the\n   *                             blob's sequence number\n   * @param options The options parameters.\n   */\n  updateSequenceNumber(\n    sequenceNumberAction: SequenceNumberActionType,\n    options?: PageBlobUpdateSequenceNumberOptionalParams,\n  ): Promise<PageBlobUpdateSequenceNumberResponse> {\n    return this.client.sendOperationRequest(\n      { sequenceNumberAction, options },\n      updateSequenceNumberOperationSpec,\n    );\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n   * The snapshot is copied such that only the differential changes between the previously copied\n   * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n   * original snapshot and can be read or copied from as usual. This API is supported since REST version\n   * 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n   *                   access signature.\n   * @param options The options parameters.\n   */\n  copyIncremental(\n    copySource: string,\n    options?: PageBlobCopyIncrementalOptionalParams,\n  ): Promise<PageBlobCopyIncrementalResponse> {\n    return this.client.sendOperationRequest(\n      { copySource, options },\n      copyIncrementalOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCreateExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.immutabilityPolicyExpiry,\n    Parameters.immutabilityPolicyMode,\n    Parameters.encryptionScope,\n    Parameters.tier,\n    Parameters.blobTagsString,\n    Parameters.legalHold1,\n    Parameters.blobType,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.transactionalContentMD5,\n    Parameters.transactionalContentCrc64,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"binary\",\n  serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobClearPagesExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.pageWrite1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUploadPagesFromURLExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.contentLength,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceContentMD5,\n    Parameters.copySourceAuthorization,\n    Parameters.fileRequestIntent,\n    Parameters.pageWrite,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.sourceUrl,\n    Parameters.sourceRange,\n    Parameters.sourceContentCrc64,\n    Parameters.range1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.snapshot,\n    Parameters.comp20,\n    Parameters.prevsnapshot,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.range,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.prevSnapshotUrl,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst resizeOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobResizeExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.encryptionKey,\n    Parameters.encryptionKeySha256,\n    Parameters.encryptionAlgorithm,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.encryptionScope,\n    Parameters.blobContentLength,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.blobSequenceNumber,\n    Parameters.sequenceNumberAction,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}/{blob}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PageBlobCopyIncrementalExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.ifTags,\n    Parameters.copySource,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}