{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { randomUUID } from \"@azure/core-util\";\nimport { ETagNone } from \"./utils/constants.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport { assertResponse } from \"./utils/utils.common.js\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  _leaseId;\n  _url;\n  _containerOrBlobOperation;\n  _isContainer;\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  get leaseId() {\n    return this._leaseId;\n  }\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  get url() {\n    return this._url;\n  }\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client, leaseId) {\n    const clientContext = client.storageClientContext;\n    this._url = client.url;\n    if (client.name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = clientContext.container;\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = clientContext.blob;\n    }\n    if (!leaseId) {\n      leaseId = randomUUID();\n    }\n    this._leaseId = leaseId;\n  }\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  async acquireLease(duration, options = {}) {\n    if (this._isContainer && (options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone || options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone || options.conditions?.tagConditions)) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async updatedOptions => {\n      return assertResponse(await this._containerOrBlobOperation.acquireLease({\n        abortSignal: options.abortSignal,\n        duration,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions\n        },\n        proposedLeaseId: this._leaseId,\n        tracingOptions: updatedOptions.tracingOptions\n      }));\n    });\n  }\n  /**\n   * To change the ID of the lease.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  async changeLease(proposedLeaseId, options = {}) {\n    if (this._isContainer && (options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone || options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone || options.conditions?.tagConditions)) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async updatedOptions => {\n      const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions\n        },\n        tracingOptions: updatedOptions.tracingOptions\n      }));\n      this._leaseId = proposedLeaseId;\n      return response;\n    });\n  }\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  async releaseLease(options = {}) {\n    if (this._isContainer && (options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone || options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone || options.conditions?.tagConditions)) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async updatedOptions => {\n      return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions\n        },\n        tracingOptions: updatedOptions.tracingOptions\n      }));\n    });\n  }\n  /**\n   * To renew the lease.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  async renewLease(options = {}) {\n    if (this._isContainer && (options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone || options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone || options.conditions?.tagConditions)) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async updatedOptions => {\n      return this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions\n        },\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    });\n  }\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  async breakLease(breakPeriod, options = {}) {\n    if (this._isContainer && (options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone || options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone || options.conditions?.tagConditions)) {\n      throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async updatedOptions => {\n      const operationOptions = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions\n        },\n        tracingOptions: updatedOptions.tracingOptions\n      };\n      return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));\n    });\n  }\n}","map":{"version":3,"names":["randomUUID","ETagNone","tracingClient","assertResponse","BlobLeaseClient","_leaseId","_url","_containerOrBlobOperation","_isContainer","leaseId","url","constructor","client","clientContext","storageClientContext","name","undefined","container","blob","acquireLease","duration","options","conditions","ifMatch","ifNoneMatch","tagConditions","RangeError","withSpan","updatedOptions","abortSignal","modifiedAccessConditions","ifTags","proposedLeaseId","tracingOptions","changeLease","response","releaseLease","renewLease","breakLease","breakPeriod","operationOptions"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\BlobLeaseClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { randomUUID } from \"@azure/core-util\";\nimport type { ContainerBreakLeaseOptionalParams } from \"./generatedModels.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { Blob as StorageBlob, Container } from \"./generated/src/operationsInterfaces/index.js\";\nimport type { ModifiedAccessConditions } from \"./models.js\";\nimport type { CommonOptions } from \"./StorageClient.js\";\nimport { ETagNone } from \"./utils/constants.js\";\nimport { tracingClient } from \"./utils/tracing.js\";\nimport type { BlobClient } from \"./Clients.js\";\nimport type { ContainerClient } from \"./ContainerClient.js\";\nimport type { WithResponse } from \"./utils/utils.common.js\";\nimport { assertResponse } from \"./utils/utils.common.js\";\nimport type {\n  ContainerAcquireLeaseHeaders,\n  ContainerBreakLeaseHeaders,\n  ContainerReleaseLeaseHeaders,\n} from \"./generated/src/index.js\";\n\n/**\n * The details for a specific lease.\n */\nexport interface Lease {\n  /**\n   * The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  etag?: string;\n  /**\n   * Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * Error code if any associated with the response that returned\n   * the Lease information.\n   */\n  errorCode?: string;\n}\n\n/**\n * Contains the response data for operations that create, modify, or delete a lease.\n *\n * See {@link BlobLeaseClient}.\n */\nexport type LeaseOperationResponse = WithResponse<Lease, Lease>;\n\n/**\n * Configures lease operations.\n */\nexport interface LeaseOperationOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Conditions to meet when changing the lease.\n   */\n  conditions?: ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | StorageBlob;\n  private _isContainer: boolean;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n  public get leaseId(): string {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n  public get url(): string {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = (client as any).storageClientContext;\n    this._url = client.url;\n\n    if ((client as BlobClient).name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = clientContext.container;\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = clientContext.blob;\n    }\n\n    if (!leaseId) {\n      leaseId = randomUUID();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\",\n      );\n    }\n    return tracingClient.withSpan(\n      \"BlobLeaseClient-acquireLease\",\n      options,\n      async (updatedOptions) => {\n        return assertResponse<ContainerAcquireLeaseHeaders, ContainerAcquireLeaseHeaders>(\n          await this._containerOrBlobOperation.acquireLease({\n            abortSignal: options.abortSignal,\n            duration,\n            modifiedAccessConditions: {\n              ...options.conditions,\n              ifTags: options.conditions?.tagConditions,\n            },\n            proposedLeaseId: this._leaseId,\n            tracingOptions: updatedOptions.tracingOptions,\n          }),\n        );\n      },\n    );\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\",\n      );\n    }\n\n    return tracingClient.withSpan(\n      \"BlobLeaseClient-changeLease\",\n      options,\n      async (updatedOptions) => {\n        const response = assertResponse<Lease, Lease>(\n          await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n            abortSignal: options.abortSignal,\n            modifiedAccessConditions: {\n              ...options.conditions,\n              ifTags: options.conditions?.tagConditions,\n            },\n            tracingOptions: updatedOptions.tracingOptions,\n          }),\n        );\n        this._leaseId = proposedLeaseId;\n        return response;\n      },\n    );\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\",\n      );\n    }\n    return tracingClient.withSpan(\n      \"BlobLeaseClient-releaseLease\",\n      options,\n      async (updatedOptions) => {\n        return assertResponse<ContainerReleaseLeaseHeaders, ContainerReleaseLeaseHeaders>(\n          await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n            abortSignal: options.abortSignal,\n            modifiedAccessConditions: {\n              ...options.conditions,\n              ifTags: options.conditions?.tagConditions,\n            },\n            tracingOptions: updatedOptions.tracingOptions,\n          }),\n        );\n      },\n    );\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\",\n      );\n    }\n    return tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n      return this._containerOrBlobOperation.renewLease(this._leaseId, {\n        abortSignal: options.abortSignal,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        tracingOptions: updatedOptions.tracingOptions,\n      });\n    });\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-container\n   * and\n   * @see https://learn.microsoft.com/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {},\n  ): Promise<LeaseOperationResponse> {\n    if (\n      this._isContainer &&\n      ((options.conditions?.ifMatch && options.conditions?.ifMatch !== ETagNone) ||\n        (options.conditions?.ifNoneMatch && options.conditions?.ifNoneMatch !== ETagNone) ||\n        options.conditions?.tagConditions)\n    ) {\n      throw new RangeError(\n        \"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\",\n      );\n    }\n\n    return tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n      const operationOptions: ContainerBreakLeaseOptionalParams = {\n        abortSignal: options.abortSignal,\n        breakPeriod,\n        modifiedAccessConditions: {\n          ...options.conditions,\n          ifTags: options.conditions?.tagConditions,\n        },\n        tracingOptions: updatedOptions.tracingOptions,\n      };\n      return assertResponse<ContainerBreakLeaseHeaders, ContainerBreakLeaseHeaders>(\n        await this._containerOrBlobOperation.breakLease(operationOptions),\n      );\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}