{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes, format) {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value, format) {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes) {\n  return btoa([...bytes].map(x => String.fromCharCode(x)).join(\"\"));\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes) {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes) {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes) {\n  return [...bytes].map(x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value) {\n  return new TextEncoder().encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value) {\n  return new Uint8Array([...atob(value)].map(x => x.charCodeAt(0)));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value) {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value) {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n  return bytes;\n}","map":{"version":3,"names":["uint8ArrayToString","bytes","format","uint8ArrayToUtf8String","uint8ArrayToBase64","uint8ArrayToBase64Url","uint8ArrayToHexString","stringToUint8Array","value","utf8StringToUint8Array","base64ToUint8Array","base64UrlToUint8Array","hexStringToUint8Array","btoa","map","x","String","fromCharCode","join","replace","decoder","TextDecoder","dataString","decode","toString","padStart","TextEncoder","encode","Uint8Array","atob","charCodeAt","base64String","hexDigits","Set","length","i","highNibble","lowNibble","has","slice","parseInt"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\util\\bytesEncoding.common.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\" | \"hex\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes: Uint8Array): string {\n  return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes: Uint8Array): string {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes: Uint8Array): string {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes: Uint8Array): string {\n  return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value: string): Uint8Array {\n  return new TextEncoder().encode(value);\n}\n\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value: string): Uint8Array {\n  return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value: string): Uint8Array {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\n\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value: string): Uint8Array {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n\n  return bytes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}