{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"./util/error.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static PARSE_ERROR = \"PARSE_ERROR\";\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode;\n  /**\n   * The request that was made.\n   * This property is non-enumerable.\n   */\n  request;\n  /**\n   * The response received (if any.)\n   * This property is non-enumerable.\n   */\n  response;\n  /**\n   * Bonus property set by the throw site.\n   */\n  details;\n  constructor(message, options = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    // The request and response may contain sensitive information in the headers or body.\n    // To help prevent this sensitive information being accidentally logged, the request and response\n    // properties are marked as non-enumerable here. This prevents them showing up in the output of\n    // JSON.stringify and console.log.\n    Object.defineProperty(this, \"request\", {\n      value: options.request,\n      enumerable: false\n    });\n    Object.defineProperty(this, \"response\", {\n      value: options.response,\n      enumerable: false\n    });\n    // Only include useful agent information in the request for logging, as the full agent object\n    // may contain large binary data.\n    const agent = this.request?.agent ? {\n      maxFreeSockets: this.request.agent.maxFreeSockets,\n      maxSockets: this.request.agent.maxSockets\n    } : undefined;\n    // Logging method for util.inspect in Node\n    Object.defineProperty(this, custom, {\n      value: () => {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize({\n          ...this,\n          request: {\n            ...this.request,\n            agent\n          },\n          response: this.response\n        })}`;\n      },\n      enumerable: false\n    });\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e) {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}","map":{"version":3,"names":["isError","custom","Sanitizer","errorSanitizer","RestError","Error","REQUEST_SEND_ERROR","PARSE_ERROR","code","statusCode","request","response","details","constructor","message","options","name","Object","defineProperty","value","enumerable","agent","maxFreeSockets","maxSockets","undefined","sanitize","setPrototypeOf","prototype","isRestError","e"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\restError.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isError } from \"./util/error.js\";\nimport type { PipelineRequest, PipelineResponse } from \"./interfaces.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   * This property is non-enumerable.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   * This property is non-enumerable.\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n\n    // The request and response may contain sensitive information in the headers or body.\n    // To help prevent this sensitive information being accidentally logged, the request and response\n    // properties are marked as non-enumerable here. This prevents them showing up in the output of\n    // JSON.stringify and console.log.\n    Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n    Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n\n    // Only include useful agent information in the request for logging, as the full agent object\n    // may contain large binary data.\n    const agent = this.request?.agent\n      ? {\n          maxFreeSockets: this.request.agent.maxFreeSockets,\n          maxSockets: this.request.agent.maxSockets,\n        }\n      : undefined;\n\n    // Logging method for util.inspect in Node\n    Object.defineProperty(this, custom, {\n      value: () => {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize({\n          ...this,\n          request: { ...this.request, agent },\n          response: this.response,\n        })}`;\n      },\n      enumerable: false,\n    });\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,OAAO,QAAQ,iBAAiB;AAEzC,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,SAAS,QAAQ,qBAAqB;AAE/C,MAAMC,cAAc,GAAG,IAAID,SAAS,EAAE;AAwBtC;;;AAGA,OAAM,MAAOE,SAAU,SAAQC,KAAK;EAClC;;;;;EAKA,OAAgBC,kBAAkB,GAAW,oBAAoB;EACjE;;;;EAIA,OAAgBC,WAAW,GAAW,aAAa;EAEnD;;;EAGOC,IAAI;EACX;;;EAGOC,UAAU;EACjB;;;;EAIOC,OAAO;EACd;;;;EAIOC,QAAQ;EACf;;;EAGOC,OAAO;EAEdC,YAAYC,OAAe,EAAEC,OAAA,GAA4B,EAAE;IACzD,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACE,IAAI,GAAG,WAAW;IACvB,IAAI,CAACR,IAAI,GAAGO,OAAO,CAACP,IAAI;IACxB,IAAI,CAACC,UAAU,GAAGM,OAAO,CAACN,UAAU;IAEpC;IACA;IACA;IACA;IACAQ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;MAAEC,KAAK,EAAEJ,OAAO,CAACL,OAAO;MAAEU,UAAU,EAAE;IAAK,CAAE,CAAC;IACrFH,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MAAEC,KAAK,EAAEJ,OAAO,CAACJ,QAAQ;MAAES,UAAU,EAAE;IAAK,CAAE,CAAC;IAEvF;IACA;IACA,MAAMC,KAAK,GAAG,IAAI,CAACX,OAAO,EAAEW,KAAK,GAC7B;MACEC,cAAc,EAAE,IAAI,CAACZ,OAAO,CAACW,KAAK,CAACC,cAAc;MACjDC,UAAU,EAAE,IAAI,CAACb,OAAO,CAACW,KAAK,CAACE;KAChC,GACDC,SAAS;IAEb;IACAP,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEjB,MAAM,EAAE;MAClCkB,KAAK,EAAEA,CAAA,KAAK;QACV;QACA;QACA,OAAO,cAAc,IAAI,CAACL,OAAO,OAAOX,cAAc,CAACsB,QAAQ,CAAC;UAC9D,GAAG,IAAI;UACPf,OAAO,EAAE;YAAE,GAAG,IAAI,CAACA,OAAO;YAAEW;UAAK,CAAE;UACnCV,QAAQ,EAAE,IAAI,CAACA;SAChB,CAAC,EAAE;MACN,CAAC;MACDS,UAAU,EAAE;KACb,CAAC;IAEFH,MAAM,CAACS,cAAc,CAAC,IAAI,EAAEtB,SAAS,CAACuB,SAAS,CAAC;EAClD;;AAGF;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,CAAU;EACpC,IAAIA,CAAC,YAAYzB,SAAS,EAAE;IAC1B,OAAO,IAAI;EACb;EACA,OAAOJ,OAAO,CAAC6B,CAAC,CAAC,IAAIA,CAAC,CAACb,IAAI,KAAK,WAAW;AAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}