{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint, clientOptions = {}) {\n  const pipeline = clientOptions.pipeline ?? createDefaultPipeline(clientOptions);\n  if (clientOptions.additionalPolicies?.length) {\n    for (const {\n      policy,\n      position\n    } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase\n      });\n    }\n  }\n  const {\n    allowInsecureConnection,\n    httpClient\n  } = clientOptions;\n  const endpointUrl = clientOptions.endpoint ?? endpoint;\n  const client = (path, ...args) => {\n    const getUrl = requestOptions => buildRequestUrl(endpointUrl, path, args, {\n      allowInsecureConnection,\n      ...requestOptions\n    });\n    return {\n      get: (requestOptions = {}) => {\n        return buildOperation(\"GET\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      post: (requestOptions = {}) => {\n        return buildOperation(\"POST\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      put: (requestOptions = {}) => {\n        return buildOperation(\"PUT\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      patch: (requestOptions = {}) => {\n        return buildOperation(\"PATCH\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      delete: (requestOptions = {}) => {\n        return buildOperation(\"DELETE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      head: (requestOptions = {}) => {\n        return buildOperation(\"HEAD\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      options: (requestOptions = {}) => {\n        return buildOperation(\"OPTIONS\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      },\n      trace: (requestOptions = {}) => {\n        return buildOperation(\"TRACE\", getUrl(requestOptions), pipeline, requestOptions, allowInsecureConnection, httpClient);\n      }\n    };\n  };\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline\n  };\n}\nfunction buildOperation(method, url, pipeline, options, allowInsecureConnection, httpClient) {\n  allowInsecureConnection = options.allowInsecureConnection ?? allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(method, url, pipeline, {\n        ...options,\n        allowInsecureConnection\n      }, httpClient).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\");\n      } else {\n        return sendRequest(method, url, pipeline, {\n          ...options,\n          allowInsecureConnection,\n          responseAsStream: true\n        }, httpClient);\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(method, url, pipeline, {\n          ...options,\n          allowInsecureConnection,\n          responseAsStream: true\n        }, httpClient);\n      } else {\n        throw new Error(\"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\");\n      }\n    }\n  };\n}","map":{"version":3,"names":["createDefaultPipeline","sendRequest","buildRequestUrl","isNodeLike","getClient","endpoint","clientOptions","pipeline","additionalPolicies","length","policy","position","afterPhase","undefined","addPolicy","allowInsecureConnection","httpClient","endpointUrl","client","path","args","getUrl","requestOptions","get","buildOperation","post","put","patch","delete","head","options","trace","pathUnchecked","method","url","then","onFulfilled","onrejected","asBrowserStream","Error","responseAsStream","asNodeStream"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\client\\getClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient, HttpMethods } from \"../interfaces.js\";\nimport type { Pipeline } from \"../pipeline.js\";\nimport { createDefaultPipeline } from \"./clientHelpers.js\";\nimport type {\n  Client,\n  ClientOptions,\n  HttpBrowserStreamResponse,\n  HttpNodeStreamResponse,\n  RequestParameters,\n  ResourceMethods,\n  StreamableMethod,\n} from \"./common.js\";\nimport { sendRequest } from \"./sendRequest.js\";\nimport { buildRequestUrl } from \"./urlHelpers.js\";\nimport { isNodeLike } from \"../util/checkEnvironment.js\";\n\n/**\n * Creates a client with a default pipeline\n * @param endpoint - Base endpoint for the client\n * @param credentials - Credentials to authenticate the requests\n * @param options - Client options\n */\nexport function getClient(endpoint: string, clientOptions: ClientOptions = {}): Client {\n  const pipeline = clientOptions.pipeline ?? createDefaultPipeline(clientOptions);\n  if (clientOptions.additionalPolicies?.length) {\n    for (const { policy, position } of clientOptions.additionalPolicies) {\n      // Sign happens after Retry and is commonly needed to occur\n      // before policies that intercept post-retry.\n      const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n      pipeline.addPolicy(policy, {\n        afterPhase,\n      });\n    }\n  }\n\n  const { allowInsecureConnection, httpClient } = clientOptions;\n  const endpointUrl = clientOptions.endpoint ?? endpoint;\n  const client = (path: string, ...args: Array<any>): ResourceMethods<StreamableMethod> => {\n    const getUrl = (requestOptions: RequestParameters): string =>\n      buildRequestUrl(endpointUrl, path, args, { allowInsecureConnection, ...requestOptions });\n\n    return {\n      get: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"GET\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      post: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"POST\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      put: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PUT\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      patch: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"PATCH\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      delete: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"DELETE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      head: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"HEAD\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      options: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"OPTIONS\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n      trace: (requestOptions: RequestParameters = {}): StreamableMethod => {\n        return buildOperation(\n          \"TRACE\",\n          getUrl(requestOptions),\n          pipeline,\n          requestOptions,\n          allowInsecureConnection,\n          httpClient,\n        );\n      },\n    };\n  };\n\n  return {\n    path: client,\n    pathUnchecked: client,\n    pipeline,\n  };\n}\n\nfunction buildOperation(\n  method: HttpMethods,\n  url: string,\n  pipeline: Pipeline,\n  options: RequestParameters,\n  allowInsecureConnection?: boolean,\n  httpClient?: HttpClient,\n): StreamableMethod {\n  allowInsecureConnection = options.allowInsecureConnection ?? allowInsecureConnection;\n  return {\n    then: function (onFulfilled, onrejected) {\n      return sendRequest(\n        method,\n        url,\n        pipeline,\n        { ...options, allowInsecureConnection },\n        httpClient,\n      ).then(onFulfilled, onrejected);\n    },\n    async asBrowserStream() {\n      if (isNodeLike) {\n        throw new Error(\n          \"`asBrowserStream` is supported only in the browser environment. Use `asNodeStream` instead to obtain the response body stream. If you require a Web stream of the response in Node, consider using `Readable.toWeb` on the result of `asNodeStream`.\",\n        );\n      } else {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpBrowserStreamResponse>;\n      }\n    },\n    async asNodeStream() {\n      if (isNodeLike) {\n        return sendRequest(\n          method,\n          url,\n          pipeline,\n          { ...options, allowInsecureConnection, responseAsStream: true },\n          httpClient,\n        ) as Promise<HttpNodeStreamResponse>;\n      } else {\n        throw new Error(\n          \"`isNodeStream` is not supported in the browser environment. Use `asBrowserStream` to obtain the response body stream.\",\n        );\n      }\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}