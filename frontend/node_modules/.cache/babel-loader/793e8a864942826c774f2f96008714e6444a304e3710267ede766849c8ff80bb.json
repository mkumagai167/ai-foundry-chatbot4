{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing Service operations. */\nexport class ServiceImpl {\n  client;\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  setProperties(blobServiceProperties, options) {\n    return this.client.sendOperationRequest({\n      blobServiceProperties,\n      options\n    }, setPropertiesOperationSpec);\n  }\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getPropertiesOperationSpec);\n  }\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n  getStatistics(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getStatisticsOperationSpec);\n  }\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n  listContainersSegment(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listContainersSegmentOperationSpec);\n  }\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n  getUserDelegationKey(keyInfo, options) {\n    return this.client.sendOperationRequest({\n      keyInfo,\n      options\n    }, getUserDelegationKeyOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getAccountInfoOperationSpec);\n  }\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(contentLength, multipartContentType, body, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      multipartContentType,\n      body,\n      options\n    }, submitBatchOperationSpec);\n  }\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n  filterBlobs(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, filterBlobsOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);\nconst setPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listContainersSegmentOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.include],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getUserDelegationKeyOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [Parameters.restype, Parameters.timeoutInSeconds, Parameters.comp3],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","ServiceImpl","client","constructor","setProperties","blobServiceProperties","options","sendOperationRequest","setPropertiesOperationSpec","getProperties","getPropertiesOperationSpec","getStatistics","getStatisticsOperationSpec","listContainersSegment","listContainersSegmentOperationSpec","getUserDelegationKey","keyInfo","getUserDelegationKeyOperationSpec","getAccountInfo","getAccountInfoOperationSpec","submitBatch","contentLength","multipartContentType","body","submitBatchOperationSpec","filterBlobs","filterBlobsOperationSpec","xmlSerializer","createSerializer","path","httpMethod","responses","headersMapper","ServiceSetPropertiesHeaders","default","bodyMapper","StorageError","ServiceSetPropertiesExceptionHeaders","requestBody","queryParameters","restype","comp","timeoutInSeconds","urlParameters","url","headerParameters","contentType","accept","version","requestId","isXML","mediaType","serializer","BlobServiceProperties","ServiceGetPropertiesHeaders","ServiceGetPropertiesExceptionHeaders","accept1","BlobServiceStatistics","ServiceGetStatisticsHeaders","ServiceGetStatisticsExceptionHeaders","comp1","ListContainersSegmentResponse","ServiceListContainersSegmentHeaders","ServiceListContainersSegmentExceptionHeaders","comp2","prefix","marker","maxPageSize","include","UserDelegationKey","ServiceGetUserDelegationKeyHeaders","ServiceGetUserDelegationKeyExceptionHeaders","comp3","ServiceGetAccountInfoHeaders","ServiceGetAccountInfoExceptionHeaders","restype1","type","name","serializedName","ServiceSubmitBatchHeaders","ServiceSubmitBatchExceptionHeaders","comp4","FilterBlobSegment","ServiceFilterBlobsHeaders","ServiceFilterBlobsExceptionHeaders","comp5","where"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\service.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Service } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageClient } from \"../storageClient.js\";\nimport {\n  BlobServiceProperties,\n  ServiceSetPropertiesOptionalParams,\n  ServiceSetPropertiesResponse,\n  ServiceGetPropertiesOptionalParams,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsOptionalParams,\n  ServiceGetStatisticsResponse,\n  ServiceListContainersSegmentOptionalParams,\n  ServiceListContainersSegmentResponse,\n  KeyInfo,\n  ServiceGetUserDelegationKeyOptionalParams,\n  ServiceGetUserDelegationKeyResponse,\n  ServiceGetAccountInfoOptionalParams,\n  ServiceGetAccountInfoResponse,\n  ServiceSubmitBatchOptionalParams,\n  ServiceSubmitBatchResponse,\n  ServiceFilterBlobsOptionalParams,\n  ServiceFilterBlobsResponse,\n} from \"../models/index.js\";\n\n/** Class containing Service operations. */\nexport class ServiceImpl implements Service {\n  private readonly client: StorageClient;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClient) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param blobServiceProperties The StorageService properties.\n   * @param options The options parameters.\n   */\n  setProperties(\n    blobServiceProperties: BlobServiceProperties,\n    options?: ServiceSetPropertiesOptionalParams,\n  ): Promise<ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { blobServiceProperties, options },\n      setPropertiesOperationSpec,\n    );\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n   * and CORS (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ServiceGetPropertiesOptionalParams,\n  ): Promise<ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPropertiesOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n   * account.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ServiceGetStatisticsOptionalParams,\n  ): Promise<ServiceGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getStatisticsOperationSpec,\n    );\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified account\n   * @param options The options parameters.\n   */\n  listContainersSegment(\n    options?: ServiceListContainersSegmentOptionalParams,\n  ): Promise<ServiceListContainersSegmentResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listContainersSegmentOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n   * bearer token authentication.\n   * @param keyInfo Key information\n   * @param options The options parameters.\n   */\n  getUserDelegationKey(\n    keyInfo: KeyInfo,\n    options?: ServiceGetUserDelegationKeyOptionalParams,\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    return this.client.sendOperationRequest(\n      { keyInfo, options },\n      getUserDelegationKeyOperationSpec,\n    );\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: ServiceGetAccountInfoOptionalParams,\n  ): Promise<ServiceGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getAccountInfoOperationSpec,\n    );\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreRestPipeline.RequestBodyType,\n    options?: ServiceSubmitBatchOptionalParams,\n  ): Promise<ServiceSubmitBatchResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, multipartContentType, body, options },\n      submitBatchOperationSpec,\n    );\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n   * given search expression.  Filter blobs searches across all containers within a storage account but\n   * can be scoped within the expression to a single container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ServiceFilterBlobsOptionalParams,\n  ): Promise<ServiceFilterBlobsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      filterBlobsOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst setPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.blobServiceProperties,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlobServiceStatistics,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp1,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceListContainersSegmentExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.include,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.UserDelegationKey,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetUserDelegationKeyExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.keyInfo,\n  queryParameters: [\n    Parameters.restype,\n    Parameters.timeoutInSeconds,\n    Parameters.comp3,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceGetAccountInfoExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.ServiceSubmitBatchHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceSubmitBatchExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ServiceFilterBlobsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ServiceFilterBlobsExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}