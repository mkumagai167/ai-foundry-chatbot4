{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\n/** Class containing Container operations. */\nexport class ContainerImpl {\n  client;\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n  create(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, createOperationSpec);\n  }\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param options The options parameters.\n   */\n  getProperties(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getPropertiesOperationSpec);\n  }\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained within\n   * it are later deleted during garbage collection\n   * @param options The options parameters.\n   */\n  delete(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, deleteOperationSpec);\n  }\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param options The options parameters.\n   */\n  setMetadata(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setMetadataOperationSpec);\n  }\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container data\n   * may be accessed publicly.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getAccessPolicyOperationSpec);\n  }\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, setAccessPolicyOperationSpec);\n  }\n  /**\n   * Restores a previously-deleted container.\n   * @param options The options parameters.\n   */\n  restore(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, restoreOperationSpec);\n  }\n  /**\n   * Renames an existing container.\n   * @param sourceContainerName Required.  Specifies the name of the container to rename.\n   * @param options The options parameters.\n   */\n  rename(sourceContainerName, options) {\n    return this.client.sendOperationRequest({\n      sourceContainerName,\n      options\n    }, renameOperationSpec);\n  }\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(contentLength, multipartContentType, body, options) {\n    return this.client.sendOperationRequest({\n      contentLength,\n      multipartContentType,\n      body,\n      options\n    }, submitBatchOperationSpec);\n  }\n  /**\n   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n   * search expression.  Filter blobs searches within the given container.\n   * @param options The options parameters.\n   */\n  filterBlobs(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, filterBlobsOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  acquireLease(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, acquireLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(leaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      options\n    }, releaseLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(leaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      options\n    }, renewLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  breakLease(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, breakLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(leaseId, proposedLeaseId, options) {\n    return this.client.sendOperationRequest({\n      leaseId,\n      proposedLeaseId,\n      options\n    }, changeLeaseOperationSpec);\n  }\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n  listBlobFlatSegment(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listBlobFlatSegmentOperationSpec);\n  }\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n   *                  character or a string.\n   * @param options The options parameters.\n   */\n  listBlobHierarchySegment(delimiter, options) {\n    return this.client.sendOperationRequest({\n      delimiter,\n      options\n    }, listBlobHierarchySegmentOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, getAccountInfoOperationSpec);\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */true);\nconst createOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.access, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.access, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst restoreOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.deletedContainerName, Parameters.deletedContainerVersion],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renameOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.sourceContainerName, Parameters.sourceLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobFlatSegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobHierarchySegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1, Parameters.delimiter],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","ContainerImpl","client","constructor","create","options","sendOperationRequest","createOperationSpec","getProperties","getPropertiesOperationSpec","delete","deleteOperationSpec","setMetadata","setMetadataOperationSpec","getAccessPolicy","getAccessPolicyOperationSpec","setAccessPolicy","setAccessPolicyOperationSpec","restore","restoreOperationSpec","rename","sourceContainerName","renameOperationSpec","submitBatch","contentLength","multipartContentType","body","submitBatchOperationSpec","filterBlobs","filterBlobsOperationSpec","acquireLease","acquireLeaseOperationSpec","releaseLease","leaseId","releaseLeaseOperationSpec","renewLease","renewLeaseOperationSpec","breakLease","breakLeaseOperationSpec","changeLease","proposedLeaseId","changeLeaseOperationSpec","listBlobFlatSegment","listBlobFlatSegmentOperationSpec","listBlobHierarchySegment","delimiter","listBlobHierarchySegmentOperationSpec","getAccountInfo","getAccountInfoOperationSpec","xmlSerializer","createSerializer","path","httpMethod","responses","headersMapper","ContainerCreateHeaders","default","bodyMapper","StorageError","ContainerCreateExceptionHeaders","queryParameters","timeoutInSeconds","restype2","urlParameters","url","headerParameters","version","requestId","accept1","metadata","access","defaultEncryptionScope","preventEncryptionScopeOverride","isXML","serializer","ContainerGetPropertiesHeaders","ContainerGetPropertiesExceptionHeaders","ContainerDeleteHeaders","ContainerDeleteExceptionHeaders","ifModifiedSince","ifUnmodifiedSince","ContainerSetMetadataHeaders","ContainerSetMetadataExceptionHeaders","comp6","type","name","element","className","serializedName","xmlName","xmlIsWrapped","xmlElementName","ContainerGetAccessPolicyHeaders","ContainerGetAccessPolicyExceptionHeaders","comp7","ContainerSetAccessPolicyHeaders","ContainerSetAccessPolicyExceptionHeaders","requestBody","containerAcl","contentType","accept","mediaType","ContainerRestoreHeaders","ContainerRestoreExceptionHeaders","comp8","deletedContainerName","deletedContainerVersion","ContainerRenameHeaders","ContainerRenameExceptionHeaders","comp9","sourceLeaseId","ContainerSubmitBatchHeaders","ContainerSubmitBatchExceptionHeaders","comp4","FilterBlobSegment","ContainerFilterBlobsHeaders","ContainerFilterBlobsExceptionHeaders","marker","maxPageSize","comp5","where","ContainerAcquireLeaseHeaders","ContainerAcquireLeaseExceptionHeaders","comp10","action","duration","ContainerReleaseLeaseHeaders","ContainerReleaseLeaseExceptionHeaders","action1","leaseId1","ContainerRenewLeaseHeaders","ContainerRenewLeaseExceptionHeaders","action2","ContainerBreakLeaseHeaders","ContainerBreakLeaseExceptionHeaders","action3","breakPeriod","ContainerChangeLeaseHeaders","ContainerChangeLeaseExceptionHeaders","action4","proposedLeaseId1","ListBlobsFlatSegmentResponse","ContainerListBlobFlatSegmentHeaders","ContainerListBlobFlatSegmentExceptionHeaders","comp2","prefix","include1","ListBlobsHierarchySegmentResponse","ContainerListBlobHierarchySegmentHeaders","ContainerListBlobHierarchySegmentExceptionHeaders","ContainerGetAccountInfoHeaders","ContainerGetAccountInfoExceptionHeaders","comp","restype1"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\storage-blob\\src\\generated\\src\\operations\\container.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Container } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { StorageClient } from \"../storageClient.js\";\nimport {\n  ContainerCreateOptionalParams,\n  ContainerCreateResponse,\n  ContainerGetPropertiesOptionalParams,\n  ContainerGetPropertiesResponse,\n  ContainerDeleteOptionalParams,\n  ContainerDeleteResponse,\n  ContainerSetMetadataOptionalParams,\n  ContainerSetMetadataResponse,\n  ContainerGetAccessPolicyOptionalParams,\n  ContainerGetAccessPolicyResponse,\n  ContainerSetAccessPolicyOptionalParams,\n  ContainerSetAccessPolicyResponse,\n  ContainerRestoreOptionalParams,\n  ContainerRestoreResponse,\n  ContainerRenameOptionalParams,\n  ContainerRenameResponse,\n  ContainerSubmitBatchOptionalParams,\n  ContainerSubmitBatchResponse,\n  ContainerFilterBlobsOptionalParams,\n  ContainerFilterBlobsResponse,\n  ContainerAcquireLeaseOptionalParams,\n  ContainerAcquireLeaseResponse,\n  ContainerReleaseLeaseOptionalParams,\n  ContainerReleaseLeaseResponse,\n  ContainerRenewLeaseOptionalParams,\n  ContainerRenewLeaseResponse,\n  ContainerBreakLeaseOptionalParams,\n  ContainerBreakLeaseResponse,\n  ContainerChangeLeaseOptionalParams,\n  ContainerChangeLeaseResponse,\n  ContainerListBlobFlatSegmentOptionalParams,\n  ContainerListBlobFlatSegmentResponse,\n  ContainerListBlobHierarchySegmentOptionalParams,\n  ContainerListBlobHierarchySegmentResponse,\n  ContainerGetAccountInfoOptionalParams,\n  ContainerGetAccountInfoResponse,\n} from \"../models/index.js\";\n\n/** Class containing Container operations. */\nexport class ContainerImpl implements Container {\n  private readonly client: StorageClient;\n\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClient) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n  create(\n    options?: ContainerCreateOptionalParams,\n  ): Promise<ContainerCreateResponse> {\n    return this.client.sendOperationRequest({ options }, createOperationSpec);\n  }\n\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ContainerGetPropertiesOptionalParams,\n  ): Promise<ContainerGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPropertiesOperationSpec,\n    );\n  }\n\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained within\n   * it are later deleted during garbage collection\n   * @param options The options parameters.\n   */\n  delete(\n    options?: ContainerDeleteOptionalParams,\n  ): Promise<ContainerDeleteResponse> {\n    return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n  }\n\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: ContainerSetMetadataOptionalParams,\n  ): Promise<ContainerSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      setMetadataOperationSpec,\n    );\n  }\n\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container data\n   * may be accessed publicly.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    options?: ContainerGetAccessPolicyOptionalParams,\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getAccessPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    options?: ContainerSetAccessPolicyOptionalParams,\n  ): Promise<ContainerSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      setAccessPolicyOperationSpec,\n    );\n  }\n\n  /**\n   * Restores a previously-deleted container.\n   * @param options The options parameters.\n   */\n  restore(\n    options?: ContainerRestoreOptionalParams,\n  ): Promise<ContainerRestoreResponse> {\n    return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n  }\n\n  /**\n   * Renames an existing container.\n   * @param sourceContainerName Required.  Specifies the name of the container to rename.\n   * @param options The options parameters.\n   */\n  rename(\n    sourceContainerName: string,\n    options?: ContainerRenameOptionalParams,\n  ): Promise<ContainerRenameResponse> {\n    return this.client.sendOperationRequest(\n      { sourceContainerName, options },\n      renameOperationSpec,\n    );\n  }\n\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  submitBatch(\n    contentLength: number,\n    multipartContentType: string,\n    body: coreRestPipeline.RequestBodyType,\n    options?: ContainerSubmitBatchOptionalParams,\n  ): Promise<ContainerSubmitBatchResponse> {\n    return this.client.sendOperationRequest(\n      { contentLength, multipartContentType, body, options },\n      submitBatchOperationSpec,\n    );\n  }\n\n  /**\n   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n   * search expression.  Filter blobs searches within the given container.\n   * @param options The options parameters.\n   */\n  filterBlobs(\n    options?: ContainerFilterBlobsOptionalParams,\n  ): Promise<ContainerFilterBlobsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      filterBlobsOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: ContainerAcquireLeaseOptionalParams,\n  ): Promise<ContainerAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      acquireLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: ContainerReleaseLeaseOptionalParams,\n  ): Promise<ContainerReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, options },\n      releaseLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  renewLease(\n    leaseId: string,\n    options?: ContainerRenewLeaseOptionalParams,\n  ): Promise<ContainerRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, options },\n      renewLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: ContainerBreakLeaseOptionalParams,\n  ): Promise<ContainerBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      breakLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    proposedLeaseId: string,\n    options?: ContainerChangeLeaseOptionalParams,\n  ): Promise<ContainerChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      { leaseId, proposedLeaseId, options },\n      changeLeaseOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n  listBlobFlatSegment(\n    options?: ContainerListBlobFlatSegmentOptionalParams,\n  ): Promise<ContainerListBlobFlatSegmentResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBlobFlatSegmentOperationSpec,\n    );\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n   *                  character or a string.\n   * @param options The options parameters.\n   */\n  listBlobHierarchySegment(\n    delimiter: string,\n    options?: ContainerListBlobHierarchySegmentOptionalParams,\n  ): Promise<ContainerListBlobHierarchySegmentResponse> {\n    return this.client.sendOperationRequest(\n      { delimiter, options },\n      listBlobHierarchySegmentOperationSpec,\n    );\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n  getAccountInfo(\n    options?: ContainerGetAccountInfoOptionalParams,\n  ): Promise<ContainerGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getAccountInfoOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.access,\n    Parameters.defaultEncryptionScope,\n    Parameters.preventEncryptionScopeOverride,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp6,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"SignedIdentifier\" },\n          },\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.leaseId,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp7,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.access,\n    Parameters.leaseId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst restoreOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp8,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.deletedContainerName,\n    Parameters.deletedContainerVersion,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst renameOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp9,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.sourceContainerName,\n    Parameters.sourceLeaseId,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\",\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.body,\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp4,\n    Parameters.restype2,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentLength,\n    Parameters.multipartContentType,\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.comp5,\n    Parameters.where,\n    Parameters.restype2,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action1,\n    Parameters.leaseId1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action2,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.action3,\n    Parameters.breakPeriod,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.restype2,\n    Parameters.comp10,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId1,\n    Parameters.action4,\n    Parameters.proposedLeaseId1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp2,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxPageSize,\n    Parameters.restype2,\n    Parameters.include1,\n    Parameters.delimiter,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec: coreClient.OperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders,\n    },\n  },\n  queryParameters: [\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n    Parameters.restype1,\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1,\n  ],\n  isXML: true,\n  serializer: xmlSerializer,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}