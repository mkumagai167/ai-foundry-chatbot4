{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { multipartPolicyName as tspMultipartPolicyName, multipartPolicy as tspMultipartPolicy } from \"@typespec/ts-http-runtime/internal/policies\";\nimport { getRawContent, hasRawContent } from \"../util/file.js\";\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = tspMultipartPolicyName;\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy() {\n  const tspPolicy = tspMultipartPolicy();\n  return {\n    name: multipartPolicyName,\n    sendRequest: async (request, next) => {\n      if (request.multipartBody) {\n        for (const part of request.multipartBody.parts) {\n          if (hasRawContent(part.body)) {\n            part.body = getRawContent(part.body);\n          }\n        }\n      }\n      return tspPolicy.sendRequest(request, next);\n    }\n  };\n}","map":{"version":3,"names":["multipartPolicyName","tspMultipartPolicyName","multipartPolicy","tspMultipartPolicy","getRawContent","hasRawContent","tspPolicy","name","sendRequest","request","next","multipartBody","part","parts","body"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-rest-pipeline\\src\\policies\\multipartPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\nimport {\n  multipartPolicyName as tspMultipartPolicyName,\n  multipartPolicy as tspMultipartPolicy,\n} from \"@typespec/ts-http-runtime/internal/policies\";\nimport type {\n  PipelineRequest as TspPipelineRequest,\n  SendRequest as TspSendRequest,\n} from \"@typespec/ts-http-runtime\";\nimport { getRawContent, hasRawContent } from \"../util/file.js\";\n\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = tspMultipartPolicyName;\n\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy(): PipelinePolicy {\n  const tspPolicy = tspMultipartPolicy();\n\n  return {\n    name: multipartPolicyName,\n    sendRequest: async (request, next) => {\n      if (request.multipartBody) {\n        for (const part of request.multipartBody.parts) {\n          if (hasRawContent(part.body)) {\n            part.body = getRawContent(part.body);\n          }\n        }\n      }\n\n      return tspPolicy.sendRequest(request as TspPipelineRequest, next as TspSendRequest);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAIA,SACEA,mBAAmB,IAAIC,sBAAsB,EAC7CC,eAAe,IAAIC,kBAAkB,QAChC,6CAA6C;AAKpD,SAASC,aAAa,EAAEC,aAAa,QAAQ,iBAAiB;AAE9D;;;AAGA,OAAO,MAAML,mBAAmB,GAAGC,sBAAsB;AAEzD;;;AAGA,OAAM,SAAUC,eAAeA,CAAA;EAC7B,MAAMI,SAAS,GAAGH,kBAAkB,EAAE;EAEtC,OAAO;IACLI,IAAI,EAAEP,mBAAmB;IACzBQ,WAAW,EAAE,MAAAA,CAAOC,OAAO,EAAEC,IAAI,KAAI;MACnC,IAAID,OAAO,CAACE,aAAa,EAAE;QACzB,KAAK,MAAMC,IAAI,IAAIH,OAAO,CAACE,aAAa,CAACE,KAAK,EAAE;UAC9C,IAAIR,aAAa,CAACO,IAAI,CAACE,IAAI,CAAC,EAAE;YAC5BF,IAAI,CAACE,IAAI,GAAGV,aAAa,CAACQ,IAAI,CAACE,IAAI,CAAC;UACtC;QACF;MACF;MAEA,OAAOR,SAAS,CAACE,WAAW,CAACC,OAA6B,EAAEC,IAAsB,CAAC;IACrF;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}