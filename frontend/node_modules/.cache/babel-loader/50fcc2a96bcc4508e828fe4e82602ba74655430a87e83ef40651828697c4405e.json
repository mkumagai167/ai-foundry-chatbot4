{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexport const systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nexport function systemErrorRetryPolicy(options = {}) {\n  return {\n    name: systemErrorRetryPolicyName,\n    sendRequest: retryPolicy([exponentialRetryStrategy({\n      ...options,\n      ignoreHttpStatusCodes: true\n    })], {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT\n    }).sendRequest\n  };\n}","map":{"version":3,"names":["exponentialRetryStrategy","retryPolicy","DEFAULT_RETRY_POLICY_COUNT","systemErrorRetryPolicyName","systemErrorRetryPolicy","options","name","sendRequest","ignoreHttpStatusCodes","maxRetries"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@typespec\\ts-http-runtime\\src\\policies\\systemErrorRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexport const systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface SystemErrorRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nexport function systemErrorRetryPolicy(\n  options: SystemErrorRetryPolicyOptions = {},\n): PipelinePolicy {\n  return {\n    name: systemErrorRetryPolicyName,\n    sendRequest: retryPolicy(\n      [\n        exponentialRetryStrategy({\n          ...options,\n          ignoreHttpStatusCodes: true,\n        }),\n      ],\n      {\n        maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n      },\n    ).sendRequest,\n  };\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,wBAAwB,QAAQ,gDAAgD;AACzF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,0BAA0B,QAAQ,iBAAiB;AAE5D;;;AAGA,OAAO,MAAMC,0BAA0B,GAAG,wBAAwB;AAyBlE;;;;;;AAMA,OAAM,SAAUC,sBAAsBA,CACpCC,OAAA,GAAyC,EAAE;EAE3C,OAAO;IACLC,IAAI,EAAEH,0BAA0B;IAChCI,WAAW,EAAEN,WAAW,CACtB,CACED,wBAAwB,CAAC;MACvB,GAAGK,OAAO;MACVG,qBAAqB,EAAE;KACxB,CAAC,CACH,EACD;MACEC,UAAU,EAAEJ,OAAO,CAACI,UAAU,IAAIP;KACnC,CACF,CAACK;GACH;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}