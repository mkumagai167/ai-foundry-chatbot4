{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { wrapAbortSignalLike } from \"../util/wrapAbortSignal.js\";\nexport const wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nexport function wrapAbortSignalLikePolicy() {\n  return {\n    name: wrapAbortSignalLikePolicyName,\n    sendRequest: async (request, next) => {\n      if (!request.abortSignal) {\n        return next(request);\n      }\n      const {\n        abortSignal,\n        cleanup\n      } = wrapAbortSignalLike(request.abortSignal);\n      // eslint-disable-next-line no-param-reassign\n      request.abortSignal = abortSignal;\n      try {\n        return await next(request);\n      } finally {\n        cleanup?.();\n      }\n    }\n  };\n}","map":{"version":3,"names":["wrapAbortSignalLike","wrapAbortSignalLikePolicyName","wrapAbortSignalLikePolicy","name","sendRequest","request","next","abortSignal","cleanup"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-rest-pipeline\\src\\policies\\wrapAbortSignalLikePolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { type PipelinePolicy } from \"../pipeline.js\";\nimport { wrapAbortSignalLike } from \"../util/wrapAbortSignal.js\";\n\nexport const wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */\nexport function wrapAbortSignalLikePolicy(): PipelinePolicy {\n  return {\n    name: wrapAbortSignalLikePolicyName,\n    sendRequest: async (request, next) => {\n      if (!request.abortSignal) {\n        return next(request);\n      }\n\n      const { abortSignal, cleanup } = wrapAbortSignalLike(request.abortSignal);\n      // eslint-disable-next-line no-param-reassign\n      request.abortSignal = abortSignal;\n      try {\n        return await next(request);\n      } finally {\n        cleanup?.();\n      }\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,mBAAmB,QAAQ,4BAA4B;AAEhE,OAAO,MAAMC,6BAA6B,GAAG,2BAA2B;AAExE;;;;;;AAMA,OAAM,SAAUC,yBAAyBA,CAAA;EACvC,OAAO;IACLC,IAAI,EAAEF,6BAA6B;IACnCG,WAAW,EAAE,MAAAA,CAAOC,OAAO,EAAEC,IAAI,KAAI;MACnC,IAAI,CAACD,OAAO,CAACE,WAAW,EAAE;QACxB,OAAOD,IAAI,CAACD,OAAO,CAAC;MACtB;MAEA,MAAM;QAAEE,WAAW;QAAEC;MAAO,CAAE,GAAGR,mBAAmB,CAACK,OAAO,CAACE,WAAW,CAAC;MACzE;MACAF,OAAO,CAACE,WAAW,GAAGA,WAAW;MACjC,IAAI;QACF,OAAO,MAAMD,IAAI,CAACD,OAAO,CAAC;MAC5B,CAAC,SAAS;QACRG,OAAO,GAAE,CAAE;MACb;IACF;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}