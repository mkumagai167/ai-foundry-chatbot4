{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { XML_CHARKEY } from \"./interfaces.js\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options = {}) {\n  const jsonContentTypes = options.expectedContentTypes?.json ?? defaultJsonContentTypes;\n  const xmlContentTypes = options.expectedContentTypes?.xml ?? defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY\n    }\n  };\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request, next) {\n      const response = await next(request);\n      return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n    }\n  };\n}\nfunction getOperationResponseMap(parsedResponse) {\n  let result;\n  const request = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (operationSpec) {\n    if (!operationInfo?.operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo?.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  const request = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo?.shouldDeserialize;\n  let result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n  const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const {\n    error,\n    shouldReturnResponse\n  } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n      } catch (deserializeError) {\n        const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n          statusCode: parsedResponse.status,\n          request: parsedResponse.request,\n          response: parsedResponse\n        });\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", {\n        xml: {},\n        ignoreUnknownProperties: true\n      });\n    }\n  }\n  return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const initialErrorMessage = parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse\n  });\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // and the parsed body doesn't look like an error object,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec && !(parsedResponse.parsedBody?.error?.code && parsedResponse.parsedBody?.error?.message)) {\n    throw error;\n  }\n  const defaultBodyMapper = errorResponseSpec?.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec?.headersMapper;\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n      }\n      const internalError = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n      if (defaultBodyMapper) {\n        error.response.parsedBody = deserializedError;\n      }\n    }\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n  return {\n    error,\n    shouldReturnResponse: false\n  };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n  if (!operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    try {\n      if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse\n      });\n      throw e;\n    }\n  }\n  return operationResponse;\n}","map":{"version":3,"names":["XML_CHARKEY","RestError","MapperTypeNames","getOperationRequestInfo","defaultJsonContentTypes","defaultXmlContentTypes","deserializationPolicyName","deserializationPolicy","options","jsonContentTypes","expectedContentTypes","json","xmlContentTypes","xml","parseXML","serializerOptions","updatedOptions","rootName","includeRoot","xmlCharKey","name","sendRequest","request","next","response","deserializeResponseBody","getOperationResponseMap","parsedResponse","result","operationInfo","operationSpec","operationResponseGetter","responses","status","shouldDeserializeResponse","shouldDeserialize","undefined","parse","responseSpec","error","shouldReturnResponse","handleErrorResponse","bodyMapper","valueToDeserialize","parsedBody","isXML","type","Sequence","xmlElementName","serializer","deserialize","deserializeError","restError","bodyAsText","statusCode","httpMethod","headersMapper","parsedHeaders","headers","toJSON","ignoreUnknownProperties","isOperationSpecEmpty","expectedStatusCodes","Object","keys","length","isSuccessByStatus","isExpectedStatusCode","isError","errorResponseSpec","default","initialErrorMessage","streamResponseStatusCodes","has","code","message","defaultBodyMapper","defaultHeadersMapper","deserializedError","elementName","internalError","defaultError","operationResponse","opts","text","contentType","get","contentComponents","split","map","component","toLowerCase","some","indexOf","JSON","Error","body","err","msg","errCode","PARSE_ERROR","e"],"sources":["C:\\Users\\M.Kumagai\\Documents\\React\\ai-foundry-chatbot4\\frontend\\node_modules\\@azure\\core-client\\src\\deserializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  FullOperationResponse,\n  OperationRequest,\n  OperationResponseMap,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport { XML_CHARKEY } from \"./interfaces.js\";\nimport type {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationPolicyOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes?: DeserializationContentTypes;\n\n  /**\n   * A function that is able to parse XML. Required for XML support.\n   */\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options: DeserializationPolicyOptions = {}): PipelinePolicy {\n  const jsonContentTypes = options.expectedContentTypes?.json ?? defaultJsonContentTypes;\n  const xmlContentTypes = options.expectedContentTypes?.xml ?? defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return deserializeResponseBody(\n        jsonContentTypes,\n        xmlContentTypes,\n        response,\n        updatedOptions,\n        parseXML,\n      );\n    },\n  };\n}\n\nfunction getOperationResponseMap(\n  parsedResponse: PipelineResponse,\n): undefined | OperationResponseMap {\n  let result: OperationResponseMap | undefined;\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (operationSpec) {\n    if (!operationInfo?.operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo?.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: PipelineResponse): boolean {\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo?.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nasync function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: PipelineResponse,\n  options: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<PipelineResponse> {\n  const parsedResponse = await parse(\n    jsonContentTypes,\n    xmlContentTypes,\n    response,\n    options,\n    parseXML,\n  );\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const { error, shouldReturnResponse } = handleErrorResponse(\n    parsedResponse,\n    operationSpec,\n    responseSpec,\n    options,\n  );\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize: any = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize =\n          typeof valueToDeserialize === \"object\"\n            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n            : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n          responseSpec.bodyMapper,\n          valueToDeserialize,\n          \"operationRes.parsedBody\",\n          options,\n        );\n      } catch (deserializeError: any) {\n        const restError = new RestError(\n          `Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n          {\n            statusCode: parsedResponse.status,\n            request: parsedResponse.request,\n            response: parsedResponse,\n          },\n        );\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n        responseSpec.headersMapper,\n        parsedResponse.headers.toJSON(),\n        \"operationRes.parsedHeaders\",\n        { xml: {}, ignoreUnknownProperties: true },\n      );\n    }\n  }\n\n  return parsedResponse;\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: FullOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponseMap | undefined,\n  options: RequiredSerializerOptions,\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n\n  const initialErrorMessage = parsedResponse.request.streamResponseStatusCodes?.has(\n    parsedResponse.status,\n  )\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse,\n  });\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // and the parsed body doesn't look like an error object,\n  // we should fail so we just throw the parsed response\n  if (\n    !errorResponseSpec &&\n    !(parsedResponse.parsedBody?.error?.code && parsedResponse.parsedBody?.error?.message)\n  ) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec?.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec?.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\",\n          options,\n        );\n      }\n\n      const internalError: any = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        (error.response! as FullOperationResponse).parsedBody = deserializedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      (error.response! as FullOperationResponse).parsedHeaders =\n        operationSpec.serializer.deserialize(\n          defaultHeadersMapper,\n          parsedResponse.headers.toJSON(),\n          \"operationRes.parsedHeaders\",\n        );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nasync function parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: FullOperationResponse,\n  opts: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<FullOperationResponse> {\n  if (\n    !operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) &&\n    operationResponse.bodyAsText\n  ) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n\n    try {\n      if (\n        contentComponents.length === 0 ||\n        contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n      ) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err: any) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse,\n      });\n      throw e;\n    }\n  }\n\n  return operationResponse;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}